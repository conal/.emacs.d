;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'Custom-mode-abbrev-table '())

(define-abbrev-table 'Info-edit-mode-abbrev-table '())

(define-abbrev-table 'Man-mode-abbrev-table '())

(define-abbrev-table 'antlr-mode-abbrev-table '())

(define-abbrev-table 'apropos-mode-abbrev-table '())

(define-abbrev-table 'asm-mode-abbrev-table '())

(define-abbrev-table 'awk-mode-abbrev-table '())

(define-abbrev-table 'bibtex-mode-abbrev-table '())

(define-abbrev-table 'bookmark-bmenu-mode-abbrev-table '())

(define-abbrev-table 'bookmark-edit-annotation-mode-abbrev-table '())

(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'c-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'cabal-mode-abbrev-table '())

(define-abbrev-table 'calendar-mode-abbrev-table '())

(define-abbrev-table 'change-log-mode-abbrev-table '())

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'conf-colon-mode-abbrev-table '())

(define-abbrev-table 'conf-javaprop-mode-abbrev-table '())

(define-abbrev-table 'conf-ppd-mode-abbrev-table '())

(define-abbrev-table 'conf-space-mode-abbrev-table '())

(define-abbrev-table 'conf-unix-mode-abbrev-table '())

(define-abbrev-table 'conf-windows-mode-abbrev-table '())

(define-abbrev-table 'conf-xdefaults-mode-abbrev-table '())

(define-abbrev-table 'csharp-mode-abbrev-table '())

(define-abbrev-table 'css-mode-abbrev-table '())

(define-abbrev-table 'debugger-mode-abbrev-table '())

(define-abbrev-table 'delphi-mode-abbrev-table '())

(define-abbrev-table 'diff-mode-abbrev-table '())

(define-abbrev-table 'display-time-world-mode-abbrev-table '())

(define-abbrev-table 'doc-view-mode-abbrev-table '())

(define-abbrev-table 'doctex-mode-abbrev-table '())

(define-abbrev-table 'doctor-mode-abbrev-table '())

(define-abbrev-table 'edit-abbrevs-mode-abbrev-table '())

(define-abbrev-table 'elisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'epa-info-mode-abbrev-table '())

(define-abbrev-table 'epa-key-list-mode-abbrev-table '())

(define-abbrev-table 'epa-key-mode-abbrev-table '())

(define-abbrev-table 'erc-chanlist-mode-abbrev-table '())

(define-abbrev-table 'erc-list-menu-mode-abbrev-table '())

(define-abbrev-table 'erc-mode-abbrev-table '())

(define-abbrev-table 'eshell-mode-abbrev-table '())

(define-abbrev-table 'finder-mode-abbrev-table '())

(define-abbrev-table 'flycheck-error-list-mode-abbrev-table '())

(define-abbrev-table 'ftp-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'gfm-mode-abbrev-table '())

(define-abbrev-table 'ghc-core-mode-abbrev-table '())

(define-abbrev-table 'ghci-script-mode-abbrev-table '())

(define-abbrev-table 'git-log-view-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table
  '(
    ("a'a" "axis-aligned" nil 5)
    ("a'b" "assign-behavior" nil 4)
    ("a'cn" "alpha conversion" nil 17)
    ("a'ct" "$\\alpha$-convert" nil 4)
    ("a'd" "automatic differentiation" nil 86)
    ("a'd't" "abstract data type" nil 21)
    ("a'd'ts" "abstract data types" nil 22)
    ("a'ect" "alpha-equivalence" nil 1)
    ("a'ett" "alpha-equivalent" nil 1)
    ("a'f" "as follows" nil 306)
    ("a'fr" "applicative functor" nil 0)
    ("a'g" "attribute grammar" nil 2)
    ("a'k'a" "also known as" nil 2)
    ("a'k'o" "a kind of" nil 1)
    ("a'l" "at least" nil 459)
    ("a'o't" "as opposed to" nil 61)
    ("a's" "abstract syntax" nil 137)
    ("a's't" "abstract syntax tree" nil 5)
    ("a's'ts" "abstract syntax trees" nil 10)
    ("a'st" "attribute state" nil 2)
    ("a't" "abstract type" nil 8)
    ("a't'p" "automated theorem proving" nil 3)
    ("a'v" "assign-value" nil 3)
    ("a'w" "at which" nil 17)
    ("a'w'a" "as well as" nil 4)
    ("a'w't" "at which time" nil 2)
    ("a'wk" "approximately well-kinded" nil 1)
    ("a'ws" "approximate well-typedness" nil 21)
    ("aa'bb" "axis-aligned bounding box" nil 1)
    ("aa'bbs" "axis-aligned bounding boxes" nil 2)
    ("abd" "abstracted" nil 22)
    ("abn" "abstraction" nil 350)
    ("abns" "abstractions" nil 161)
    ("abotu" "about" nil 11)
    ("abt" "abstract" nil 437)
    ("abtd" "abstracted" nil 4)
    ("abtg" "abstracting" nil 16)
    ("abts" "abstracts" nil 12)
    ("abty" "abstractly" nil 17)
    ("acl" "acceptable" nil 72)
    ("actg" "accounting" nil 3)
    ("actgs" "accountings" nil 0)
    ("acy" "acceptability" nil 37)
    ("addn" "addition" nil 89)
    ("addns" "additions" nil 32)
    ("addny" "additionally" nil 6)
    ("adl" "additional" nil 2)
    ("adly" "additionally" nil 3)
    ("adn" "and" nil 400)
    ("adnl" "additional" nil 234)
    ("adnly" "additionally" nil 15)
    ("adny" "additionally" nil 3)
    ("adv" "additive" nil 1)
    ("agm" "algorithm" nil 830)
    ("agmc" "algorithmic" nil 28)
    ("agmcy" "algorithmically" nil 5)
    ("agms" "algorithms" nil 338)
    ("agt" "argument" nil 1129)
    ("agts" "arguments" nil 745)
    ("ahve" "have" nil 48)
    ("ajn" "adjunction" nil 11)
    ("ajns" "adjunctions" nil 2)
    ("ala" "à la" nil 2)
    ("alc" "algebraic" nil 37)
    ("alcy" "algebraically" nil 1)
    ("alhpa" "alpha" nil 2)
    ("alt" "absolute" nil 92)
    ("altg" "alternating" nil 2)
    ("altt" "alternate" nil 69)
    ("altts" "alternates" nil 1)
    ("alty" "absolutely" nil 10)
    ("amn" "animation" nil 66)
    ("amns" "animations" nil 19)
    ("ap'f" "applicative functor" nil 10)
    ("ap'fs" "applicative functors" nil 9)
    ("apbl" "applicable" nil 66)
    ("apby" "applicability" nil 29)
    ("apg" "applying" nil 364)
    ("aph" "approach" nil 1073)
    ("aphd" "approached" nil 5)
    ("aphg" "approaching" nil 8)
    ("aphs" "approaches" nil 107)
    ("apn" "application" nil 1090)
    ("apns" "applications" nil 506)
    ("appt" "appropriate" nil 10)
    ("appty" "appropriately" nil 1)
    ("aps" "applies" nil 86)
    ("apv" "applicative" nil 777)
    ("apvl" "approval" nil 3)
    ("apvs" "applicatives" nil 24)
    ("apvy" "applicatively" nil 4)
    ("apy" "apply" nil 888)
    ("apyd" "applied" nil 362)
    ("apys" "applies" nil 118)
    ("arent" "aren't" nil 9)
    ("asap'" "as soon as possible" nil 2)
    ("asct" "associate" nil 4)
    ("asg" "assigning" nil 27)
    ("asgd" "assigned" nil 16)
    ("asgt" "assignment" nil 89)
    ("asgts" "assignments" nil 26)
    ("asmn" "assumption" nil 123)
    ("asmns" "assumptions" nil 45)
    ("asn" "association" nil 57)
    ("asns" "associations" nil 8)
    ("asrn" "assertion" nil 3)
    ("asrns" "assertions" nil 0)
    ("ast" "associate" nil 73)
    ("astd" "associated" nil 305)
    ("astg" "associating" nil 20)
    ("astn" "association" nil 2)
    ("asts" "associates" nil 20)
    ("asty" "associativity" nil 16)
    ("asv" "associative" nil 81)
    ("asvy" "associativity" nil 70)
    ("at's" "attribute state" nil 0)
    ("ata" "automata" nil 56)
    ("atc" "automatic" nil 103)
    ("atcy" "automatically" nil 209)
    ("atn" "automaton" nil 80)
    ("atr" "architecture" nil 132)
    ("atrl" "architectural" nil 3)
    ("atrs" "architectures" nil 41)
    ("att" "attribute" nil 246)
    ("attd" "attributed" nil 13)
    ("attr" "attr" nil 85)
    ("atts" "attributes" nil 221)
    ("aufn" "anti-unification" nil 4)
    ("aufr" "anti-unifier" nil 1)
    ("aufrs" "anti-unifiers" nil 0)
    ("avl" "ActiveVRML" nil 78)
    ("avn" "abbreviation" nil 45)
    ("avns" "abbreviations" nil 21)
    ("avt" "abbreviate" nil 11)
    ("avtd" "abbreviated" nil 6)
    ("avtg" "abbreviating" nil 0)
    ("avts" "abbreviates" nil 3)
    ("axg" "approximating" nil 26)
    ("axm" "axiom" nil 4)
    ("axms" "axioms" nil 22)
    ("axn" "approximation" nil 204)
    ("axns" "approximations" nil 90)
    ("axt" "approximate" nil 101)
    ("axtd" "approximated" nil 12)
    ("axtg" "approximating" nil 5)
    ("axts" "approximates" nil 11)
    ("axty" "approximately" nil 4)
    ("axy" "approximately" nil 11)
    ("b'b" "bounding box" nil 10)
    ("b'bs" "bounding boxes" nil 12)
    ("b'cn" "beta-conversion" nil 3)
    ("b'f" "breadth-first" nil 7)
    ("b'f's" "breadth-first search" nil 8)
    ("b'l" "behavior language" nil 32)
    ("b'm'o" "by means of" nil 2)
    ("b'rc" "beta reduce" nil 4)
    ("b'rcd" "beta reduced" nil 0)
    ("b'rdt" "beta reduced" nil 1)
    ("b'rn" "beta reduction" nil 38)
    ("b'rns" "beta reductions" nil 6)
    ("b'rnt" "beta reduction" nil 22)
    ("b'rt" "beta reduce" nil 1)
    ("b'rx" "beta redex" nil 7)
    ("b'rxs" "beta redexes" nil 5)
    ("b't" "behavior thread" nil 12)
    ("b't'w" "by the way" nil 31)
    ("b'ts" "behavior threads" nil 8)
    ("b'v" "bound variable" nil 46)
    ("b'v'h" "bounding volume hierarchy" nil 0)
    ("b'v'hs" "bounding volume hierarchies" nil 0)
    ("b'vm" "bounding volume" nil 4)
    ("b'vms" "bounding volumes" nil 9)
    ("b'vs" "bound variables" nil 82)
    ("bc'c'c" "bicartesian closed category" nil 1)
    ("bd" "bound" nil 111)
    ("bdd" "bounded" nil 19)
    ("bdg" "binding" nil 187)
    ("bdgs" "bindings" nil 85)
    ("bds" "bounds" nil 23)
    ("becasue" "because" nil 27)
    ("becuase" "because" nil 67)
    ("bjn" "bijection" nil 33)
    ("bjns" "bijections" nil 5)
    ("bjv" "bijective" nil 12)
    ("bot'" "⊥" nil 73)
    ("btm" "bottom" nil 1)
    ("btms" "bottoms" nil 1)
    ("bv" "behave" nil 1)
    ("bvd" "behaved" nil 0)
    ("bvl" "behavioral" nil 3)
    ("bvr" "behavior" nil 1684)
    ("bvrl" "behavioral" nil 4)
    ("bvrr" "Bvr" nil 3)
    ("bvrs" "behaviors" nil 900)
    ("bvs" "behaves" nil 0)
    ("c'b'v" "call-by-value" nil 27)
    ("c'b'x" "continuation-based transformation" nil 1)
    ("c'c" "cartesian closed" nil 0)
    ("c'c'c" "cartesian closed category" nil 5)
    ("c'c'cs" "cartesian closed categories" nil 15)
    ("c'cs" "chain-completeness" nil 1)
    ("c'ctn" "collision continuation" nil 3)
    ("c'd" "collision detection" nil 19)
    ("c'e" "constraint expression" nil 2)
    ("c'es" "constraint expressions" nil 2)
    ("c'f" "continuous function" nil 9)
    ("c'f'l" "context-free language" nil 0)
    ("c'f'ls" "context-free languages" nil 1)
    ("c'fs" "continuous functions" nil 1)
    ("c'g" "computer graphics" nil 11)
    ("c'l'p" "constraint logic programming" nil 23)
    ("c'o'c" "Calculus of Constructions" nil 9)
    ("c'o'm" "calculus on manifolds" nil 5)
    ("c'p" "collision prediction" nil 47)
    ("c'p's" "continuation-passing style" nil 2)
    ("c'r" "collision response" nil 5)
    ("c'rs" "conversion rules" nil 6)
    ("c's" "concrete syntax" nil 12)
    ("c's'e" "common subexpression elimination" nil 9)
    ("c's'g" "constructive solid geometry" nil 2)
    ("c's'p" "complete set of pre-unifiers" nil 0)
    ("c's'u" "complete set of unifiers" nil 13)
    ("c's'us" "complete sets of unifiers" nil 4)
    ("c't" "category theory" nil 60)
    ("c't'c" "compiling to categories" nil 14)
    ("c'tc" "category theoretic" nil 1)
    ("c'v" "concrete value" nil 12)
    ("c'vs" "concrete values" nil 18)
    ("cafe'" "café" nil 3)
    ("cafe's" "cafés" nil 2)
    ("cant" "can't" nil 35)
    ("cbl" "constrainable" nil 94)
    ("cbls" "constrainables" nil 52)
    ("cbn" "combination" nil 142)
    ("cbnl" "combinational" nil 18)
    ("cbns" "combinations" nil 35)
    ("cbr" "combinator" nil 67)
    ("cbrs" "combinators" nil 194)
    ("cci" "calculi" nil 25)
    ("ccln" "conclusion" nil 116)
    ("cclns" "conclusions" nil 53)
    ("ccn" "calculation" nil 11)
    ("ccns" "calculations" nil 11)
    ("ccs" "calculus" nil 171)
    ("cct" "calculate" nil 7)
    ("ccts" "calculates" nil 1)
    ("cdl" "conditional" nil 69)
    ("cdls" "conditionals" nil 0)
    ("cdly" "conditionally" nil 3)
    ("cdmn" "codomain" nil 2)
    ("cdn" "condition" nil 230)
    ("cdnl" "conditional" nil 40)
    ("cdnls" "conditionals" nil 44)
    ("cdnly" "conditionally" nil 0)
    ("cdns" "conditions" nil 103)
    ("cdots'" "⋯" nil 4)
    ("cdt" "coordinate" nil 47)
    ("cdtd" "coordinated" nil 5)
    ("cdtg" "coordinating" nil 4)
    ("cdts" "coordinates" nil 39)
    ("cfc" "conference" nil 68)
    ("cfcs" "conferences" nil 10)
    ("cft" "coefficient" nil 10)
    ("cfts" "coefficients" nil 20)
    ("cgl" "categorical" nil 4)
    ("cgly" "categorically" nil 1)
    ("cgn" "conjugation" nil 11)
    ("cgt" "conjugate" nil 1)
    ("cgy" "category" nil 3)
    ("cgys" "categories" nil 1)
    ("ch'r" "Church-Rosser" nil 32)
    ("circ'" "∘" nil 8)
    ("cjn" "conjunction" nil 93)
    ("cjns" "conjunctions" nil 14)
    ("cjr" "conjecture" nil 24)
    ("cjrd" "conjectured" nil 0)
    ("cjv" "conjunctive" nil 4)
    ("cjvy" "conjunctively" nil 0)
    ("ck" "check" nil 442)
    ("ckd" "checked" nil 71)
    ("ckg" "checking" nil 158)
    ("cks" "checks" nil 17)
    ("cln" "collection" nil 382)
    ("clns" "collections" nil 49)
    ("cmpn" "composition" nil 7)
    ("cmx" "complex" nil 6)
    ("cn" "connection" nil 200)
    ("cnqy" "consequently" nil 0)
    ("cns" "connections" nil 66)
    ("cnt" "constant" nil 759)
    ("cnts" "constants" nil 335)
    ("cnty" "constantly" nil 0)
    ("cojt" "cobject" nil 2)
    ("cojts" "cobjects" nil 3)
    ("commetn" "comment" nil 1)
    ("couldnt" "couldn't" nil 1)
    ("cpbl" "composable" nil 6)
    ("cpby" "composability" nil 8)
    ("cpd" "composed" nil 10)
    ("cpl" "compositional" nil 107)
    ("cply" "compositionally" nil 22)
    ("cpn" "composition" nil 945)
    ("cpnl" "compositional" nil 45)
    ("cpns" "compositions" nil 118)
    ("cpny" "compositionally" nil 2)
    ("cps" "compose" nil 17)
    ("cpsd" "composed" nil 4)
    ("cpsg" "composing" nil 12)
    ("cpss" "composes" nil 0)
    ("cpt" "component" nil 242)
    ("cptl" "computational" nil 37)
    ("cptly" "computationally" nil 3)
    ("cptn" "computation" nil 458)
    ("cptns" "computations" nil 164)
    ("cpts" "components" nil 237)
    ("cpty" "compositionality" nil 6)
    ("cqn" "consequence" nil 64)
    ("cqns" "consequences" nil 39)
    ("cqny" "consequently" nil 9)
    ("cqt" "consequent" nil 8)
    ("cqty" "consequently" nil 26)
    ("crd" "correspond" nil 156)
    ("crdc" "correspondence" nil 145)
    ("crdd" "corresponded" nil 27)
    ("crdg" "corresponding" nil 428)
    ("crdgy" "correspondingly" nil 33)
    ("crdn" "coordination" nil 2)
    ("crds" "corresponds" nil 110)
    ("crln" "correlation" nil 1)
    ("crlns" "correlations" nil 0)
    ("csn" "collision" nil 116)
    ("csns" "collisions" nil 36)
    ("cst" "construct" nil 420)
    ("cstd" "constructed" nil 144)
    ("cstg" "constructing" nil 165)
    ("cstn" "construction" nil 447)
    ("cstns" "constructions" nil 32)
    ("csts" "constructs" nil 90)
    ("cstv" "constructive" nil 11)
    ("cstvy" "constructively" nil 4)
    ("csv" "conservative" nil 21)
    ("csvy" "conservatively" nil 2)
    ("ct" "constraint" nil 338)
    ("ct'" "CT" nil 2)
    ("ctc'" "compiling to categories" nil 15)
    ("ctc''" "compiling-to-categories" nil 33)
    ("ctg" "containing" nil 30)
    ("ctgs" "contiguous" nil 1)
    ("ctn" "continuation" nil 131)
    ("ctns" "continuations" nil 65)
    ("ctods" "cdots" nil 6)
    ("ctr" "constructor" nil 451)
    ("ctrs" "constructors" nil 261)
    ("cts" "constraints" nil 283)
    ("ctsy" "continuously" nil 13)
    ("ctus" "continuous" nil 449)
    ("ctusy" "continuously" nil 42)
    ("ctuy" "continuity" nil 16)
    ("ctv" "commutative" nil 40)
    ("ctvy" "commutativity" nil 22)
    ("cty" "continuity" nil 39)
    ("cvbl" "ConstraintVariable" nil 2)
    ("cvby" "convertibility" nil 42)
    ("cvc" "convenience" nil 6)
    ("cvl" "convertible" nil 62)
    ("cvln" "convolution" nil 216)
    ("cvlnl" "convolutional" nil 2)
    ("cvlns" "convolutions" nil 5)
    ("cvn" "conversion" nil 358)
    ("cvnc" "convenience" nil 127)
    ("cvns" "conversions" nil 70)
    ("cvnt" "convenient" nil 236)
    ("cvnty" "conveniently" nil 18)
    ("cvt" "convert" nil 252)
    ("cvtd" "converted" nil 57)
    ("cvtg" "converting" nil 88)
    ("cvtl" "conventional" nil 126)
    ("cvtly" "conventionally" nil 5)
    ("cvtn" "convention" nil 63)
    ("cvtns" "conventions" nil 13)
    ("cvtr" "converter" nil 5)
    ("cvtrs" "converters" nil 0)
    ("cvts" "converts" nil 25)
    ("cx" "context" nil 302)
    ("cx'" "cx" nil 5)
    ("cx'f" "context-free" nil 4)
    ("cx'f'l" "context-free language" nil 0)
    ("cx'f'ls" "context-free languages" nil 0)
    ("cx's" "context-sensitive" nil 1)
    ("cxs" "contexts" nil 115)
    ("cz" "characterize" nil 2)
    ("d'b" "double buffer" nil 1)
    ("d'bd" "double-buffered" nil 0)
    ("d'bg" "double buffering" nil 4)
    ("d'c" "dependent calculus" nil 30)
    ("d'd" "denotational design" nil 39)
    ("d'e" "differential equation" nil 9)
    ("d'es" "differential equations" nil 28)
    ("d'f" "depth-first" nil 11)
    ("d'f'p" "differentiable functional programming" nil 4)
    ("d'f's" "depth-first search" nil 8)
    ("d'f't" "dependent function type" nil 1)
    ("d'f'ts" "dependent function types" nil 9)
    ("d'i" "de Bruijn index" nil 15)
    ("d'is" "de Bruijn indices" nil 28)
    ("d'l" "deep learning" nil 49)
    ("d'm" "direct manipulation" nil 1)
    ("d'o'f" "degree of freedom" nil 7)
    ("d'o'fs" "degrees of freedom" nil 17)
    ("d'p" "dynamic programming" nil 17)
    ("d'p't" "dependent product type" nil 0)
    ("d'p'ts" "dependent product types" nil 0)
    ("d's" "data structure" nil 88)
    ("d's'e'l" "domain-specific embedded language" nil 0)
    ("d's'e'ls" "domain-specific embedded languages" nil 2)
    ("d's'l" "domain-specific language" nil 5)
    ("d's'ls" "domain-specific languages" nil 9)
    ("d'sm" "denotational semantics" nil 87)
    ("d'ss" "data structures" nil 63)
    ("d't" "data type" nil 106)
    ("d't'l'c" "dependent typed lambda calculus" nil 5)
    ("d'tp" "data type" nil 19)
    ("d'tps" "data types" nil 11)
    ("d'ts" "data types" nil 132)
    ("da'd" "data-driven" nil 18)
    ("da'p" "data-parallel" nil 1)
    ("dbd" "distributed" nil 28)
    ("dbn" "distribution" nil 117)
    ("dbns" "distributions" nil 95)
    ("dbt" "distribute" nil 43)
    ("dbtd" "distributed" nil 11)
    ("dbtg" "distributing" nil 11)
    ("dbts" "distributes" nil 25)
    ("dbv" "distributive" nil 29)
    ("dbvy" "distributivity" nil 14)
    ("dcb" "describe" nil 218)
    ("dcbd" "described" nil 425)
    ("dcbg" "describing" nil 99)
    ("dcbl" "decidable" nil 10)
    ("dcbs" "describes" nil 124)
    ("dcln" "declaration" nil 83)
    ("dclns" "declarations" nil 55)
    ("dcn" "declaration" nil 111)
    ("dcns" "declarations" nil 74)
    ("dcpd" "decomposed" nil 0)
    ("dcpn" "decomposition" nil 134)
    ("dcpns" "decompositions" nil 14)
    ("dcps" "decompose" nil 35)
    ("dcpsg" "decomposing" nil 4)
    ("dcpss" "decomposes" nil 2)
    ("dct" "document" nil 301)
    ("dctd" "documented" nil 17)
    ("dctg" "documenting" nil 2)
    ("dctn" "documentation" nil 140)
    ("dcts" "documents" nil 23)
    ("dcty" "discontinuity" nil 3)
    ("dctys" "discontinuities" nil 1)
    ("dcv" "declarative" nil 111)
    ("dcvy" "declaratively" nil 10)
    ("ddc" "deduce" nil 33)
    ("ddcd" "deduced" nil 0)
    ("ddcg" "deducing" nil 2)
    ("ddcs" "deduces" nil 0)
    ("ddn" "deduction" nil 35)
    ("ddns" "deductions" nil 10)
    ("ddv" "deductive" nil 9)
    ("de'd" "demand-driven" nil 18)
    ("depty" "depth" nil 4)
    ("df" "define" nil 1572)
    ("df'" "df" nil 25)
    ("dfbl" "differentiable" nil 150)
    ("dfby" "differentiability" nil 12)
    ("dfc" "difference" nil 299)
    ("dfcg" "differencing" nil 2)
    ("dfcs" "differences" nil 66)
    ("dfd" "defined" nil 936)
    ("dfg" "defining" nil 263)
    ("dfl" "differential" nil 54)
    ("dfls" "differentials" nil 0)
    ("dfly" "differentially" nil 0)
    ("dfn" "definition" nil 1933)
    ("dfnl" "definitional" nil 6)
    ("dfns" "definitions" nil 837)
    ("dfrn" "differentiation" nil 225)
    ("dfrns" "differentiations" nil 2)
    ("dfrt" "differentiate" nil 34)
    ("dfrtd" "differentiated" nil 9)
    ("dfrts" "differentiates" nil 1)
    ("dfs" "defines" nil 88)
    ("dft" "different" nil 1128)
    ("dftg" "differentiating" nil 12)
    ("dfty" "differently" nil 105)
    ("dgt" "disagreement" nil 1)
    ("di'p" "disagreement pair" nil 172)
    ("di'ps" "disagreement pairs" nil 168)
    ("di'sq" "disagreement sequence" nil 8)
    ("di'sqs" "disagreement sequences" nil 0)
    ("didnt" "didn't" nil 25)
    ("djn" "disjunction" nil 33)
    ("djns" "disjunctions" nil 9)
    ("djv" "disjunctive" nil 6)
    ("djvy" "disjunctively" nil 0)
    ("dlt" "difficult" nil 26)
    ("dlty" "difficulty" nil 20)
    ("dltys" "difficulties" nil 4)
    ("dm't" "domain theory" nil 3)
    ("dm'tc" "domain theoretic" nil 3)
    ("dmn" "domain" nil 279)
    ("dmns" "domains" nil 70)
    ("dn" "denotation" nil 11)
    ("dnl" "denotational" nil 199)
    ("dnly" "denotationally" nil 21)
    ("dnn" "denotation" nil 101)
    ("dnn'" "dnn" nil 5)
    ("dnns" "denotations" nil 23)
    ("dns" "denotations" nil 0)
    ("dnv" "denotative" nil 52)
    ("dnvy" "denotatively" nil 1)
    ("doesnt" "doesn't" nil 62)
    ("dont" "don't" nil 332)
    ("dpc" "dependence" nil 27)
    ("dpcn" "decomposition" nil 1)
    ("dpd" "depend" nil 144)
    ("dpdd" "depended" nil 6)
    ("dpdg" "depending" nil 90)
    ("dpds" "depends" nil 156)
    ("dpt" "dependent" nil 330)
    ("dpts" "dependents" nil 0)
    ("dpty" "dependently" nil 4)
    ("dpv" "disprove" nil 1)
    ("dpy" "dependency" nil 115)
    ("dpys" "dependencies" nil 115)
    ("drfc" "dereference" nil 0)
    ("dscn" "description" nil 300)
    ("dscns" "descriptions" nil 91)
    ("dscrn" "description" nil 1)
    ("dscv" "descriptive" nil 13)
    ("dstn" "destruction" nil 3)
    ("dstr" "destructor" nil 1)
    ("dstrs" "destructors" nil 0)
    ("dsv" "destructive" nil 29)
    ("dsvy" "destructively" nil 44)
    ("dtc" "deterministic" nil 69)
    ("dtcy" "deterministically" nil 3)
    ("dtm" "determinism" nil 11)
    ("dtt" "determinate" nil 3)
    ("dtv" "derivative" nil 620)
    ("dtvs" "derivatives" nil 433)
    ("dv" "derive" nil 143)
    ("dv'" "dv" nil 17)
    ("dvbl" "derivable" nil 1)
    ("dvd" "derived" nil 139)
    ("dvg" "deriving" nil 246)
    ("dvn" "derivation" nil 347)
    ("dvnl" "derivational" nil 7)
    ("dvns" "derivations" nil 78)
    ("dvp" "develop" nil 80)
    ("dvpd" "developed" nil 82)
    ("dvpg" "developing" nil 71)
    ("dvpr" "developer" nil 5)
    ("dvprs" "developers" nil 9)
    ("dvps" "develops" nil 13)
    ("dvs" "derives" nil 14)
    ("dvt" "development" nil 266)
    ("dvtl" "developmental" nil 0)
    ("dvts" "developments" nil 14)
    ("e'b'g" "explanation based generalization" nil 2)
    ("e'e" "eta expand" nil 19)
    ("e'ed" "eta expanded" nil 1)
    ("e'en" "eta expansion" nil 12)
    ("e'ens" "eta expansions" nil 1)
    ("e'es" "eta expands" nil 1)
    ("e'l'f" "Edinburgh Logical Framework" nil 17)
    ("e'o" "each other" nil 0)
    ("e'p" "expression procedure" nil 4)
    ("e'pmc" "explicitly polymorphic" nil 0)
    ("e'pmm" "explicit polymorphism" nil 5)
    ("e'ps" "expression procedures" nil 3)
    ("e's's" "ERGO Suport System" nil 11)
    ("e'u" "equational unification" nil 3)
    ("eft" "efficient" nil 629)
    ("efty" "efficiently" nil 157)
    ("efy" "efficiency" nil 275)
    ("eg" "e.g.," nil 1133)
    ("elmn" "elimination" nil 5)
    ("emt" "element" nil 235)
    ("emts" "elements" nil 251)
    ("eplg" "extrapolating" nil 0)
    ("epln" "extrapolation" nil 11)
    ("eplt" "extrapolate" nil 1)
    ("eqc" "equivalence" nil 64)
    ("eqcs" "equivalences" nil 5)
    ("eqn" "equation" nil 111)
    ("eqnl" "equational" nil 73)
    ("eqnly" "equationally" nil 2)
    ("eqns" "equations" nil 128)
    ("eqty" "equality" nil 63)
    ("eqtys" "equalities" nil 0)
    ("equiv'" "≡" nil 17)
    ("eqvt" "equivalent" nil 130)
    ("eqvts" "equivalents" nil 0)
    ("eqvty" "equivalently" nil 7)
    ("evetn" "event" nil 4)
    ("evetns" "events" nil 9)
    ("evt" "environment" nil 395)
    ("evtl" "environmental" nil 2)
    ("evts" "environments" nil 71)
    ("excersize" "exercise" nil 2)
    ("exists'" "∃" nil 1)
    ("f'a" "functional animation" nil 6)
    ("f'b" "frame buffer" nil 2)
    ("f'c" "first-class" nil 9)
    ("f'cb" "functor combinator" nil 1)
    ("f'cbs" "functor combinators" nil 0)
    ("f'ctn" "failure continutation" nil 5)
    ("f'ctns" "failure continutations" nil 0)
    ("f'e" "for example" nil 125)
    ("f'f'i" "foreign function interface" nil 10)
    ("f'i" "for instance" nil 1172)
    ("f'l" "formal language" nil 6)
    ("f'o" "first-order" nil 42)
    ("f'o'l" "first-order logic" nil 8)
    ("f'o'm" "first-order matching" nil 1)
    ("f'o'r" "first-order resolution" nil 3)
    ("f'o'u" "first-order unification" nil 33)
    ("f'o'v" "field of view" nil 1)
    ("f'occ" "free-occurrence" nil 2)
    ("f'occs" "free-occurrences" nil 1)
    ("f'os" "function objects" nil 5)
    ("f'p" "functional programming" nil 218)
    ("f'p'i" "fixed point induction" nil 13)
    ("f'r" "functional reactive" nil 0)
    ("f'r'a" "functional reactive animation" nil 1)
    ("f'r'p" "functional reactive programming" nil 23)
    ("f's" "formal system" nil 10)
    ("f's'm" "finite state machine" nil 2)
    ("f's'ms" "finite state machines" nil 0)
    ("f'ss" "function symbols" nil 5)
    ("f't" "future time" nil 1)
    ("f't'v" "free type variable" nil 2)
    ("f't'vs" "free type variables" nil 7)
    ("f'v" "free variable" nil 36)
    ("f'v's" "free vector space" nil 12)
    ("f'v'ss" "free vector spaces" nil 2)
    ("f'vs" "free variables" nil 142)
    ("f'x" "for example" nil 4)
    ("fbl" "flexible" nil 77)
    ("fbly" "flexibly" nil 4)
    ("fbty" "flexibility" nil 38)
    ("fby" "flexibility" nil 36)
    ("fdl" "fundamental" nil 136)
    ("fdls" "fundamentals" nil 0)
    ("fdly" "fundamentally" nil 40)
    ("fdn" "foundation" nil 92)
    ("fdnl" "foundational" nil 8)
    ("fdns" "foundations" nil 26)
    ("ffl" "flex-flex" nil 0)
    ("flase" "False" nil 1)
    ("fld" "followed" nil 70)
    ("flfl" "flexible-flexible" nil 166)
    ("flg" "following" nil 319)
    ("flrd" "flexible-rigid" nil 153)
    ("fls" "follows" nil 81)
    ("fltp" "flexible-type" nil 2)
    ("fm" "from" nil 7928)
    ("fma" "formula" nil 118)
    ("fmas" "formulas" nil 77)
    ("fml" "formal" nil 135)
    ("fmly" "formally" nil 32)
    ("fmn" "formulation" nil 293)
    ("fmns" "formulations" nil 54)
    ("fmt" "formulate" nil 100)
    ("fmtd" "formulated" nil 23)
    ("fmtg" "formulating" nil 19)
    ("fmts" "formulates" nil 6)
    ("fmy" "family" nil 221)
    ("fmys" "families" nil 70)
    ("fn" "function" nil 4479)
    ("fnl" "functional" nil 1144)
    ("fnls" "functionals" nil 17)
    ("fnly" "functionally" nil 36)
    ("fns" "functions" nil 2928)
    ("fnty" "functionality" nil 136)
    ("fo" "of" nil 444)
    ("forall'" "∀" nil 8)
    ("fqt" "frequent" nil 17)
    ("fqty" "frequently" nil 19)
    ("fqy" "frequency" nil 28)
    ("fqys" "frequencies" nil 4)
    ("frechet" "Fréchet" nil 5)
    ("frnak" "frank" nil 3)
    ("fsm" "formalism" nil 20)
    ("fsm'" "fsm" nil 5)
    ("fsms" "formalisms " nil 1)
    ("ft" "first" nil 3288)
    ("fu'v" "future value" nil 2)
    ("fu'vs" "future values" nil 15)
    ("fx'p" "fixed point" nil 13)
    ("fx'ps" "fixed points" nil 12)
    ("fz" "formalize" nil 41)
    ("fzd" "formalized" nil 8)
    ("fzg" "formalizing" nil 15)
    ("fzl" "formalizable" nil 0)
    ("fzn" "formalization" nil 18)
    ("fzns" "formalizations" nil 1)
    ("fzs" "formalizes" nil 4)
    ("g''o" "geometric-object" nil 3)
    ("g''os" "geometric-objects" nil 0)
    ("g'a'f" "graphics application framework" nil 7)
    ("g'c" "garbage collection" nil 69)
    ("g'cd" "garbage-collected" nil 2)
    ("g'cr" "garbage collector" nil 2)
    ("g'd" "geometry-dependent" nil 5)
    ("g'dc" "geometry-dependence" nil 0)
    ("g'e" "geometry expression" nil 9)
    ("g'es" "geometry expressions" nil 3)
    ("g'f" "generic function" nil 2)
    ("g'l" "geometry language" nil 27)
    ("g'o" "geometric object" nil 56)
    ("g'os" "geometric objects" nil 29)
    ("g'p" "general purpose" nil 21)
    ("g'pv" "geometric primitive" nil 0)
    ("g'pvs" "geometric primitives" nil 7)
    ("g'u'i" "graphical user interface" nil 0)
    ("g'u'is" "graphical user interfaces" nil 1)
    ("gd" "gd" nil 38)
    ("gl" "general" nil 1351)
    ("glb'" "⊓" nil 4)
    ("glty" "generality" nil 80)
    ("gltys" "generalities" nil 0)
    ("gly" "generally" nil 325)
    ("gmc" "geometric" nil 173)
    ("gmcy" "geometrically" nil 3)
    ("gmr" "grammar" nil 71)
    ("gmrs" "grammars" nil 14)
    ("gmy" "geometry" nil 1469)
    ("gmys" "geometries" nil 13)
    ("gn" "generation" nil 242)
    ("gnc" "generic" nil 67)
    ("gncs" "generics" nil 0)
    ("gncy" "generically" nil 1)
    ("gns" "generations" nil 4)
    ("gnt" "generate" nil 4)
    ("gnts" "generates" nil 0)
    ("goign" "going" nil 28)
    ("gp" "group" nil 510)
    ("gpd" "grouping" nil 0)
    ("gpg" "grouping" nil 0)
    ("gps" "groups" nil 66)
    ("grahpics" "graphics" nil 7)
    ("gt" "generate" nil 286)
    ("gtd" "generated" nil 328)
    ("gtg" "generating" nil 85)
    ("gtr" "generator" nil 78)
    ("gtrs" "generators" nil 31)
    ("gts" "generates" nil 124)
    ("gz" "generalize" nil 491)
    ("gzd" "generalized" nil 370)
    ("gzg" "generalizing" nil 134)
    ("gzn" "generalization" nil 182)
    ("gzns" "generalizations" nil 37)
    ("gzs" "generalizes" nil 92)
    ("h'e" "hyper-edge" nil 1)
    ("h'es" "hyper-edges" nil 0)
    ("h'g" "hyper-graph" nil 2)
    ("h'gs" "hyper-graphs" nil 0)
    ("h'l" "high-level" nil 118)
    ("h'n" "head normal" nil 2)
    ("h'n'f" "head normal form" nil 38)
    ("h'n'fs" "head normal forms" nil 2)
    ("h'o" "higher-order" nil 400)
    ("h'o'a's" "higher-order abstract syntax" nil 5)
    ("h'o'f" "higher-order function" nil 14)
    ("h'o'fs" "higher-order functions" nil 27)
    ("h'o'h'h" "higher-order hereditary Harrop" nil 2)
    ("h'o'l" "higher-order logic" nil 56)
    ("h'o'm" "higher-order matching" nil 19)
    ("h'o'r" "higher-order resolution" nil 4)
    ("h'o't" "higher-order type" nil 1)
    ("h'o'ts" "higher-order types" nil 9)
    ("h'o'u" "higher-order unification" nil 194)
    ("h's'r" "hidden surface removal" nil 4)
    ("h'ss" "half spaces" nil 0)
    ("hadnt" "hadn't" nil 6)
    ("hasnt" "hasn't" nil 3)
    ("havent" "haven't" nil 14)
    ("hcl" "hierarchical" nil 41)
    ("hcly" "hierarchically" nil 5)
    ("hcy" "hierarchy" nil 47)
    ("hcys" "hierarchies" nil 4)
    ("hmc" "homomorphic" nil 77)
    ("hmcy" "homomorphically" nil 15)
    ("hmm" "homomorphism" nil 274)
    ("hmms" "homomorphisms" nil 101)
    ("hr'd" "higher dimensional" nil 0)
    ("hr'l" "higher level" nil 42)
    ("hte" "the" nil 61)
    ("hvae" "have" nil 31)
    ("hvr" "however" nil 1399)
    ("hwo" "how" nil 8)
    ("hymc" "hylomorphic" nil 7)
    ("hymm" "hylomorphism" nil 6)
    ("hymms" "hylomorphisms" nil 7)
    ("hzl" "horizontal" nil 28)
    ("hzly" "horizontally" nil 9)
    ("i'a" "in addition" nil 35)
    ("i'a't" "in addition to" nil 144)
    ("i'as" "inherited attributes" nil 2)
    ("i'b" "interactive behavior" nil 3)
    ("i'bs" "interactive behaviors" nil 1)
    ("i'c" "in contrast" nil 92)
    ("i'c'o" "in case of" nil 2)
    ("i'f" "in fact" nil 135)
    ("i'f'f" "if and only if" nil 5)
    ("i'f'o" "in favor of" nil 80)
    ("i'fe" "indirection-free" nil 2)
    ("i'g" "in general" nil 244)
    ("i'h" "induction hypothesis" nil 8)
    ("i'm'e" "in my experience" nil 2)
    ("i'm'o" "in my opinion" nil 12)
    ("i'o" "in order" nil 21)
    ("i'o'f" "in order for" nil 1)
    ("i'o't" "in order to" nil 332)
    ("i'o'w" "in other words" nil 134)
    ("i'p" "in particular" nil 463)
    ("i'pmc" "implicitly polymorphic" nil 3)
    ("i'pmm" "implicit polymorphism" nil 30)
    ("i'r" "inference rule" nil 21)
    ("i'r't" "in response to" nil 1)
    ("i'rs" "inference rules" nil 38)
    ("i's" "inference system" nil 8)
    ("i's'o" "in spite of" nil 39)
    ("i'ss" "inference systems" nil 0)
    ("i't" "in that" nil 17)
    ("i't'o" "in terms of" nil 324)
    ("i'v" "improving value" nil 28)
    ("i'vb" "instance variable" nil 18)
    ("i'vbs" "instance variables" nil 40)
    ("i'vs" "improving values" nil 23)
    ("i'w" "in which" nil 462)
    ("i'w'c" "in which case" nil 57)
    ("ibvr" "i-behavior" nil 3)
    ("ibvrs" "i-behaviors" nil 1)
    ("icl" "incremental" nil 129)
    ("icly" "incrementally" nil 25)
    ("icv" "inclusive" nil 1)
    ("icvc" "inconvenience" nil 1)
    ("icvnt" "inconvenient" nil 6)
    ("idc" "introduce" nil 310)
    ("idcd" "introduced" nil 120)
    ("idcg" "introducing" nil 141)
    ("idcs" "introduces" nil 58)
    ("idfn" "identification" nil 1)
    ("idn" "introduction" nil 211)
    ("idns" "introductions" nil 11)
    ("idpc" "independence" nil 22)
    ("idpt" "independent" nil 209)
    ("idpty" "independently" nil 70)
    ("idtt" "indeterminate" nil 5)
    ("idv" "inductive" nil 10)
    ("idvy" "inductively" nil 6)
    ("idx" "index" nil 50)
    ("idxd" "indexed" nil 7)
    ("idxg" "indexing" nil 3)
    ("idxs" "indices" nil 1)
    ("ie" "i.e.," nil 1352)
    ("ieft" "inefficient" nil 59)
    ("iefty" "inefficiently" nil 2)
    ("iefy" "inefficiency" nil 27)
    ("iefys" "inefficiencies" nil 4)
    ("ieqty" "inequality" nil 3)
    ("ieqtys" "inequalities" nil 3)
    ("ifbl" "inflexible" nil 3)
    ("ifc" "inference" nil 154)
    ("ifcs" "inferences" nil 5)
    ("ifl" "informal" nil 71)
    ("ifly" "informally" nil 16)
    ("ifm" "inform" nil 23)
    ("ifml" "informal" nil 17)
    ("ifmly" "informally" nil 16)
    ("ifmy" "informally" nil 10)
    ("ifn" "information" nil 416)
    ("ifqt" "infrequent" nil 2)
    ("ifqty" "infrequently" nil 0)
    ("ift" "infinite" nil 462)
    ("ifty" "infinitely" nil 75)
    ("igl" "integral" nil 101)
    ("igls" "integrals" nil 10)
    ("ign" "integration" nil 170)
    ("igns" "integrations" nil 1)
    ("igt" "integrate" nil 33)
    ("igtd" "integrated" nil 13)
    ("igtg" "integrating" nil 5)
    ("igtr" "integrator" nil 1)
    ("igts" "integrates" nil 1)
    ("ijn" "injection" nil 11)
    ("ijns" "injections" nil 8)
    ("ijv" "injective" nil 55)
    ("ijvy" "injectivity" nil 20)
    ("imc" "isomorphic" nil 137)
    ("imc'" "≅" nil 9)
    ("imcy" "isomorphically" nil 11)
    ("imm" "isomorphism" nil 216)
    ("imms" "isomorphisms" nil 156)
    ("implies'" "⟹" nil 2)
    ("incst" "inconsistent" nil 1)
    ("intn" "interaction" nil 175)
    ("intns" "interactions" nil 17)
    ("intv" "interactive" nil 243)
    ("iot" "in order to" nil 12)
    ("iow" "in other words" nil 76)
    ("ipbl" "impossible" nil 86)
    ("ipcn" "implication" nil 72)
    ("ipcns" "implications" nil 41)
    ("ipd" "implemented" nil 299)
    ("ipg" "implementing" nil 127)
    ("iplg" "interpolating" nil 6)
    ("ipln" "interpolation" nil 74)
    ("iplns" "interpolations" nil 1)
    ("iplt" "interpolate" nil 20)
    ("ipltd" "interpolated" nil 5)
    ("iplts" "interpolates" nil 1)
    ("ipn" "implementation" nil 1880)
    ("ipns" "implementations" nil 258)
    ("ipr" "implementer" nil 6)
    ("iprc" "importance" nil 55)
    ("iprs" "implementers" nil 6)
    ("iprt" "important" nil 685)
    ("iprty" "importantly" nil 27)
    ("ipt" "implement" nil 545)
    ("iptd" "implemented" nil 44)
    ("iptg" "implementing" nil 9)
    ("iptl" "implementable" nil 4)
    ("iptr" "implementer" nil 21)
    ("iptrs" "implementers" nil 6)
    ("ipts" "implements" nil 48)
    ("iptv" "imperative" nil 389)
    ("iptvy" "imperatively" nil 11)
    ("ipv" "improve" nil 200)
    ("ipvd" "improved" nil 127)
    ("ipvg" "improving" nil 113)
    ("ipvs" "improves" nil 10)
    ("ipvt" "improvement" nil 75)
    ("ipvts" "improvements" nil 111)
    ("irl" "internal" nil 89)
    ("irls" "internals" nil 9)
    ("irly" "internally" nil 21)
    ("irz" "internalize" nil 3)
    ("irzd" "internalized" nil 1)
    ("isft" "insufficient" nil 4)
    ("isfty" "insufficiently" nil 4)
    ("isl" "intensional" nil 9)
    ("isn" "intersection" nil 35)
    ("isns" "intersections" nil 3)
    ("isnt" "isn't" nil 31)
    ("isrn" "instruction" nil 28)
    ("isrns" "instructions" nil 36)
    ("ist" "instantiate" nil 126)
    ("istd" "instantiated" nil 154)
    ("istg" "instantiating" nil 48)
    ("istn" "instantiation" nil 11)
    ("istns" "instantiations" nil 6)
    ("istr'" "I see to recall" nil 3)
    ("ists" "instantiates" nil 19)
    ("itc" "intutitionistic" nil 10)
    ("itcy" "intutitionistically" nil 0)
    ("itd" "interested" nil 362)
    ("itds" "ill-typedness" nil 29)
    ("itfc" "interface" nil 865)
    ("itfcd" "interfaced" nil 2)
    ("itfcg" "interfacing" nil 13)
    ("itfcs" "interfaces" nil 203)
    ("itg" "interesting" nil 473)
    ("itgy" "interestingly" nil 38)
    ("itm" "imitation" nil 55)
    ("itme" "item" nil 6)
    ("itms" "imitations" nil 40)
    ("itn" "itn" nil 23)
    ("itnc" "intuitionistic" nil 1)
    ("itns" "interactions" nil 14)
    ("ito'" "in terms of" nil 0)
    ("itp" "interpret" nil 65)
    ("itpd" "interpreted" nil 20)
    ("itpg" "interpreting" nil 51)
    ("itpn" "interpretation" nil 302)
    ("itpns" "interpretations" nil 102)
    ("itpr" "interpreter" nil 43)
    ("itprs" "interpreters" nil 3)
    ("itps" "interprets" nil 3)
    ("itt" "iterate" nil 7)
    ("ittd" "iterated" nil 1)
    ("ittn" "iteration" nil 18)
    ("ittns" "iterations" nil 4)
    ("ittv" "iterative" nil 22)
    ("ittvy" "iteratively" nil 4)
    ("itv" "interactive" nil 10)
    ("itvty" "interactivity" nil 8)
    ("itvy" "interactively" nil 29)
    ("itz" "internalize" nil 0)
    ("itzd" "internalized" nil 0)
    ("itzg" "internalizing" nil 1)
    ("itzn" "internalization" nil 2)
    ("itzs" "internalizes" nil 0)
    ("iv'a" "interval analysis" nil 34)
    ("ivbl" "invertible" nil 46)
    ("ivby" "invertibility" nil 2)
    ("ivc" "invariance" nil 2)
    ("ive" "I've" nil 28)
    ("ivl" "interval" nil 367)
    ("ivln" "involution" nil 4)
    ("ivlns" "involutions" nil 0)
    ("ivls" "intervals" nil 184)
    ("ivn" "inversion" nil 59)
    ("ivns" "inversions" nil 5)
    ("ivt" "invariant" nil 123)
    ("ivts" "invariants" nil 13)
    ("ix" "index" nil 181)
    ("ixd" "indexed" nil 96)
    ("ixg" "indexing" nil 16)
    ("ixs" "indices" nil 8)
    ("iz" "initialize" nil 28)
    ("izd" "initialized" nil 15)
    ("izg" "initializing" nil 6)
    ("izn" "initialization" nil 40)
    ("izns" "initializations" nil 4)
    ("izr" "initializer" nil 0)
    ("izrs" "initializers" nil 0)
    ("izs" "initializes" nil 0)
    ("j'r" "John Reynolds" nil 45)
    ("jfd" "justified" nil 11)
    ("jfg" "justifying" nil 9)
    ("jfn" "justification" nil 54)
    ("jfns" "justifications" nil 0)
    ("jfy" "justify" nil 42)
    ("jfyd" "justified" nil 8)
    ("jfyg" "justifying" nil 5)
    ("jfys" "justifies" nil 8)
    ("jsut" "just" nil 25)
    ("jt" "judgment" nil 38)
    ("jtl" "judgmental" nil 9)
    ("jts" "judgments" nil 7)
    ("jxn" "juxtaposition" nil 5)
    ("knwo" "know" nil 1)
    ("konw" "know" nil 17)
    ("l'a" "linear algebra" nil 38)
    ("l'c" "lambda calculus" nil 41)
    ("l'cs" "lambda-calculi" nil 4)
    ("l'cvby" "lambda convertability" nil 2)
    ("l'd't" "algebraic data type" nil 16)
    ("l'd'ts" "algebraic data types" nil 16)
    ("l'e" "lambda expression" nil 11)
    ("l'es" "lambda expressions" nil 15)
    ("l'f" "Logical Framework" nil 4)
    ("l'f'p" "least fixed point" nil 14)
    ("l'f'ps" "least fixed points" nil 7)
    ("l'h'n'f" "long head normal form" nil 6)
    ("l'h's" "left-hand side" nil 16)
    ("l'h'ss" "left-hand sides" nil 19)
    ("l'l" "low-level" nil 51)
    ("l'ls" "lazy lists" nil 1)
    ("l'm" "linear map" nil 88)
    ("l'm't" "local modeling transform" nil 1)
    ("l'm'ts" "local modeling transforms" nil 1)
    ("l'ms" "linear maps" nil 195)
    ("l'n'f" "long normal form" nil 12)
    ("l'o'i" "level of indirection" nil 1)
    ("l'p" "logic programming" nil 59)
    ("l'p'l" "logic programming language" nil 0)
    ("l's'b" "least significant bit" nil 1)
    ("l'u'b" "least upper bound" nil 6)
    ("l'u'bs" "least upper bounds" nil 0)
    ("l'v" "logical variable" nil 1)
    ("l'x" "linear transformation" nil 12)
    ("l'xs" "linear transformations" nil 34)
    ("ladn" "land" nil 2)
    ("lambda'" "λ" nil 5)
    ("lbenf" "long beta-eta normal form" nil 2)
    ("lbepnf" "long beta-eta product normal form" nil 3)
    ("lc" "logic" nil 261)
    ("lcl" "logical" nil 167)
    ("lcly" "logically" nil 16)
    ("lcn" "location" nil 135)
    ("lcns" "locations" nil 78)
    ("lcs" "logics" nil 45)
    ("lcy" "logically" nil 2)
    ("leqi'" "⊑" nil 13)
    ("lg" "language" nil 1850)
    ("lga" "algebra" nil 124)
    ("lgas" "algebras" nil 5)
    ("lgc" "algebraic" nil 142)
    ("lgcy" "algebraically" nil 2)
    ("lgs" "languages" nil 518)
    ("li'c" "linear combination" nil 2)
    ("li'cs" "linear combinations" nil 0)
    ("liek" "like" nil 18)
    ("llambda'" "Λ" nil 3)
    ("loh" "Löh" nil 1)
    ("lpg" "Lambda-Prolog" nil 131)
    ("lppg" "Lambda'pi-Prolog" nil 3)
    ("lr'l" "lower level" nil 13)
    ("lsit" "list" nil 4)
    ("ltods" "ldots" nil 6)
    ("ltt" "alternate" nil 2)
    ("ltv" "alternative" nil 517)
    ("ltvs" "alternatives" nil 200)
    ("ltvy" "alternatively" nil 324)
    ("lub'" "⊔" nil 24)
    ("m'c" "modeling coordinate" nil 3)
    ("m'c's'p" "minimal complete set of pre-unifiers" nil 9)
    ("m'c's'ps" "minimal complete sets of pre-unifiers" nil 8)
    ("m'c's'u" "minimal complete set of unifiers" nil 19)
    ("m'c's'us" "minimal complete sets of unifiers" nil 0)
    ("m'cs" "model coordinates" nil 1)
    ("m'd'p" "Markov decision process" nil 3)
    ("m'd'ps" "Markov decision processes" nil 5)
    ("m'eqn" "multiequation" nil 5)
    ("m'eqns" "multiequations" nil 4)
    ("m'g'u" "most general unifier" nil 12)
    ("m'i" "multiple inheritance" nil 8)
    ("m'l" "meta-language" nil 79)
    ("m'ls" "meta-languages" nil 6)
    ("m'm" "multimedia" nil 15)
    ("m's'b" "most significant bit" nil 0)
    ("m't" "multi-threaded" nil 2)
    ("m'x" "modeling transform" nil 29)
    ("m'xs" "modeling transforms" nil 12)
    ("ma'l" "machine learning" nil 140)
    ("mabye" "maybe" nil 22)
    ("mch" "match" nil 88)
    ("mchd" "matched" nil 5)
    ("mchg" "matching" nil 173)
    ("mchr" "matcher" nil 5)
    ("mchs" "matches" nil 29)
    ("mcn" "mechanism" nil 58)
    ("mcns" "mechanisms" nil 28)
    ("mfd" "modified" nil 6)
    ("mfn" "modification" nil 54)
    ("mfns" "modifications" nil 23)
    ("mfo" "MediaFlow" nil 34)
    ("mfy" "modify" nil 65)
    ("mfyd" "modified" nil 159)
    ("mfyg" "modifying" nil 29)
    ("mfyl" "modifiable" nil 13)
    ("mfyr" "modifier" nil 4)
    ("mfyrs" "modifiers" nil 0)
    ("mfys" "modifies" nil 9)
    ("mgmt" "management" nil 52)
    ("mgr" "manager" nil 4)
    ("mgt" "management" nil 1)
    ("mlc" "meta-logic" nil 16)
    ("mlcl" "meta-logical" nil 1)
    ("mlpn" "multiplication" nil 6)
    ("mmz" "memoize" nil 42)
    ("mmzd" "memoized" nil 21)
    ("mmzg" "memoizing" nil 16)
    ("mmzn" "memoization" nil 115)
    ("mmzs" "memoizes" nil 0)
    ("mna" "minima" nil 0)
    ("mng" "meaning" nil 406)
    ("mngs" "meanings" nil 108)
    ("mnm" "minimum" nil 1)
    ("mpc" "monomorphic" nil 58)
    ("mpln" "multiplication" nil 102)
    ("mpm" "monomorphism" nil 14)
    ("mpv" "multiplicative" nil 4)
    ("mpy" "multiply" nil 6)
    ("mpyd" "multiplied" nil 1)
    ("mpyg" "multiplying" nil 1)
    ("mpys" "multiplies " nil 2)
    ("mpz" "monomorphize" nil 6)
    ("mpzd" "monomorphized" nil 2)
    ("mpzg" "monomorphizing" nil 1)
    ("mpzn" "monomorphization" nil 14)
    ("mroe" "more" nil 57)
    ("mtc" "monotonic" nil 93)
    ("mtcly" "monotonically" nil 18)
    ("mtcy" "monotonicity" nil 90)
    ("mtd" "method" nil 785)
    ("mtds" "methods" nil 456)
    ("mtdy" "methodology" nil 66)
    ("mtdys" "methodologies" nil 9)
    ("mtg" "meeting" nil 469)
    ("mtgs" "meetings" nil 43)
    ("mtn" "maintain" nil 1)
    ("mustnt" "mustn't" nil 2)
    ("mvbl" "meta-variable" nil 8)
    ("mvbls" "meta-variables" nil 5)
    ("mvl" "motivational" nil 6)
    ("mvn" "motivation" nil 136)
    ("mvnl" "motivational" nil 0)
    ("mvns" "motivations" nil 12)
    ("mvr" "moreover" nil 279)
    ("mvt" "motivate" nil 57)
    ("mvtd" "motivated" nil 91)
    ("mvtg" "motivating" nil 31)
    ("mvts" "motivates" nil 21)
    ("mxa" "maxima" nil 4)
    ("mxm" "maximum" nil 60)
    ("mxz" "maximize" nil 17)
    ("mxzd" "maximized" nil 0)
    ("mxzn" "maximization" nil 0)
    ("mxzs" "maximizes" nil 1)
    ("mz" "minimize" nil 54)
    ("mzd" "minimized" nil 7)
    ("mzg" "minimizing" nil 7)
    ("mzn" "minimization" nil 21)
    ("mzs" "minimizes" nil 7)
    ("n'a's'c" "necessary and sufficient condition" nil 4)
    ("n'c" "necessary condition" nil 5)
    ("n'cs" "necessary conditions" nil 0)
    ("n'd" "natural deduction" nil 10)
    ("n'f" "normal form" nil 140)
    ("n'fs" "normal forms" nil 62)
    ("n'n" "natural number" nil 2)
    ("n'ns" "natural numbers" nil 10)
    ("n's" "non-strict" nil 8)
    ("n'x" "natural transformation" nil 9)
    ("n'xs" "natural transformations" nil 2)
    ("naive'" "naïve" nil 15)
    ("naively'" "naïvely" nil 4)
    ("naivite" "naïvité" nil 1)
    ("nbd" "neighborhood" nil 7)
    ("nbds" "neighborhoods" nil 2)
    ("nbr" "neighbor" nil 2)
    ("nbrs" "neighbors" nil 1)
    ("ncly" "necessarily" nil 103)
    ("ncpnl" "noncomputational" nil 0)
    ("ncts" "noncontinuous" nil 1)
    ("ncvby" "nonconvertability" nil 1)
    ("ncy" "necessary" nil 274)
    ("ndc" "nondeterministic" nil 35)
    ("ndcy" "nondeterministically" nil 7)
    ("ndm" "nondeterminism" nil 25)
    ("ndsv" "non-destructive" nil 0)
    ("ndtc" "nondeterministic" nil 50)
    ("ndtm" "nondeterminism" nil 28)
    ("ne'n" "neural network" nil 2)
    ("neednt" "needn't" nil 13)
    ("nfn" "notification" nil 2)
    ("nfnl" "non-functional" nil 0)
    ("nfns" "notifications" nil 1)
    ("ngv" "negative" nil 2)
    ("nintv" "non-interactive" nil 4)
    ("nitv" "non-interactive" nil 20)
    ("nkow" "know" nil 4)
    ("nleqi'" "⋢" nil 1)
    ("nmtc" "nonmonotonic" nil 3)
    ("noteq'" "≠" nil 3)
    ("nstd" "nonstandard" nil 5)
    ("ntl" "natural" nil 387)
    ("ntls" "naturalness" nil 11)
    ("ntly" "naturally" nil 128)
    ("ntmn" "non-termination" nil 9)
    ("ntmtg" "nonterminating" nil 0)
    ("ntn" "notation" nil 256)
    ("ntnl" "notational" nil 28)
    ("ntns" "notations" nil 11)
    ("ntny" "notationally" nil 4)
    ("nufby" "nonunifiablity" nil 14)
    ("nufl" "nonunifiable" nil 19)
    ("nufm" "nonuniform" nil 2)
    ("nv'c" "Nonviolent Communication" nil 4)
    ("nz" "normalize" nil 104)
    ("nzd" "normalized" nil 33)
    ("nzg" "normalizing" nil 28)
    ("nzl" "normalizable" nil 4)
    ("nzn" "normalization" nil 113)
    ("nzns" "normalizations" nil 1)
    ("nzs" "normalizes" nil 2)
    ("nzy" "normalizability" nil 26)
    ("o'c" "of course" nil 228)
    ("o'd'e" "ordinary differential equation" nil 1)
    ("o'd'es" "ordinary differential equations" nil 4)
    ("o'f" "objective function" nil 0)
    ("o'fs" "objective functions" nil 0)
    ("o'l" "object language" nil 105)
    ("o'lc" "object logic" nil 1)
    ("o'lcs" "object logics" nil 1)
    ("o'ls" "object languages" nil 16)
    ("o'm" "object model" nil 3)
    ("o'ms" "object models" nil 0)
    ("o'o" "object-oriented" nil 68)
    ("o'o'p" "object-oriented programming" nil 0)
    ("o'on" "object-orientation" nil 5)
    ("o'p'l'c" "omega-order polymorphic lambda-calculus" nil 1)
    ("o's" "object system" nil 35)
    ("o's't" "on second thought" nil 8)
    ("o'sm" "operational semantics" nil 2)
    ("o'ss" "object systems" nil 2)
    ("o't" "overloading tool" nil 0)
    ("o't'f" "of the form" nil 91)
    ("o'tp" "object type" nil 17)
    ("o'tps" "object types" nil 10)
    ("o'u't" "once upon a time" nil 1)
    ("o'w" "of which" nil 9)
    ("ocn" "occurrence" nil 220)
    ("ocns" "occurrences" nil 184)
    ("ocsn" "occlusion" nil 13)
    ("ofr" "for" nil 25)
    ("ojn" "objection" nil 29)
    ("ojns" "objections" nil 21)
    ("ojt" "object" nil 793)
    ("ojtd" "objected" nil 3)
    ("ojts" "objects" nil 562)
    ("ojv" "objective" nil 41)
    ("ojvs" "objectives" nil 9)
    ("ojvy" "objectively" nil 9)
    ("olc" "object-logic" nil 7)
    ("olcs" "object-logics" nil 3)
    ("olg" "object-language" nil 62)
    ("olgs" "object-languages" nil 14)
    ("omer" "Ömer" nil 8)
    ("opl" "optional" nil 147)
    ("oply" "optionally" nil 13)
    ("opn" "operation" nil 474)
    ("opnl" "operational" nil 7)
    ("opns" "operations" nil 780)
    ("opr" "operator" nil 254)
    ("oprl" "operational" nil 111)
    ("oprly" "operationally" nil 16)
    ("oprs" "operators" nil 168)
    ("optg" "operating" nil 16)
    ("ordg" "ordering" nil 20)
    ("ot" "to" nil 117)
    ("otoh" "on the other hand" nil 447)
    ("otp" "object-type" nil 16)
    ("otps" "object-types" nil 9)
    ("otu" "out" nil 4)
    ("ovn" "observation" nil 2)
    ("ovns" "observations" nil 4)
    ("ovw" "overview" nil 23)
    ("owrk" "work" nil 5)
    ("ows" "otherwise" nil 465)
    ("oz" "optimize" nil 160)
    ("ozby" "optimizability" nil 4)
    ("ozd" "optimized" nil 148)
    ("ozg" "optimizing" nil 69)
    ("ozn" "optimization" nil 537)
    ("ozns" "optimizations" nil 138)
    ("ozr" "optimizer" nil 4)
    ("ozs" "optimizes" nil 8)
    ("p'a" "partial application" nil 1)
    ("p'a'p" "proofs as programs" nil 3)
    ("p'a't" "propositions as types" nil 1)
    ("p'as" "partial applications" nil 0)
    ("p'b" "pattern binder" nil 0)
    ("p'c" "predicate calculus" nil 6)
    ("p'd" "program derivation" nil 12)
    ("p'ds" "program derivations" nil 0)
    ("p'e" "partial evaluation" nil 53)
    ("p'ed" "partial evaluated" nil 1)
    ("p'f" "partial function" nil 19)
    ("p'fs" "partial functions" nil 19)
    ("p'l" "programming language" nil 137)
    ("p'l'c" "polymorphic lambda calculus" nil 13)
    ("p'lc" "programmable logic" nil 1)
    ("p'ls" "programming languages" nil 80)
    ("p'm" "pattern matching" nil 53)
    ("p'o" "partial order" nil 31)
    ("p'o'v" "point of view" nil 35)
    ("p'o'vs" "points of view" nil 0)
    ("p'og" "partial ordering" nil 0)
    ("p'os" "partial orders" nil 0)
    ("p'p" "parametric polymorphism" nil 2)
    ("p'p't" "pair-producing type" nil 7)
    ("p'p'ts" "pair-producing types" nil 5)
    ("p'p'v" "pair-producing variable" nil 7)
    ("p'p'vs" "pair-producing variables" nil 6)
    ("p'ps" "progressive pairs" nil 1)
    ("p'r" "primitive recursion" nil 16)
    ("p's" "program synthesis" nil 30)
    ("p'ss" "program syntheses" nil 1)
    ("p'st" "proper subterm" nil 1)
    ("p'v" "program verification" nil 11)
    ("p'x" "program transformation" nil 90)
    ("p'xs" "program transformations" nil 4)
    ("p-eg" "partially evaluating" nil 0)
    ("pagm" "pre-algorithm" nil 38)
    ("pagms" "pre-algorithms" nil 12)
    ("pari" "pair" nil 9)
    ("pbl" "possible" nil 901)
    ("pbm" "problem" nil 1632)
    ("pbmc" "problematic" nil 81)
    ("pbms" "problems" nil 396)
    ("pbty" "possibility" nil 214)
    ("pbtys" "possibilities" nil 218)
    ("pbvr" "proto-behavior" nil 1)
    ("pbvrs" "proto-behaviors" nil 2)
    ("pby" "possibly" nil 355)
    ("pcdn" "precondition" nil 5)
    ("pcdns" "preconditions" nil 2)
    ("pcls" "protocols" nil 1)
    ("pcr" "processor" nil 3)
    ("pdfd" "predefined" nil 7)
    ("pdn" "predomain" nil 12)
    ("pdns" "predomains" nil 16)
    ("pdt" "predicate" nil 238)
    ("pdts" "predicates" nil 56)
    ("perhpas" "perhaps" nil 32)
    ("pf" "proof" nil 145)
    ("pfc" "preference" nil 82)
    ("pfcs" "preferences" nil 46)
    ("pfmc" "performance" nil 3)
    ("pfs" "proofs" nil 205)
    ("pgm" "program" nil 982)
    ("pgmc" "programmatic" nil 13)
    ("pgmcy" "programmatically" nil 6)
    ("pgmd" "programmed" nil 21)
    ("pgmg" "programming" nil 972)
    ("pgml" "programmable" nil 5)
    ("pgmr" "programmer" nil 144)
    ("pgmrs" "programmers" nil 127)
    ("pgms" "programs" nil 560)
    ("pha" "polyhedra" nil 1)
    ("phn" "polyhedron" nil 20)
    ("phns" "polyhedra" nil 6)
    ("pjn" "projection" nil 74)
    ("pjns" "projections" nil 100)
    ("pjr" "projector" nil 2)
    ("pjrs" "projectors" nil 0)
    ("pjt" "project" nil 482)
    ("pjtd" "projected" nil 3)
    ("pjtg" "projecting" nil 7)
    ("pjtr" "projector" nil 2)
    ("pjtrs" "projectors" nil 1)
    ("pjts" "projects" nil 109)
    ("pjv" "projective" nil 4)
    ("pll" "parallel" nil 353)
    ("pllm" "parallelism" nil 90)
    ("plln" "parallelization" nil 6)
    ("pllz" "parallelize" nil 11)
    ("pmc" "polymorphic" nil 210)
    ("pmcy" "polymorphically" nil 4)
    ("pmgr" "programmer" nil 1)
    ("pml" "polynomial" nil 13)
    ("pmls" "polynomials" nil 11)
    ("pmm" "polymorphism" nil 310)
    ("pmn" "permutation" nil 25)
    ("pmns" "permutations" nil 10)
    ("pmr" "parameter" nil 227)
    ("pmrs" "parameters" nil 280)
    ("pnc" "permanence" nil 14)
    ("pns" "polyhedra" nil 25)
    ("pnt" "permanent" nil 21)
    ("pnty" "permanently" nil 3)
    ("poitn" "point" nil 2)
    ("poitns" "points" nil 4)
    ("pordg" "preordering" nil 2)
    ("ppn" "proposition" nil 115)
    ("ppns" "propositions" nil 20)
    ("pptys" "properties" nil 4)
    ("pr" "pair" nil 139)
    ("pr'd" "probability distribution" nil 0)
    ("pr'ds" "probability distributions" nil 1)
    ("prby" "probably" nil 1525)
    ("prpr" "pair-pair" nil 2)
    ("prs" "pairs" nil 94)
    ("prtc" "probabilistic" nil 62)
    ("prtcy" "probabilistically" nil 0)
    ("prty" "probability" nil 106)
    ("prtys" "probabilities" nil 19)
    ("psn" "position" nil 314)
    ("psnl" "positional" nil 3)
    ("psns" "positions" nil 31)
    ("psv" "positive" nil 96)
    ("psvs" "positives" nil 3)
    ("psvy" "positively" nil 7)
    ("pt" "point" nil 951)
    ("pt'f" "point-free" nil 2)
    ("ptc" "parametric" nil 52)
    ("ptcr" "particular" nil 1)
    ("ptcy" "parametrically" nil 25)
    ("ptd" "pointed" nil 227)
    ("ptg" "pointing" nil 53)
    ("ptl" "partial" nil 161)
    ("ptly" "partially" nil 50)
    ("ptn" "pattern" nil 464)
    ("ptns" "patterns" nil 322)
    ("ptr" "pointer" nil 187)
    ("ptrs" "pointers" nil 99)
    ("pts" "points" nil 276)
    ("ptv" "primitive" nil 267)
    ("ptvs" "primitives" nil 252)
    ("ptvy" "primitively" nil 2)
    ("pty" "property" nil 524)
    ("ptys" "properties" nil 408)
    ("pufby" "pre-unifiability" nil 2)
    ("pufl" "pre-unifiable" nil 1)
    ("pufn" "pre-unification" nil 69)
    ("pufr" "pre-unifier" nil 22)
    ("pufrs" "pre-unifiers" nil 27)
    ("pufy" "pre-unify" nil 1)
    ("pv" "prove" nil 257)
    ("pvbl" "provable" nil 5)
    ("pvbty" "provability" nil 4)
    ("pvby" "provably" nil 5)
    ("pvd" "proved" nil 87)
    ("pvg" "proving" nil 65)
    ("pvr" "prover" nil 17)
    ("pvrs" "provers" nil 6)
    ("pvs" "previous" nil 505)
    ("pvsy" "previously" nil 86)
    ("pvt" "private" nil 0)
    ("pvw" "preview" nil 5)
    ("pz" "parametrize" nil 42)
    ("pzd" "parametrized" nil 141)
    ("pzg" "parametrizing" nil 11)
    ("pzn" "parametrization" nil 52)
    ("pzns" "parametrizations" nil 0)
    ("pzs" "parametrizes" nil 1)
    ("q'c" "equivalence class" nil 12)
    ("q'cs" "equivalence classes" nil 4)
    ("q'r" "equivalence relation" nil 7)
    ("q'rs" "equivalence relations" nil 4)
    ("qbl" "questionable" nil 9)
    ("qfd" "quantified" nil 56)
    ("qfg" "quantifying" nil 3)
    ("qfn" "quantification" nil 49)
    ("qfns" "quantifications" nil 0)
    ("qfr" "quantifier" nil 41)
    ("qfrs" "quantifiers" nil 71)
    ("qfs" "quantifies" nil 1)
    ("qfy" "quantify" nil 12)
    ("qfyd" "quantified" nil 2)
    ("qlfn" "qualification" nil 2)
    ("qlfns" "qualifications" nil 0)
    ("qlfr" "qualifier" nil 2)
    ("qlfrs" "qualifiers" nil 0)
    ("qlty" "quality" nil 6)
    ("qltys" "qualities" nil 0)
    ("qn" "question" nil 827)
    ("qnd" "questioned" nil 2)
    ("qng" "questioning" nil 2)
    ("qns" "questions" nil 387)
    ("qt" "quote" nil 10)
    ("qtn" "quaternion" nil 4)
    ("qtns" "quaternions" nil 1)
    ("qts" "quotes" nil 2)
    ("qty" "quantity" nil 4)
    ("qtys" "quantities" nil 3)
    ("qvc" "equivalence" nil 41)
    ("qvcs" "equivalences" nil 6)
    ("qvt" "equivalent" nil 186)
    ("qvty" "equivalently" nil 119)
    ("r'a'p" "reasoning about programs" nil 2)
    ("r'b" "reactive behavior" nil 17)
    ("r'bs" "reactive behaviors" nil 29)
    ("r'd'd't" "recursively defined data type" nil 2)
    ("r'd'd'ts" "recursively defined data types" nil 2)
    ("r'e" "regular expression" nil 3)
    ("r'es" "regular expressions" nil 25)
    ("r'f" "representable functor" nil 10)
    ("r'fs" "representable functors" nil 18)
    ("r'h's" "right-hand side" nil 24)
    ("r'h'ss" "right-hand sides" nil 21)
    ("r'l" "reinforcement learning" nil 11)
    ("r'n'f" "reactive normal form" nil 3)
    ("r'o" "rigid object" nil 0)
    ("r'os" "rigid objects" nil 0)
    ("r'p'c" "rigid-path-check" nil 2)
    ("r'r" "rewrite rule" nil 89)
    ("r'rs" "rewrite rules" nil 135)
    ("r't" "referentially transparent" nil 10)
    ("r't's" "run-time system" nil 6)
    ("r'ty" "referential transparency" nil 10)
    ("r'v" "reactive value" nil 24)
    ("r'vs" "reactive values" nil 56)
    ("r'w" "roughly well-typed" nil 2)
    ("rarrow'" "→" nil 13)
    ("rbly" "arbitrarily" nil 34)
    ("rbml" "RBML" nil 85)
    ("rby" "arbitrary" nil 281)
    ("rcbn" "recombination" nil 1)
    ("rcd" "recommended" nil 2)
    ("rcn" "recursion" nil 211)
    ("rcns" "recursions" nil 25)
    ("rcptn" "recomputation" nil 3)
    ("rcst" "reconstruct" nil 0)
    ("rcsts" "reconstructs" nil 0)
    ("rcv" "recursive" nil 435)
    ("rcvy" "recursively" nil 130)
    ("rd" "rigid" nil 126)
    ("rdby" "reducibility" nil 1)
    ("rdc" "reduce" nil 149)
    ("rdcd" "reduced" nil 37)
    ("rdcg" "reducing" nil 56)
    ("rdcl" "reducible" nil 1)
    ("rdcs" "reduces" nil 25)
    ("rdf" "redefine" nil 22)
    ("rdfd" "redefined" nil 8)
    ("rdfl" "rigid-flexible" nil 54)
    ("rdfn" "redefinition" nil 3)
    ("rdfs" "redefines" nil 0)
    ("rdn" "reduction" nil 188)
    ("rdns" "reductions" nil 38)
    ("rdrd" "rigid-rigid" nil 150)
    ("rfc" "reference" nil 259)
    ("rfcd" "referenced" nil 10)
    ("rfcs" "references" nil 227)
    ("rfd" "reified" nil 9)
    ("rfg" "reifying" nil 12)
    ("rfl" "referential" nil 13)
    ("rfmn" "reformulation" nil 9)
    ("rfmns" "reformulations" nil 2)
    ("rfmt" "reformulate" nil 13)
    ("rfmtg" "reformulating" nil 4)
    ("rfn" "reification" nil 95)
    ("rfns" "reifications" nil 2)
    ("rfr" "reifier" nil 1)
    ("rfs" "reifies" nil 3)
    ("rfy" "reify" nil 24)
    ("rgt" "right" nil 3)
    ("rgz" "recognize" nil 2)
    ("rjn" "rejection" nil 1)
    ("rl" "rule" nil 310)
    ("rl'" "rl" nil 13)
    ("rlcn" "relocation" nil 31)
    ("rlcns" "relocations" nil 1)
    ("rln" "relation" nil 268)
    ("rlnl" "relational" nil 19)
    ("rlns" "relations" nil 90)
    ("rlp" "relationship" nil 218)
    ("rlps" "relationships" nil 67)
    ("rls" "rules" nil 321)
    ("rpbl" "representable" nil 147)
    ("rpc" "replace" nil 647)
    ("rpcd" "replaced" nil 185)
    ("rpcg" "replacing" nil 205)
    ("rpcs" "replaces" nil 34)
    ("rpct" "replacement" nil 66)
    ("rpcts" "replacements" nil 8)
    ("rpn" "representation" nil 1266)
    ("rpnl" "representational" nil 18)
    ("rpns" "representations" nil 407)
    ("rpny" "representationally" nil 2)
    ("rpt" "represent" nil 398)
    ("rptbl" "representable" nil 1)
    ("rptd" "represented" nil 250)
    ("rptg" "representing" nil 165)
    ("rpts" "represents" nil 75)
    ("rptv" "representative" nil 6)
    ("rptvs" "representatives" nil 0)
    ("rpv" "respective" nil 5)
    ("rpvy" "respectively" nil 35)
    ("rpzn" "reparametrization" nil 3)
    ("rqd" "required" nil 220)
    ("rqg" "requiring" nil 29)
    ("rqr" "require" nil 328)
    ("rqrd" "required" nil 20)
    ("rqrg" "requiring" nil 53)
    ("rqrs" "requires" nil 303)
    ("rqt" "requirement" nil 132)
    ("rqts" "requirements" nil 103)
    ("rsn" "resolution" nil 150)
    ("rsns" "resolutions" nil 6)
    ("rtn" "rotation" nil 83)
    ("rtnl" "rotational" nil 3)
    ("rtns" "rotations" nil 19)
    ("rvlt" "re-evaluate" nil 2)
    ("rvltd" "re-evaluated" nil 0)
    ("rvn" "revolution" nil 2)
    ("rvns" "revolutions" nil 0)
    ("rvy" "respectively" nil 92)
    ("s'a" "such as" nil 334)
    ("s'c" "sufficient condition" nil 24)
    ("s'cs" "sufficient conditions" nil 0)
    ("s'ctn" "success continuation" nil 62)
    ("s'ctns" "success continuations" nil 22)
    ("s'e" "side-effect" nil 12)
    ("s'e'c" "semantic editor combinator" nil 7)
    ("s'e'cs" "semantic editor combinators" nil 6)
    ("s'ec" "syntactic equivalence" nil 4)
    ("s'eg" "software engineering" nil 8)
    ("s'es" "side-effects" nil 17)
    ("s'f" "solved form" nil 31)
    ("s'i" "structural induction" nil 16)
    ("s'j" "syntactic judgment" nil 4)
    ("s'js" "syntactic judgments" nil 1)
    ("s'm" "state machine" nil 0)
    ("s'ms" "state machines" nil 0)
    ("s'n" "strong normalization" nil 26)
    ("s'ng" "strongly normalizing" nil 7)
    ("s'nz" "strongly normalize" nil 4)
    ("s'nzs" "strongly normalizes" nil 0)
    ("s'o" "second-order" nil 56)
    ("s'o'm" "second-order matching" nil 10)
    ("s'o'u" "second-order unification" nil 3)
    ("s'p" "special purpose" nil 11)
    ("s'p'o" "strict partial order" nil 8)
    ("s'p'os" "strict partial orders" nil 0)
    ("s'ps" "special predicates" nil 1)
    ("s'r" "simplification rule" nil 3)
    ("s'rs" "simplification rules" nil 2)
    ("s't" "such that" nil 302)
    ("s't'c" "simply typed calculus" nil 4)
    ("s't'l'c" "simply typed lambda-calculus" nil 26)
    ("s't'l's" "same top level structure" nil 2)
    ("s't'm" "space-time model" nil 6)
    ("s't'ms" "space-time models" nil 10)
    ("s'td" "simply typed" nil 25)
    ("s'tp" "simple type" nil 1)
    ("s'tps" "simple types" nil 1)
    ("s'v" "scientific visualization" nil 2)
    ("s'x" "specification transformation" nil 5)
    ("s'xs" "specification transformations" nil 0)
    ("sb'i" "substitution instance" nil 0)
    ("sb'is" "substitution instances" nil 1)
    ("sbn" "substitution" nil 665)
    ("sbns" "substitutions" nil 310)
    ("sbt" "substitute" nil 92)
    ("sbtd" "substituted" nil 29)
    ("sbtg" "substituting" nil 33)
    ("sbtn" "subtraction" nil 1)
    ("sbts" "substitutes" nil 7)
    ("sbty" "substitutivity" nil 1)
    ("sbv" "substitutive" nil 22)
    ("sbvy" "substitutivity" nil 9)
    ("scn" "section" nil 820)
    ("scns" "sections" nil 92)
    ("scs" "synchronous" nil 44)
    ("scsy" "synchronously" nil 4)
    ("scz" "synchronize" nil 5)
    ("sczd" "synchronized" nil 7)
    ("sczg" "synchronizing" nil 0)
    ("sczn" "synchronization" nil 59)
    ("sczs" "synchronizes" nil 0)
    ("sd" "second" nil 1130)
    ("sds" "seconds" nil 26)
    ("sdvn" "subderivation" nil 1)
    ("sdy" "secondly" nil 3)
    ("sfc" "specific" nil 331)
    ("sfcs" "specifics" nil 40)
    ("sfcy" "specifically" nil 191)
    ("sfn" "specification" nil 721)
    ("sfns" "specifications" nil 233)
    ("sft" "sufficient" nil 93)
    ("sfty" "sufficiently" nil 38)
    ("sfy" "specify" nil 228)
    ("sfyd" "specified" nil 182)
    ("sfyg" "specifying" nil 76)
    ("sfyr" "specifier" nil 4)
    ("sfyrs" "specifiers" nil 0)
    ("sfys" "specifies" nil 22)
    ("sg" "something" nil 1484)
    ("sgr" "signature" nil 157)
    ("sgrs" "signatures" nil 82)
    ("shouldnt" "shouldn't" nil 6)
    ("siad" "said" nil 12)
    ("sicne" "since" nil 54)
    ("simeq'" "≃" nil 1)
    ("simlify" "simplify" nil 1)
    ("sivl" "subinterval" nil 1)
    ("sivls" "subintervals" nil 2)
    ("sjt" "subject" nil 35)
    ("sjtd" "subjected" nil 4)
    ("sjts" "subjects" nil 1)
    ("sjv" "subjective" nil 20)
    ("sjvy" "subjectively" nil 9)
    ("slcn" "selection" nil 10)
    ("sln" "solution" nil 583)
    ("slns" "solutions" nil 163)
    ("smc" "semantic" nil 448)
    ("smcs" "semantics" nil 870)
    ("smcy" "semantically" nil 115)
    ("smn" "simplification" nil 255)
    ("smns" "simplifications" nil 59)
    ("smy" "simplify" nil 390)
    ("smyd" "simplified" nil 139)
    ("smyg" "simplifying" nil 107)
    ("smyr" "simplifier" nil 39)
    ("smyrs" "simplifiers" nil 1)
    ("smys" "simplifies" nil 72)
    ("snc" "synthetic" nil 72)
    ("sncy" "synthetically" nil 2)
    ("sns" "synthesis" nil 133)
    ("snss" "syntheses" nil 6)
    ("snz" "synthesize" nil 62)
    ("snzd" "synthesized" nil 22)
    ("snzg" "synthesizing" nil 21)
    ("snzs" "synthesizes" nil 0)
    ("soem" "some" nil 48)
    ("spbm" "subproblem" nil 1)
    ("spbms" "subproblems" nil 4)
    ("spl" "special" nil 406)
    ("spls" "specials" nil 5)
    ("sply" "specially" nil 24)
    ("spt" "separate" nil 3)
    ("sql" "sequential" nil 220)
    ("sqly" "sequentially" nil 14)
    ("sqn" "sequence" nil 412)
    ("sqns" "sequences" nil 172)
    ("sqty" "sequentiality" nil 91)
    ("srv" "surjective" nil 10)
    ("srvy" "surjectively" nil 1)
    ("ssg" "structure-sharing" nil 25)
    ("stc" "syntactic" nil 125)
    ("stcly" "syntactically" nil 0)
    ("stcy" "syntactically" nil 15)
    ("std" "standard" nil 539)
    ("stds" "standards" nil 7)
    ("stdz" "standardize" nil 6)
    ("stdzn" "standardization" nil 2)
    ("stfd" "satisfied" nil 28)
    ("stfg" "satisfying" nil 41)
    ("stfl" "satisfiable" nil 6)
    ("stfn" "satisfaction" nil 34)
    ("stfs" "satisfies" nil 20)
    ("stfy" "satisfy" nil 76)
    ("stm" "system" nil 506)
    ("stmc" "systematic" nil 26)
    ("stmcy" "systematically" nil 21)
    ("stms" "systems" nil 299)
    ("stmt" "statement" nil 95)
    ("stmts" "statements" nil 43)
    ("sty" "satisfy" nil 106)
    ("styd" "satisfied" nil 49)
    ("styg" "satisfying" nil 36)
    ("stys" "satisfies" nil 30)
    ("svl" "several" nil 523)
    ("sx" "syntax" nil 448)
    ("sxn" "subexpression" nil 3)
    ("sxns" "subexpressions" nil 0)
    ("sxpn" "s-expression" nil 3)
    ("sz" "specialize" nil 194)
    ("szd" "specialized" nil 181)
    ("szg" "specializing" nil 46)
    ("szn" "specialization" nil 128)
    ("szns" "specializations" nil 49)
    ("szr" "specializer" nil 9)
    ("szs" "specializes" nil 122)
    ("t'b" "tangent bundle" nil 0)
    ("t'bs" "tangent bundles" nil 0)
    ("t'c" "type-check" nil 7)
    ("t'c'm" "type class morphism" nil 16)
    ("t'c'ms" "type class morphisms" nil 22)
    ("t'cg" "type checking" nil 81)
    ("t'cr" "type checker" nil 1)
    ("t'd" "temporal deviation" nil 3)
    ("t'f" "the following" nil 1343)
    ("t'f'p" "tangible functional programming" nil 4)
    ("t'i" "type inference" nil 183)
    ("t'id" "type-instantiated" nil 9)
    ("t'in" "type-instantiation" nil 4)
    ("t'itd" "tolerably ill-typed" nil 5)
    ("t'itds" "tolerable ill-typedness" nil 0)
    ("t'l" "term language" nil 73)
    ("t'l'c" "typed lambda calculus" nil 66)
    ("t'l'cs" "typed lambda-calculi" nil 4)
    ("t'l'i" "term language interface" nil 2)
    ("t'l's" "top level structure" nil 28)
    ("t'ls" "term languages" nil 4)
    ("t'o" "third-order" nil 13)
    ("t'ocn" "term-occurence" nil 2)
    ("t'ocns" "term-occurrences" nil 1)
    ("t'p" "theorem proving" nil 94)
    ("t'pr" "theorem prover" nil 3)
    ("t'r" "tail recursive" nil 3)
    ("t't" "time transform" nil 27)
    ("t'td" "time transformed" nil 0)
    ("t'tn" "time transformation" nil 22)
    ("t'tns" "time transformations" nil 3)
    ("t'ts" "time transforms" nil 9)
    ("t'v" "type variable" nil 53)
    ("t'vs" "type variables" nil 122)
    ("t'w" "to which" nil 0)
    ("ta'v" "tangible value" nil 5)
    ("ta'vs" "tangible values" nil 8)
    ("taht" "that" nil 40)
    ("tcl" "technical" nil 197)
    ("tcly" "technically" nil 13)
    ("tcy" "technology" nil 99)
    ("tcys" "technologies" nil 5)
    ("td" "third" nil 127)
    ("teh" "the" nil 832)
    ("tfr" "therefore" nil 148)
    ("thats" "that's" nil 1)
    ("theres" "there's" nil 0)
    ("theri" "their" nil 4)
    ("thm" "theorem" nil 117)
    ("thms" "theorems" nil 45)
    ("thsi" "this" nil 104)
    ("thta" "that" nil 21)
    ("thy" "theory" nil 217)
    ("thys" "theories" nil 21)
    ("tiem" "time" nil 71)
    ("tiems" "times" nil 9)
    ("times'" "×" nil 11)
    ("tm" "term" nil 1240)
    ("tm'i" "term inference" nil 25)
    ("tmgy" "terminology" nil 12)
    ("tml" "terminal" nil 8)
    ("tmn" "termination" nil 75)
    ("tms" "terms" nil 1214)
    ("tmt" "terminate" nil 40)
    ("tmtd" "terminated" nil 13)
    ("tmtg" "terminating" nil 12)
    ("tmts" "terminates" nil 12)
    ("tmv" "term-variable" nil 1)
    ("tnq" "technique" nil 235)
    ("tnqs" "techniques" nil 174)
    ("top'" "⊤" nil 1)
    ("tp" "type" nil 6293)
    ("tp'c" "type class" nil 2)
    ("tp'f" "type family" nil 7)
    ("tp'fs" "type families" nil 2)
    ("tpbl" "typable" nil 1)
    ("tpd" "typed" nil 361)
    ("tpg" "typing" nil 320)
    ("tpgs" "typings" nil 17)
    ("tpl" "tuple" nil 11)
    ("tps" "types" nil 2603)
    ("tptp" "type-type" nil 4)
    ("tr'c" "transitive closure" nil 2)
    ("ty'c" "type class" nil 9)
    ("ty'cs" "type classes" nil 1)
    ("u'c" "unification context" nil 36)
    ("u'cs" "unification contexts" nil 3)
    ("u'e" "unification equivalent" nil 5)
    ("u'i" "user interface" nil 21)
    ("u'in" "user interaction" nil 1)
    ("u'is" "user interfaces" nil 4)
    ("u'l" "unification logic" nil 5)
    ("u'p" "unification problem" nil 151)
    ("u'ps" "unification problems" nil 142)
    ("u'q" "universal quantification" nil 5)
    ("u'qd" "universally quantified" nil 0)
    ("ucvtl" "unconventional" nil 4)
    ("udcbl" "undecidable" nil 7)
    ("udfd" "undefined" nil 819)
    ("ufby" "unifiability" nil 104)
    ("ufd" "unified" nil 66)
    ("ufg" "unifying" nil 87)
    ("ufl" "unifiable" nil 63)
    ("ufm" "uniform" nil 98)
    ("ufms" "uniforms" nil 1)
    ("ufmy" "uniformly" nil 9)
    ("ufn" "unification" nil 684)
    ("ufns" "unifications" nil 13)
    ("ufr" "unifier" nil 222)
    ("ufrs" "unifiers" nil 190)
    ("ufs" "unifies" nil 54)
    ("ufy" "unify" nil 116)
    ("ufys" "unifies" nil 3)
    ("uiprt" "unimportant" nil 12)
    ("uitg" "uninteresting" nil 6)
    ("uizd" "uninitialized" nil 2)
    ("uncly" "unnecessarily" nil 33)
    ("uncy" "unnecessary" nil 117)
    ("unq" "unique" nil 1)
    ("untl" "unnatural" nil 11)
    ("untly" "unnaturally" nil 0)
    ("uozd" "unoptimized" nil 5)
    ("usfbl" "unsatisfiable" nil 3)
    ("ustyd" "unsatisfied" nil 2)
    ("ustyg" "unsatisfying" nil 1)
    ("utpd" "untyped" nil 18)
    ("uvl" "universal" nil 166)
    ("uvls" "universals" nil 19)
    ("uvltd" "unevaluated" nil 3)
    ("uvly" "universally" nil 17)
    ("uvy" "universally" nil 13)
    ("v'b" "variable binding" nil 0)
    ("v'd" "virtual device" nil 8)
    ("v'ds" "virtual devices" nil 1)
    ("v'm" "virtual machine" nil 7)
    ("v'p" "view point" nil 5)
    ("v'r" "virtual reality" nil 5)
    ("v's" "vector space" nil 59)
    ("v'ss" "vector spaces" nil 80)
    ("v't" "virtual trackball" nil 9)
    ("v'w" "virtual world" nil 14)
    ("v'ws" "virtual worlds" nil 9)
    ("v'x" "viewing transform" nil 18)
    ("v'xs" "viewing transforms" nil 2)
    ("vbl" "variable" nil 890)
    ("vbls" "variables" nil 822)
    ("vfcn" "verification" nil 2)
    ("vfd" "verified" nil 14)
    ("vfg" "verifying" nil 4)
    ("vfl" "verifiable" nil 0)
    ("vfn" "verification" nil 36)
    ("vfy" "verify" nil 45)
    ("vfyd" "verified" nil 9)
    ("vfyg" "verifying" nil 0)
    ("vfys" "verifies" nil 3)
    ("vln" "evaluation" nil 308)
    ("vlns" "evaluations" nil 24)
    ("vlt" "evaluate" nil 89)
    ("vltd" "evaluated" nil 64)
    ("vltg" "evaluating" nil 40)
    ("vlts" "evaluates" nil 17)
    ("vpt" "viewpoint" nil 14)
    ("vpts" "viewpoints" nil 0)
    ("vrml" "VRML" nil 23)
    ("vsl" "visual" nil 3)
    ("vsn" "version" nil 1190)
    ("vsns" "versions" nil 263)
    ("vtm" "variable-term" nil 39)
    ("vtp" "variable-type" nil 3)
    ("vvtm" "virtual-variable-term" nil 0)
    ("vz" "visualize" nil 14)
    ("vzd" "visualized" nil 5)
    ("vzg" "visualizing" nil 11)
    ("vzn" "visualization" nil 34)
    ("vzns" "visualizations" nil 19)
    ("vzr" "visualizer" nil 1)
    ("vzrs" "visualizers" nil 2)
    ("vzs" "visualizes" nil 0)
    ("w'c" "world coordinate" nil 3)
    ("w'cs" "world coordinates" nil 1)
    ("w'd" "well-defined" nil 0)
    ("w'f" "well formed" nil 12)
    ("w'f'o" "well founded ordering" nil 7)
    ("w'f'os" "well founded orderings" nil 1)
    ("w'fs" "well formedness" nil 3)
    ("w'h'n'f" "weak head normal form" nil 10)
    ("w'h'r" "weak head reduction" nil 1)
    ("w'l'g" "without loss of generality" nil 6)
    ("w'p" "word processing" nil 3)
    ("w'r't" "with respect to" nil 112)
    ("w'v" "weakly valid" nil 2)
    ("w'w" "with which" nil 3)
    ("waht" "what" nil 23)
    ("wasnt" "wasn't" nil 10)
    ("wch" "which" nil 5327)
    ("wdfd" "well-defined" nil 20)
    ("werent" "weren't" nil 4)
    ("weve" "we've" nil 9)
    ("wh" "with" nil 14513)
    ("whehter" "whether" nil 13)
    ("whn" "within" nil 7)
    ("wiht" "with" nil 2)
    ("wkdd" "well-kinded" nil 7)
    ("wnat" "want" nil 13)
    ("wo" "without" nil 1338)
    ("wont" "won't" nil 16)
    ("wont'" "wont" nil 3)
    ("woudl" "would" nil 19)
    ("wouldnt" "wouldn't" nil 20)
    ("wrok" "work" nil 12)
    ("wroking" "working" nil 2)
    ("wtbl" "well-typable" nil 1)
    ("wtd" "well-typed" nil 295)
    ("wtds" "well-typedness" nil 31)
    ("x'p" "transformation path" nil 3)
    ("x'ps" "transformation paths" nil 1)
    ("x'r" "transformation rule" nil 29)
    ("x'rs" "transformation rules" nil 72)
    ("x's" "transformation system" nil 7)
    ("xcv" "exclusive" nil 3)
    ("xfbl" "transformable" nil 3)
    ("xfd" "transformed" nil 63)
    ("xfg" "transforming" nil 60)
    ("xfl" "transformational" nil 12)
    ("xfm" "transform" nil 482)
    ("xfmd" "transformed" nil 10)
    ("xfmg" "transforming" nil 11)
    ("xfmr" "transformer" nil 2)
    ("xfms" "transforms" nil 144)
    ("xfn" "transformation" nil 822)
    ("xfnl" "transformational" nil 4)
    ("xfns" "transformations" nil 356)
    ("xfr" "transformer" nil 44)
    ("xfrs" "transformers" nil 22)
    ("xln" "translation" nil 388)
    ("xlns" "translations" nil 37)
    ("xlt" "translate" nil 166)
    ("xltd" "translated" nil 38)
    ("xltg" "translating" nil 44)
    ("xltn" "translation" nil 2)
    ("xltr" "translator" nil 12)
    ("xlts" "translates" nil 10)
    ("xn" "transition" nil 156)
    ("xnl" "transitional" nil 2)
    ("xns" "transitions" nil 44)
    ("xpl" "example" nil 1310)
    ("xpln" "explanation" nil 195)
    ("xplns" "explanations" nil 26)
    ("xpls" "examples" nil 840)
    ("xpn" "expression" nil 705)
    ("xpnl" "exponential" nil 0)
    ("xpns" "expressions" nil 574)
    ("xps" "express" nil 221)
    ("xpsd" "expressed" nil 150)
    ("xpsg" "expressing" nil 50)
    ("xpsl" "expressible" nil 0)
    ("xpss" "expresses" nil 2)
    ("xpsv" "expressive" nil 12)
    ("xpv" "expressive" nil 42)
    ("xpvs" "expressiveness" nil 22)
    ("xrl" "external" nil 95)
    ("xrly" "externally" nil 9)
    ("xrz" "externalize" nil 7)
    ("xrzd" "externalized" nil 1)
    ("xrzg" "externalizing" nil 0)
    ("xrzn" "externalization" nil 8)
    ("xrzs" "externalizes" nil 0)
    ("xsl" "extensional" nil 9)
    ("xsly" "extensionally" nil 0)
    ("xtbl" "extensible" nil 49)
    ("xtby" "extensibility" nil 24)
    ("xtc" "existence" nil 26)
    ("xtd" "extend" nil 212)
    ("xtdd" "extended" nil 134)
    ("xtdg" "extending" nil 77)
    ("xtds" "extends" nil 57)
    ("xtg" "existing" nil 171)
    ("xtl" "existential" nil 34)
    ("xtls" "existentials" nil 6)
    ("xtly" "existentially" nil 25)
    ("xtn" "extension" nil 227)
    ("xtns" "extensions" nil 143)
    ("xtv" "extensive" nil 7)
    ("xtvy" "extensively" nil 2)
    ("youd" "you'd" nil 1)
    ("youre" "you're" nil 1)
    ("youve" "you've" nil 6)
   ))

(define-abbrev-table 'glsl-mode-abbrev-table '())

(define-abbrev-table 'graphviz-dot-mode-abbrev-table '())

(define-abbrev-table 'grep-mode-abbrev-table '())

(define-abbrev-table 'haskell-cabal-mode-abbrev-table '())

(define-abbrev-table 'haskell-compilation-mode-abbrev-table '())

(define-abbrev-table 'haskell-debug-mode-abbrev-table '())

(define-abbrev-table 'haskell-error-mode-abbrev-table '())

(define-abbrev-table 'haskell-interactive-mode-abbrev-table '())

(define-abbrev-table 'haskell-menu-mode-abbrev-table '())

(define-abbrev-table 'haskell-mode-abbrev-table
  '(
    ("alt" "Alt" nil 2)
    ("df" "df" nil 12)
    ("fo" "fo" nil 7)
   ))

(define-abbrev-table 'haskell-presentation-mode-abbrev-table '())

(define-abbrev-table 'haskell-yesod-parse-routes-mode-abbrev-table '())

(define-abbrev-table 'help-mode-abbrev-table '())

(define-abbrev-table 'hs-lint-mode-abbrev-table '())

(define-abbrev-table 'html-mode-abbrev-table
  '(
    ("td" "td" nil 21)
   ))

(define-abbrev-table 'idl-mode-abbrev-table '())

(define-abbrev-table 'inferior-haskell-mode-abbrev-table '())

(define-abbrev-table 'inferior-python-mode-abbrev-table '())

(define-abbrev-table 'java-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("finally" "finally" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'javascript-mode-abbrev-table '())

(define-abbrev-table 'js-jsx-mode-abbrev-table '())

(define-abbrev-table 'js-mode-abbrev-table '())

(define-abbrev-table 'latex-mode-abbrev-table '())

(define-abbrev-table 'lisp-mode-abbrev-table
  '(
    ("mvb" "multiple-value-bind" nil 119)
    ("mvs" "multiple-value-setq" nil 3)
   ))

(define-abbrev-table 'literate-haskell-mode-abbrev-table '())

(define-abbrev-table 'log-view-mode-abbrev-table '())

(define-abbrev-table 'makefile-automake-mode-abbrev-table '())

(define-abbrev-table 'makefile-bsdmake-mode-abbrev-table '())

(define-abbrev-table 'makefile-gmake-mode-abbrev-table '())

(define-abbrev-table 'makefile-imake-mode-abbrev-table '())

(define-abbrev-table 'makefile-makepp-mode-abbrev-table '())

(define-abbrev-table 'makefile-mode-abbrev-table '())

(define-abbrev-table 'markdown-mode-abbrev-table
  '(
    ("b'r" "$\\beta$ reduce" nil 15)
    ("b'rd" "$\\beta$ reduced" nil 4)
    ("b'rg" "$\\beta$ reducing" nil 5)
    ("b'rn" "$\\beta$ reduction" nil 47)
    ("b'rns" "$\\beta$ reductions" nil 35)
    ("b'rx" "$\\beta$ redex" nil 51)
    ("b'rxs" "$\\beta$ redexes" nil 45)
    ("e'e" "$\\eta$ expand" nil 19)
    ("e'ed" "$\\eta$ expanded" nil 3)
    ("e'eg" "$\\eta$ expanding" nil 2)
    ("e'en" "$\\eta$ expansion" nil 22)
    ("e'ens" "$\\eta$ expansions" nil 18)
    ("e'r" "$\\eta$ reduce" nil 21)
    ("e'rd" "$\\eta$ reduced" nil 2)
    ("e'rg" "$\\eta$ reducing" nil 2)
    ("e'rn" "$\\eta$ reduction" nil 26)
    ("e'rns" "$\\eta$ reductions" nil 20)
    ("e'rx" "$\\eta$ redex" nil 31)
    ("e'rxs" "$\\eta$ redexes" nil 33)
    ("l'c" "$\\lambda$ calculus" nil 66)
    ("l'cs" "$\\lambda$ calculi" nil 11)
    ("t'l'c" "typed $\\lambda$ calculus" nil 39)
    ("t'l'cs" "typed $\\lambda$ calculi" nil 34)
   ))

(define-abbrev-table 'message-mode-abbrev-table '())

(define-abbrev-table 'messages-buffer-mode-abbrev-table '())

(define-abbrev-table 'network-connection-mode-abbrev-table '())

(define-abbrev-table 'nslookup-mode-abbrev-table '())

(define-abbrev-table 'nxml-mode-abbrev-table '())

(define-abbrev-table 'objc-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 1)
   ))

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'org-mode-abbrev-table '())

(define-abbrev-table 'outline-mode-abbrev-table '())

(define-abbrev-table 'package-menu-mode-abbrev-table '())

(define-abbrev-table 'perl-mode-abbrev-table '())

(define-abbrev-table 'pike-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'plain-tex-mode-abbrev-table '())

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'ps-mode-abbrev-table '())

(define-abbrev-table 'ps-run-mode-abbrev-table '())

(define-abbrev-table 'python-mode-abbrev-table '())

(define-abbrev-table 'python-mode-skeleton-abbrev-table '())

(define-abbrev-table 'ruby-mode-abbrev-table '())

(define-abbrev-table 'scss-mode-abbrev-table '())

(define-abbrev-table 'select-tags-table-mode-abbrev-table '())

(define-abbrev-table 'sgml-mode-abbrev-table '())

(define-abbrev-table 'sh-mode-abbrev-table '())

(define-abbrev-table 'shell-mode-abbrev-table '())

(define-abbrev-table 'slitex-mode-abbrev-table '())

(define-abbrev-table 'smbclient-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'speedbar-mode-abbrev-table '())

(define-abbrev-table 'tabulated-list-mode-abbrev-table '())

(define-abbrev-table 'tar-mode-abbrev-table '())

(define-abbrev-table 'tex-mode-abbrev-table
  '(
    ("a'cn" "$\\alpha$ conversion" nil 52)
    ("a'ec" "$\\alpha$ equivalence" nil 13)
    ("a'et" "$\\alpha$ equivalent" nil 5)
    ("b'cn" "$\\beta$ conversion" nil 3)
    ("b'nf" "$\\beta$ normal form" nil 31)
    ("b'r" "$\\beta$ reduce" nil 9)
    ("b'rd" "$\\beta$ reduced" nil 3)
    ("b'rn" "$\\beta$ reduction" nil 32)
    ("be'nf" "$\\beta\\eta$ normal form" nil 8)
    ("benf" "$\\beta\\eta$ normal form" nil 27)
    ("benfs" "$\\beta\\eta$ normal forms" nil 4)
    ("d't'l'c" "dependent typed $\\lambda$ calculus" nil 1)
    ("e'e" "$\\eta$ expand" nil 14)
    ("e'ed" "$\\eta$ expanded" nil 3)
    ("e'en" "$\\eta$ expansion" nil 21)
    ("e'rn" "$\\eta$ reduction" nil 10)
    ("gd" "gd" nil 15)
    ("ith'" "$i$th" nil 19)
    ("l'c" "$\\lambda$ calculus" nil 43)
    ("l'cs" "$\\lambda$ calculi" nil 9)
    ("l'cvby" "$\\lambda$ convertability" nil 4)
    ("l'ec" "$\\lambda$ equivalence" nil 2)
    ("l'mm" "$\\lambda$ morphism" nil 3)
    ("l'mms" "$\\lambda$ morphisms" nil 5)
    ("lbehnf" "long $\\beta\\eta$ normal form" nil 8)
    ("lbenf" "long $\\beta\\eta$ normal form" nil 18)
    ("lbepnf" "long $\\beta\\eta$ product normal form" nil 3)
    ("lcvn" "$\\lambda$ conversion" nil 1)
    ("lfhnf" "$\\lambda$-free head normal form" nil 6)
    ("lpg" "$\\lambda$Prolog" nil 34)
    ("lppg" "$\\Lpi$Prolog" nil 1)
    ("ltm" "$\\lambda$ term" nil 1)
    ("ltms" "$\\lambda$ terms" nil 1)
    ("o'p'l'c" "$\\omega$-order polymorphic $\\lambda$ calculus" nil 7)
    ("p'l'c" "polymorphic $\\lambda$ calculus" nil 19)
    ("s't'l'c" "simply typed $\\lambda$ calculus" nil 45)
    ("t'l'c" "typed $\\lambda$ calculus" nil 35)
    ("t'l'cs" "typed $\\lambda$ calculi" nil 8)
   ))

(define-abbrev-table 'tex-shell-abbrev-table '())

(define-abbrev-table 'texinfo-mode-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'url-cookie-mode-abbrev-table '())

(define-abbrev-table 'use-package-statistics-mode-abbrev-table '())

(define-abbrev-table 'vc-annotate-mode-abbrev-table '())

(define-abbrev-table 'vc-dired-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-edit-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-view-mode-abbrev-table '())

(define-abbrev-table 'vc-git-region-history-mode-abbrev-table '())

(define-abbrev-table 'vc-svn-log-view-mode-abbrev-table '())

(define-abbrev-table 'verilog-mode-abbrev-table '())

(define-abbrev-table 'xref--xref-buffer-mode-abbrev-table '())

(define-abbrev-table 'yaml-mode-abbrev-table '())

