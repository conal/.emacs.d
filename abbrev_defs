;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'Custom-mode-abbrev-table '())

(define-abbrev-table 'Info-edit-mode-abbrev-table '())

(define-abbrev-table 'Man-mode-abbrev-table '())

(define-abbrev-table 'antlr-mode-abbrev-table '())

(define-abbrev-table 'apropos-mode-abbrev-table '())

(define-abbrev-table 'asm-mode-abbrev-table '())

(define-abbrev-table 'awk-mode-abbrev-table '())

(define-abbrev-table 'bibtex-mode-abbrev-table '())

(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'c-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'cabal-mode-abbrev-table '())

(define-abbrev-table 'calendar-mode-abbrev-table '())

(define-abbrev-table 'change-log-mode-abbrev-table '())

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'conf-colon-mode-abbrev-table '())

(define-abbrev-table 'conf-javaprop-mode-abbrev-table '())

(define-abbrev-table 'conf-ppd-mode-abbrev-table '())

(define-abbrev-table 'conf-space-mode-abbrev-table '())

(define-abbrev-table 'conf-unix-mode-abbrev-table '())

(define-abbrev-table 'conf-windows-mode-abbrev-table '())

(define-abbrev-table 'conf-xdefaults-mode-abbrev-table '())

(define-abbrev-table 'csharp-mode-abbrev-table '())

(define-abbrev-table 'css-mode-abbrev-table '())

(define-abbrev-table 'debugger-mode-abbrev-table '())

(define-abbrev-table 'delphi-mode-abbrev-table '())

(define-abbrev-table 'diff-mode-abbrev-table '())

(define-abbrev-table 'doc-view-mode-abbrev-table '())

(define-abbrev-table 'doctex-mode-abbrev-table '())

(define-abbrev-table 'edit-abbrevs-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'epa-info-mode-abbrev-table '())

(define-abbrev-table 'epa-key-list-mode-abbrev-table '())

(define-abbrev-table 'epa-key-mode-abbrev-table '())

(define-abbrev-table 'erc-chanlist-mode-abbrev-table '())

(define-abbrev-table 'erc-list-menu-mode-abbrev-table '())

(define-abbrev-table 'erc-mode-abbrev-table '())

(define-abbrev-table 'eshell-mode-abbrev-table '())

(define-abbrev-table 'finder-mode-abbrev-table '())

(define-abbrev-table 'flycheck-error-list-mode-abbrev-table '())

(define-abbrev-table 'ftp-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'gfm-mode-abbrev-table '())

(define-abbrev-table 'ghc-core-mode-abbrev-table '())

(define-abbrev-table 'git-log-view-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table
  '(
    ("a'a" "axis-aligned" nil 4)
    ("a'b" "assign-behavior" nil 4)
    ("a'cn" "alpha-conversion" nil 17)
    ("a'ct" "$\\alpha$-convert" nil 4)
    ("a'd" "automatic differentiation" nil 31)
    ("a'd't" "abstract data type" nil 21)
    ("a'd'ts" "abstract data types" nil 22)
    ("a'ect" "alpha-equivalence" nil 1)
    ("a'ett" "alpha-equivalent" nil 1)
    ("a'f" "as follows" nil 253)
    ("a'fr" "applicative functor" nil 0)
    ("a'g" "attribute grammar" nil 2)
    ("a'k'o" "a kind of" nil 1)
    ("a'l" "at least" nil 381)
    ("a'o't" "as opposed to" nil 50)
    ("a's" "abstract syntax" nil 136)
    ("a's't" "abstract syntax tree" nil 4)
    ("a's'ts" "abstract syntax trees" nil 10)
    ("a'st" "attribute state" nil 2)
    ("a't" "abstract type" nil 7)
    ("a't'p" "automated theorem proving" nil 3)
    ("a'v" "assign-value" nil 3)
    ("a'w" "at which" nil 17)
    ("a'w'a" "as well as" nil 4)
    ("a'w't" "at which time" nil 2)
    ("a'wk" "approximately well-kinded" nil 1)
    ("a'ws" "approximate well-typedness" nil 21)
    ("aa'bb" "axis-aligned bounding box" nil 1)
    ("aa'bbs" "axis-aligned bounding boxes" nil 2)
    ("abd" "abstracted" nil 22)
    ("abn" "abstraction" nil 296)
    ("abns" "abstractions" nil 127)
    ("abotu" "about" nil 8)
    ("abt" "abstract" nil 347)
    ("abtd" "abstracted" nil 4)
    ("abtg" "abstracting" nil 15)
    ("abts" "abstracts" nil 12)
    ("abty" "abstractly" nil 14)
    ("acl" "acceptable" nil 72)
    ("actg" "accounting" nil 3)
    ("actgs" "accountings" nil 0)
    ("acy" "acceptability" nil 37)
    ("addn" "addition" nil 79)
    ("addns" "additions" nil 32)
    ("addny" "additionally" nil 6)
    ("adl" "additional" nil 2)
    ("adly" "additionally" nil 0)
    ("adn" "and" nil 287)
    ("adnl" "additional" nil 196)
    ("adnly" "additionally" nil 13)
    ("adny" "additionally" nil 3)
    ("agm" "algorithm" nil 740)
    ("agmc" "algorithmic" nil 18)
    ("agmcy" "algorithmically" nil 4)
    ("agms" "algorithms" nil 220)
    ("agt" "argument" nil 1008)
    ("agts" "arguments" nil 671)
    ("ahve" "have" nil 35)
    ("ala" "à la" nil 1)
    ("alc" "algebraic" nil 37)
    ("alcy" "algebraically" nil 1)
    ("alhpa" "alpha" nil 2)
    ("alt" "absolute" nil 89)
    ("altg" "alternating" nil 2)
    ("altt" "alternate" nil 69)
    ("altts" "alternates" nil 1)
    ("alty" "absolutely" nil 8)
    ("amn" "animation" nil 58)
    ("amns" "animations" nil 17)
    ("ap'f" "applicative functor" nil 9)
    ("ap'fs" "applicative functors" nil 9)
    ("apbl" "applicable" nil 62)
    ("apby" "applicability" nil 25)
    ("apg" "applying" nil 305)
    ("aph" "approach" nil 1018)
    ("aphd" "approached" nil 2)
    ("aphg" "approaching" nil 7)
    ("aphs" "approaches" nil 96)
    ("apn" "application" nil 984)
    ("apns" "applications" nil 434)
    ("aps" "applies" nil 85)
    ("apv" "applicative" nil 593)
    ("apvl" "approval" nil 2)
    ("apvs" "applicatives" nil 18)
    ("apvy" "applicatively" nil 4)
    ("apy" "apply" nil 632)
    ("apyd" "applied" nil 298)
    ("apys" "applies" nil 81)
    ("arent" "aren't" nil 0)
    ("asct" "associate" nil 4)
    ("asg" "assigning" nil 27)
    ("asgd" "assigned" nil 16)
    ("asgt" "assignment" nil 83)
    ("asgts" "assignments" nil 23)
    ("asmn" "assumption" nil 102)
    ("asmns" "assumptions" nil 32)
    ("asn" "association" nil 44)
    ("asns" "associations" nil 6)
    ("asrn" "assertion" nil 3)
    ("asrns" "assertions" nil 0)
    ("ast" "associate" nil 58)
    ("astd" "associated" nil 203)
    ("astg" "associating" nil 19)
    ("astn" "association" nil 2)
    ("asts" "associates" nil 17)
    ("asty" "associativity" nil 16)
    ("asv" "associative" nil 61)
    ("asvy" "associativity" nil 48)
    ("at's" "attribute state" nil 0)
    ("ata" "automata" nil 51)
    ("atc" "automatic" nil 90)
    ("atcy" "automatically" nil 166)
    ("atn" "automaton" nil 78)
    ("atr" "architecture" nil 114)
    ("atrl" "architectural" nil 3)
    ("atrs" "architectures" nil 15)
    ("att" "attribute" nil 246)
    ("attd" "attributed" nil 13)
    ("attr" "attr" nil 85)
    ("atts" "attributes" nil 220)
    ("aufn" "anti-unification" nil 4)
    ("aufr" "anti-unifier" nil 1)
    ("aufrs" "anti-unifiers" nil 0)
    ("avl" "ActiveVRML" nil 78)
    ("avn" "abbreviation" nil 43)
    ("avns" "abbreviations" nil 17)
    ("avt" "abbreviate" nil 11)
    ("avtd" "abbreviated" nil 3)
    ("avtg" "abbreviating" nil 0)
    ("avts" "abbreviates" nil 3)
    ("axg" "approximating" nil 24)
    ("axm" "axiom" nil 4)
    ("axms" "axioms" nil 22)
    ("axn" "approximation" nil 152)
    ("axns" "approximations" nil 60)
    ("axt" "approximate" nil 78)
    ("axtd" "approximated" nil 7)
    ("axtg" "approximating" nil 4)
    ("axts" "approximates" nil 9)
    ("axty" "approximately" nil 3)
    ("axy" "approximately" nil 11)
    ("b'b" "bounding box" nil 7)
    ("b'bs" "bounding boxes" nil 11)
    ("b'cn" "beta-conversion" nil 3)
    ("b'f" "breadth first" nil 7)
    ("b'l" "behavior language" nil 32)
    ("b'm'o" "by means of" nil 2)
    ("b'rc" "beta-reduce" nil 4)
    ("b'rcd" "beta-reduced" nil 0)
    ("b'rdt" "beta-reduced" nil 1)
    ("b'rn" "beta-reduction" nil 36)
    ("b'rns" "beta-reductions" nil 6)
    ("b'rnt" "beta-reduction" nil 22)
    ("b'rt" "beta-reduce" nil 1)
    ("b'rx" "beta-redex" nil 7)
    ("b'rxs" "beta-redexes" nil 5)
    ("b't" "behavior thread" nil 12)
    ("b't'w" "by the way" nil 30)
    ("b'ts" "behavior threads" nil 8)
    ("b'v" "bound variable" nil 44)
    ("b'v'h" "bounding volume hierarchy" nil 0)
    ("b'v'hs" "bounding volume hierarchies" nil 0)
    ("b'vm" "bounding volume" nil 4)
    ("b'vms" "bounding volumes" nil 9)
    ("b'vs" "bound variables" nil 82)
    ("bc'c'c" "bicartesian closed category" nil 1)
    ("bcs" "because" nil 0)
    ("bd" "bound" nil 106)
    ("bdd" "bounded" nil 19)
    ("bdg" "binding" nil 173)
    ("bdgs" "bindings" nil 73)
    ("bds" "bounds" nil 23)
    ("becasue" "because" nil 19)
    ("becuase" "because" nil 46)
    ("bjn" "bijection" nil 20)
    ("bjns" "bijections" nil 1)
    ("bjv" "bijective" nil 4)
    ("blog'obvious" "http://conal.net/blog/posts/fostering-creativity-by-relinquishing-the-obvious/" nil 3)
    ("bot'" "⊥" nil 73)
    ("btm" "bottom" nil 1)
    ("btms" "bottoms" nil 1)
    ("bv" "behave" nil 1)
    ("bvd" "behaved" nil 0)
    ("bvl" "behavioral" nil 3)
    ("bvr" "behavior" nil 1655)
    ("bvrl" "behavioral" nil 4)
    ("bvrr" "Bvr" nil 3)
    ("bvrs" "behaviors" nil 894)
    ("bvs" "behaves" nil 0)
    ("c'b'v" "call-by-value" nil 27)
    ("c'b'x" "continuation-based transformation" nil 1)
    ("c'c'c" "cartesian closed category" nil 4)
    ("c'c'cs" "cartesian closed categories" nil 10)
    ("c'cs" "chain-completeness" nil 1)
    ("c'ctn" "collision continuation" nil 3)
    ("c'd" "collision detection" nil 19)
    ("c'e" "constraint expression" nil 2)
    ("c'es" "constraint expressions" nil 2)
    ("c'f" "continuous function" nil 4)
    ("c'fs" "continuous functions" nil 1)
    ("c'g" "computer graphics" nil 9)
    ("c'l'p" "constraint logic programming" nil 23)
    ("c'o'c" "Calculus of Constructions" nil 9)
    ("c'o'm" "calculus on manifolds" nil 5)
    ("c'p" "collision prediction" nil 47)
    ("c'p's" "continuation-passing style" nil 1)
    ("c'r" "collision response" nil 5)
    ("c'rs" "conversion rules" nil 6)
    ("c's" "concrete syntax" nil 8)
    ("c's'e" "common subexpression elimination" nil 7)
    ("c's'g" "constructive solid geometry" nil 2)
    ("c's'p" "complete set of pre-unifiers" nil 0)
    ("c's'u" "complete set of unifiers" nil 13)
    ("c's'us" "complete sets of unifiers" nil 4)
    ("c't" "category theory" nil 13)
    ("c'tc" "category theoretic" nil 1)
    ("c'v" "concrete value" nil 12)
    ("c'vs" "concrete values" nil 18)
    ("c-tc" "category theoretic" nil 0)
    ("cant" "can't" nil 1)
    ("cbl" "constrainable" nil 93)
    ("cbls" "constrainables" nil 52)
    ("cbn" "combination" nil 101)
    ("cbnl" "combinational" nil 18)
    ("cbns" "combinations" nil 23)
    ("cbr" "combinator" nil 67)
    ("cbrs" "combinators" nil 182)
    ("cci" "calculi" nil 25)
    ("ccln" "conclusion" nil 95)
    ("cclns" "conclusions" nil 36)
    ("ccs" "calculus" nil 155)
    ("cdl" "conditional" nil 69)
    ("cdls" "conditionals" nil 0)
    ("cdly" "conditionally" nil 3)
    ("cdn" "condition" nil 181)
    ("cdnl" "conditional" nil 23)
    ("cdnls" "conditionals" nil 38)
    ("cdns" "conditions" nil 84)
    ("cdots'" "⋯" nil 4)
    ("cdt" "coordinate" nil 41)
    ("cdtd" "coordinated" nil 5)
    ("cdtg" "coordinating" nil 2)
    ("cdts" "coordinates" nil 35)
    ("cfc" "conference" nil 52)
    ("cfcs" "conferences" nil 7)
    ("cft" "coefficient" nil 3)
    ("cfts" "coefficients" nil 4)
    ("cgn" "conjugation" nil 11)
    ("cgt" "conjugate" nil 1)
    ("ch'r" "Church-Rosser" nil 32)
    ("circ'" "∘" nil 6)
    ("cjn" "conjunction" nil 74)
    ("cjns" "conjunctions" nil 12)
    ("cjr" "conjecture" nil 18)
    ("cjrd" "conjectured" nil 0)
    ("cjv" "conjunctive" nil 1)
    ("ck" "check" nil 362)
    ("ckd" "checked" nil 64)
    ("ckg" "checking" nil 145)
    ("cks" "checks" nil 14)
    ("cln" "collection" nil 311)
    ("clns" "collections" nil 40)
    ("cmpn" "composition" nil 7)
    ("cmx" "complex" nil 6)
    ("cn" "connection" nil 164)
    ("cnn" "connection" nil 0)
    ("cnns" "connections" nil 0)
    ("cnqy" "consequently" nil 0)
    ("cns" "connections" nil 53)
    ("cnt" "constant" nil 694)
    ("cnts" "constants" nil 326)
    ("cojt" "cobject" nil 2)
    ("cojts" "cobjects" nil 3)
    ("commetn" "comment" nil 1)
    ("cpbl" "composable" nil 5)
    ("cpby" "composability" nil 6)
    ("cpd" "composed" nil 10)
    ("cpl" "compositional" nil 85)
    ("cply" "compositionally" nil 12)
    ("cpn" "composition" nil 733)
    ("cpnl" "compositional" nil 0)
    ("cpns" "compositions" nil 81)
    ("cps" "compose" nil 16)
    ("cpsd" "composed" nil 4)
    ("cpsg" "composing" nil 12)
    ("cpss" "composes" nil 0)
    ("cpt" "component" nil 218)
    ("cptl" "computational" nil 28)
    ("cptly" "computationally" nil 1)
    ("cptn" "computation" nil 337)
    ("cptns" "computations" nil 110)
    ("cpts" "components" nil 211)
    ("cqn" "consequence" nil 54)
    ("cqns" "consequences" nil 30)
    ("cqny" "consequently" nil 9)
    ("cqt" "consequent" nil 6)
    ("cqty" "consequently" nil 17)
    ("crd" "correspond" nil 111)
    ("crdc" "correspondence" nil 138)
    ("crdd" "corresponded" nil 27)
    ("crdg" "corresponding" nil 324)
    ("crdgy" "correspondingly" nil 29)
    ("crdn" "coordination" nil 2)
    ("crds" "corresponds" nil 83)
    ("crln" "correlation" nil 1)
    ("crlns" "correlations" nil 0)
    ("csn" "collision" nil 115)
    ("csns" "collisions" nil 33)
    ("cst" "construct" nil 342)
    ("cstd" "constructed" nil 121)
    ("cstg" "constructing" nil 145)
    ("cstn" "construction" nil 370)
    ("cstns" "constructions" nil 15)
    ("csts" "constructs" nil 84)
    ("cstv" "constructive" nil 7)
    ("cstvy" "constructively" nil 3)
    ("csv" "conservative" nil 14)
    ("csvy" "conservatively" nil 0)
    ("ct" "constraint" nil 144)
    ("ctg" "containing" nil 29)
    ("ctgs" "contiguous" nil 1)
    ("ctn" "continuation" nil 114)
    ("ctns" "continuations" nil 58)
    ("ctods" "cdots" nil 6)
    ("ctr" "constructor" nil 384)
    ("ctrs" "constructors" nil 228)
    ("cts" "constraints" nil 142)
    ("ctsy" "continuously" nil 11)
    ("ctus" "continuous" nil 368)
    ("ctusy" "continuously" nil 36)
    ("ctuy" "continuity" nil 12)
    ("ctv" "commutative" nil 19)
    ("ctvy" "commutativity" nil 14)
    ("cty" "continuity" nil 38)
    ("cvbl" "ConstraintVariable" nil 2)
    ("cvby" "convertibility" nil 42)
    ("cvc" "convenience" nil 4)
    ("cvl" "convertible" nil 62)
    ("cvn" "conversion" nil 301)
    ("cvnc" "convenience" nil 117)
    ("cvns" "conversions" nil 54)
    ("cvnt" "convenient" nil 197)
    ("cvnty" "conveniently" nil 13)
    ("cvt" "convert" nil 231)
    ("cvtd" "converted" nil 51)
    ("cvtg" "converting" nil 76)
    ("cvtl" "conventional" nil 106)
    ("cvtly" "conventionally" nil 3)
    ("cvtn" "convention" nil 59)
    ("cvtns" "conventions" nil 12)
    ("cvtr" "converter" nil 5)
    ("cvtrs" "converters" nil 0)
    ("cvts" "converts" nil 23)
    ("cx" "context" nil 233)
    ("cxs" "contexts" nil 100)
    ("cxx" "cx" nil 5)
    ("cz" "characterize" nil 1)
    ("d'b" "double buffer" nil 1)
    ("d'bd" "double-buffered" nil 0)
    ("d'bg" "double buffering" nil 4)
    ("d'c" "dependent calculus" nil 30)
    ("d'd" "denotational design" nil 3)
    ("d'e" "differential equation" nil 9)
    ("d'es" "differential equations" nil 28)
    ("d'f" "depth first" nil 11)
    ("d'f's" "depth first search" nil 6)
    ("d'f't" "dependent function type" nil 1)
    ("d'f'ts" "dependent function types" nil 9)
    ("d'i" "de Bruijn index" nil 15)
    ("d'is" "de Bruijn indices" nil 28)
    ("d'l" "display list" nil 14)
    ("d'ls" "display lists" nil 5)
    ("d'm" "direct manipulation" nil 1)
    ("d'o'f" "degree of freedom" nil 6)
    ("d'o'fs" "degrees of freedom" nil 17)
    ("d'p" "dynamic programming" nil 5)
    ("d'p't" "dependent product type" nil 0)
    ("d'p'ts" "dependent product types" nil 0)
    ("d's" "data structure" nil 72)
    ("d's'e'l" "domain-specific embedded language" nil 0)
    ("d's'e'ls" "domain-specific embedded languages" nil 1)
    ("d's'l" "domain-specific language" nil 3)
    ("d's'ls" "domain-specific languages" nil 7)
    ("d'sm" "denotational semantics" nil 78)
    ("d'ss" "data structures" nil 52)
    ("d't" "data type" nil 67)
    ("d't'l'c" "dependent typed lambda calculus" nil 5)
    ("d'tp" "data type" nil 19)
    ("d'tps" "data types" nil 11)
    ("d'ts" "data types" nil 90)
    ("da'd" "data-driven" nil 18)
    ("data member" "display method" nil 0)
    ("dbd" "distributed" nil 19)
    ("dbn" "distribution" nil 47)
    ("dbns" "distributions" nil 12)
    ("dbt" "distribute" nil 29)
    ("dbtd" "distributed" nil 8)
    ("dbtg" "distributing" nil 7)
    ("dbts" "distributes" nil 19)
    ("dbv" "distributive" nil 5)
    ("dbvy" "distributivity" nil 5)
    ("dcb" "describe" nil 185)
    ("dcbd" "described" nil 360)
    ("dcbg" "describing" nil 90)
    ("dcbl" "decidable" nil 10)
    ("dcbs" "describes" nil 115)
    ("dcln" "declaration" nil 83)
    ("dclns" "declarations" nil 55)
    ("dcn" "declaration" nil 106)
    ("dcns" "declarations" nil 71)
    ("dcpd" "decomposed" nil 0)
    ("dcpn" "decomposition" nil 103)
    ("dcpns" "decompositions" nil 11)
    ("dcps" "decompose" nil 23)
    ("dcpsg" "decomposing" nil 2)
    ("dcpss" "decomposes" nil 1)
    ("dct" "document" nil 292)
    ("dctd" "documented" nil 17)
    ("dctg" "documenting" nil 2)
    ("dctn" "documentation" nil 140)
    ("dcts" "documents" nil 21)
    ("dcty" "discontinuity" nil 3)
    ("dctys" "discontinuities" nil 1)
    ("dcv" "declarative" nil 110)
    ("dcvy" "declaratively" nil 9)
    ("ddc" "deduce" nil 18)
    ("ddcg" "deducing" nil 0)
    ("ddn" "deduction" nil 34)
    ("ddns" "deductions" nil 9)
    ("ddv" "deductive" nil 9)
    ("de'd" "demand-driven" nil 18)
    ("depty" "depth" nil 4)
    ("df" "define" nil 1241)
    ("df'" "df" nil 13)
    ("dfbl" "differentiable" nil 21)
    ("dfby" "differentiability" nil 1)
    ("dfc" "difference" nil 237)
    ("dfcg" "differencing" nil 2)
    ("dfcs" "differences" nil 60)
    ("dfd" "defined" nil 687)
    ("dfg" "defining" nil 194)
    ("dfl" "differential" nil 46)
    ("dfly" "differentially" nil 0)
    ("dfn" "definition" nil 1370)
    ("dfnl" "definitional" nil 5)
    ("dfns" "definitions" nil 616)
    ("dfnt" "different" nil 931)
    ("dfnty" "differently" nil 93)
    ("dfrn" "differentiation" nil 79)
    ("dfrns" "differentiations" nil 2)
    ("dfrt" "differentiate" nil 10)
    ("dfrtd" "differentiated" nil 1)
    ("dfrts" "differentiates" nil 0)
    ("dfs" "defines" nil 76)
    ("dftg" "differentiating" nil 1)
    ("dgt" "disagreement" nil 1)
    ("di'p" "disagreement pair" nil 172)
    ("di'ps" "disagreement pairs" nil 168)
    ("di'sq" "disagreement sequence" nil 8)
    ("di'sqs" "disagreement sequences" nil 0)
    ("didnt" "didn't" nil 1)
    ("djn" "disjunction" nil 18)
    ("djns" "disjunctions" nil 4)
    ("djv" "disjunctive" nil 3)
    ("dlt" "difficult" nil 26)
    ("dlty" "difficulty" nil 20)
    ("dltys" "difficulties" nil 4)
    ("dmn" "domain" nil 219)
    ("dmns" "domains" nil 60)
    ("dnl" "denotational" nil 116)
    ("dnly" "denotationally" nil 11)
    ("dnn" "denotation" nil 30)
    ("dnns" "denotations" nil 5)
    ("dnv" "denotative" nil 30)
    ("dnvy" "denotatively" nil 0)
    ("dont" "don't" nil 1)
    ("dpc" "dependence" nil 24)
    ("dpcn" "decomposition" nil 1)
    ("dpd" "depend" nil 121)
    ("dpdd" "depended" nil 6)
    ("dpdg" "depending" nil 79)
    ("dpds" "depends" nil 103)
    ("dpt" "dependent" nil 291)
    ("dpts" "dependents" nil 0)
    ("dpv" "disprove" nil 1)
    ("dpy" "dependency" nil 100)
    ("dpys" "dependencies" nil 103)
    ("drfc" "dereference" nil 0)
    ("dscn" "description" nil 246)
    ("dscns" "descriptions" nil 85)
    ("dscrn" "description" nil 1)
    ("dscv" "descriptive" nil 13)
    ("dstn" "destruction" nil 3)
    ("dstr" "destructor" nil 1)
    ("dstrs" "destructors" nil 0)
    ("dsv" "destructive" nil 29)
    ("dsvy" "destructively" nil 43)
    ("dtc" "deterministic" nil 56)
    ("dtcy" "deterministically" nil 2)
    ("dtm" "determinism" nil 10)
    ("dtt" "determinate" nil 3)
    ("dtv" "derivative" nil 438)
    ("dtvs" "derivatives" nil 239)
    ("dv" "derive" nil 81)
    ("dv'" "dv" nil 17)
    ("dvbl" "derivable" nil 1)
    ("dvd" "derived" nil 111)
    ("dvg" "deriving" nil 180)
    ("dvn" "derivation" nil 318)
    ("dvnl" "derivational" nil 7)
    ("dvns" "derivations" nil 68)
    ("dvp" "develop" nil 74)
    ("dvpd" "developed" nil 73)
    ("dvpg" "developing" nil 62)
    ("dvpr" "developer" nil 5)
    ("dvprs" "developers" nil 8)
    ("dvps" "develops" nil 9)
    ("dvs" "derives" nil 11)
    ("dvt" "development" nil 245)
    ("dvts" "developments" nil 12)
    ("e'b'g" "explanation based generalization" nil 2)
    ("e'e" "eta-expand" nil 17)
    ("e'ed" "eta-expanded" nil 1)
    ("e'en" "eta-expansion" nil 10)
    ("e'ens" "eta-expansions" nil 1)
    ("e'es" "$\\eta$-expands" nil 1)
    ("e'l'f" "Edinburgh Logical Framework" nil 17)
    ("e'o" "each other" nil 0)
    ("e'p" "expression procedure" nil 4)
    ("e'pmc" "explicitly polymorphic" nil 0)
    ("e'pmm" "explicit polymorphism" nil 5)
    ("e'ps" "expression procedures" nil 3)
    ("e'r" "equivalence relation" nil 6)
    ("e'rs" "equivalence relations" nil 2)
    ("e's's" "ERGO Suport System" nil 11)
    ("e'u" "equational unification" nil 3)
    ("eft" "efficient" nil 485)
    ("efty" "efficiently" nil 125)
    ("efy" "efficiency" nil 220)
    ("eg" "e.g.," nil 923)
    ("elmn" "elimination" nil 4)
    ("emt" "element" nil 207)
    ("emts" "elements" nil 214)
    ("eplg" "extrapolating" nil 0)
    ("epln" "extrapolation" nil 11)
    ("eplt" "extrapolate" nil 1)
    ("eqc" "equivalence" nil 64)
    ("eqcs" "equivalences" nil 5)
    ("eqn" "equation" nil 70)
    ("eqnl" "equational" nil 63)
    ("eqnly" "equationally" nil 1)
    ("eqns" "equations" nil 84)
    ("eqty" "equality" nil 62)
    ("eqtys" "equalities" nil 0)
    ("equiv'" "≡" nil 17)
    ("eqvt" "equivalent" nil 129)
    ("eqvts" "equivalents" nil 0)
    ("eqvty" "equivalently" nil 7)
    ("evetn" "event" nil 4)
    ("evetns" "events" nil 9)
    ("evt" "environment" nil 380)
    ("evtl" "environmental" nil 1)
    ("evts" "environments" nil 69)
    ("excersize" "exercise" nil 2)
    ("exists'" "∃" nil 1)
    ("f'a" "functional animation" nil 6)
    ("f'b" "frame buffer" nil 2)
    ("f'c" "first-class" nil 9)
    ("f'cb" "functor combinator" nil 1)
    ("f'cbs" "functor combinators" nil 0)
    ("f'ctn" "failure continutation" nil 5)
    ("f'ctns" "failure continutations" nil 0)
    ("f'e" "for example" nil 120)
    ("f'f'i" "foreign function interface" nil 10)
    ("f'i" "for instance" nil 973)
    ("f'l" "formal language" nil 6)
    ("f'o" "first-order" nil 31)
    ("f'o'l" "first-order logic" nil 8)
    ("f'o'm" "first-order matching" nil 1)
    ("f'o'r" "first-order resolution" nil 3)
    ("f'o'u" "first-order unification" nil 33)
    ("f'o'v" "field of view" nil 1)
    ("f'occ" "free-occurrence" nil 2)
    ("f'occs" "free-occurrences" nil 1)
    ("f'os" "function objects" nil 5)
    ("f'p" "functional programming" nil 161)
    ("f'p'i" "fixed point induction" nil 13)
    ("f'ps" "fixed points" nil 5)
    ("f'r" "functional reactive" nil 0)
    ("f'r'a" "functional reactive animation" nil 1)
    ("f'r'p" "functional reactive programming" nil 20)
    ("f's" "formal system" nil 7)
    ("f'ss" "function symbols" nil 5)
    ("f't" "future time" nil 1)
    ("f't'v" "free type variable" nil 2)
    ("f't'vs" "free type variables" nil 7)
    ("f'v" "free variable" nil 36)
    ("f'vs" "free variables" nil 140)
    ("f'x" "for example" nil 4)
    ("fbl" "flexible" nil 61)
    ("fbly" "flexibly" nil 1)
    ("fbty" "flexibility" nil 23)
    ("fby" "flexibility" nil 33)
    ("fdl" "fundamental" nil 87)
    ("fdls" "fundamentals" nil 0)
    ("fdly" "fundamentally" nil 25)
    ("fdn" "foundation" nil 73)
    ("fdnl" "foundational" nil 5)
    ("fdns" "foundations" nil 9)
    ("ffl" "flex-flex" nil 0)
    ("fld" "followed" nil 59)
    ("flfl" "flexible-flexible" nil 166)
    ("flg" "following" nil 286)
    ("flrd" "flexible-rigid" nil 153)
    ("fls" "follows" nil 71)
    ("fltp" "flexible-type" nil 2)
    ("fm" "from" nil 5896)
    ("fma" "formula" nil 92)
    ("fmas" "formulas" nil 75)
    ("fml" "formal" nil 132)
    ("fmly" "formally" nil 31)
    ("fmn" "formulation" nil 223)
    ("fmns" "formulations" nil 27)
    ("fmt" "formulate" nil 64)
    ("fmtd" "formulated" nil 18)
    ("fmtg" "formulating" nil 11)
    ("fmts" "formulates" nil 6)
    ("fmy" "family" nil 150)
    ("fmys" "families" nil 39)
    ("fn" "function" nil 3626)
    ("fnl" "functional" nil 984)
    ("fnls" "functionals" nil 16)
    ("fnly" "functionally" nil 36)
    ("fns" "functions" nil 1982)
    ("fnty" "functionality" nil 120)
    ("fo" "of" nil 383)
    ("forall'" "∀" nil 8)
    ("fqt" "frequent" nil 13)
    ("fqty" "frequently" nil 17)
    ("fqy" "frequency" nil 27)
    ("fqys" "frequencies" nil 3)
    ("frnak" "frank" nil 3)
    ("fsm" "formalism" nil 18)
    ("fsm'" "fsm" nil 4)
    ("fsms" "formalisms " nil 1)
    ("ft" "first" nil 2777)
    ("fu'v" "future value" nil 2)
    ("fu'vs" "future values" nil 15)
    ("fx'p" #("fixed point" 0 11 (fontified t)) nil 4)
    ("fx'ps" #("fixed points" 0 12 (fontified t)) nil 1)
    ("fz" "formalize" nil 38)
    ("fzd" "formalized" nil 8)
    ("fzg" "formalizing" nil 14)
    ("fzl" "formalizable" nil 0)
    ("fzn" "formalization" nil 16)
    ("fzns" "formalizations" nil 1)
    ("fzs" "formalizes" nil 4)
    ("g''o" "geometric-object" nil 3)
    ("g''os" "geometric-objects" nil 0)
    ("g'a'f" "graphics application framework" nil 7)
    ("g'c" "garbage collection" nil 66)
    ("g'cd" "garbage-collected" nil 2)
    ("g'cr" "garbage collector" nil 2)
    ("g'd" "geometry-dependent" nil 3)
    ("g'dc" "geometry-dependence" nil 0)
    ("g'e" "geometry expression" nil 9)
    ("g'es" "geometry expressions" nil 3)
    ("g'f" "generic function" nil 2)
    ("g'l" "geometry language" nil 27)
    ("g'o" "geometric object" nil 56)
    ("g'os" "geometric objects" nil 29)
    ("g'p" "general purpose" nil 20)
    ("g'pv" "geometric primitive" nil 0)
    ("g'pvs" "geometric primitives" nil 7)
    ("g'u'i" "graphical user interface" nil 0)
    ("g'u'is" "graphical user interfaces" nil 1)
    ("gd" "ground" nil 6)
    ("gl" "general" nil 1019)
    ("glb'" "⊓" nil 4)
    ("glty" "generality" nil 53)
    ("gltys" "generalities" nil 0)
    ("gly" "generally" nil 246)
    ("gmc" "geometric" nil 167)
    ("gmcy" "geometrically" nil 3)
    ("gmr" "grammar" nil 71)
    ("gmrs" "grammars" nil 14)
    ("gmy" "geometry" nil 1464)
    ("gmys" "geometries" nil 13)
    ("gn" "generation" nil 202)
    ("gnc" "generic" nil 1)
    ("gns" "generations" nil 2)
    ("gnt" "generate" nil 4)
    ("gnts" "generates" nil 0)
    ("goign" "going" nil 26)
    ("gp" "group" nil 445)
    ("gpd" "grouping" nil 0)
    ("gpg" "grouping" nil 0)
    ("gps" "groups" nil 60)
    ("grahpics" "graphics" nil 7)
    ("gt" "generate" nil 181)
    ("gtd" "generated" nil 260)
    ("gtg" "generating" nil 45)
    ("gtr" "generator" nil 69)
    ("gtrs" "generators" nil 30)
    ("gts" "generates" nil 102)
    ("gz" "generalize" nil 280)
    ("gzd" "generalized" nil 208)
    ("gzg" "generalizing" nil 82)
    ("gzn" "generalization" nil 110)
    ("gzns" "generalizations" nil 20)
    ("gzs" "generalizes" nil 43)
    ("h'e" "hyper-edge" nil 1)
    ("h'es" "hyper-edges" nil 0)
    ("h'g" "hyper-graph" nil 2)
    ("h'gs" "hyper-graphs" nil 0)
    ("h'l" "high-level" nil 110)
    ("h'n" "head normal" nil 2)
    ("h'n'f" "head normal form" nil 38)
    ("h'n'fs" "head normal forms" nil 2)
    ("h'o" "higher-order" nil 378)
    ("h'o'a's" "higher-order abstract syntax" nil 5)
    ("h'o'f" "higher-order function" nil 10)
    ("h'o'fs" "higher-order functions" nil 25)
    ("h'o'h'h" "higher-order hereditary Harrop" nil 2)
    ("h'o'l" "higher-order logic" nil 56)
    ("h'o'm" "higher-order matching" nil 18)
    ("h'o'r" "higher-order resolution" nil 4)
    ("h'o't" "higher-order type" nil 1)
    ("h'o'ts" "higher-order types" nil 9)
    ("h'o'u" "higher-order unification" nil 194)
    ("h's'r" "hidden surface removal" nil 4)
    ("h'ss" "half spaces" nil 0)
    ("havent" "haven't" nil 2)
    ("hcl" "hierarchical" nil 40)
    ("hcly" "hierarchically" nil 4)
    ("hcy" "hierarchy" nil 46)
    ("hcys" "hierarchies" nil 4)
    ("hmm" "homomorphism" nil 12)
    ("hmms" "homomorphisms" nil 7)
    ("hr'l" "higher level" nil 36)
    ("hte" "the" nil 46)
    ("hvae" "have" nil 24)
    ("hvr" "however" nil 1196)
    ("hwo" "how" nil 7)
    ("hymc" "hylomorphic" nil 7)
    ("hymm" "hylomorphism" nil 6)
    ("hymms" "hylomorphisms" nil 7)
    ("hzl" "horizontal" nil 23)
    ("hzly" "horizontally" nil 6)
    ("i'a" "in addition" nil 17)
    ("i'a't" "in addition to" nil 118)
    ("i'as" "inherited attributes" nil 2)
    ("i'b" "interactive behavior" nil 3)
    ("i'bs" "interactive behaviors" nil 1)
    ("i'c" "in contrast" nil 51)
    ("i'c'o" "in case of" nil 2)
    ("i'f" "in fact" nil 108)
    ("i'f'f" "if and only if" nil 5)
    ("i'f'o" "in favor of" nil 65)
    ("i'fe" "indirection-free" nil 2)
    ("i'g" "in general" nil 213)
    ("i'h" "induction hypothesis" nil 8)
    ("i'm'o" "in my opinion" nil 12)
    ("i'o" "in order" nil 19)
    ("i'o'f" "in order for" nil 1)
    ("i'o't" "in order to" nil 296)
    ("i'o'w" "in other words" nil 120)
    ("i'p" "in particular" nil 375)
    ("i'pmc" "implicitly polymorphic" nil 3)
    ("i'pmm" "implicit polymorphism" nil 30)
    ("i'r" "inference rule" nil 20)
    ("i'r't" "in response to" nil 1)
    ("i'rs" "inference rules" nil 38)
    ("i's" "inference system" nil 8)
    ("i's'o" "in spite of" nil 32)
    ("i'ss" "inference systems" nil 0)
    ("i't" "in that" nil 12)
    ("i't'o" "in terms of" nil 202)
    ("i'v" "improving value" nil 16)
    ("i'vb" "instance variable" nil 18)
    ("i'vbs" "instance variables" nil 40)
    ("i'vs" "improving values" nil 22)
    ("i'w" "in which" nil 397)
    ("i'w'c" "in which case" nil 44)
    ("ibvr" "i-behavior" nil 3)
    ("ibvrs" "i-behaviors" nil 1)
    ("icl" "incremental" nil 80)
    ("icly" "incrementally" nil 20)
    ("icv" "inclusive" nil 3)
    ("icvc" "inconvenience" nil 1)
    ("icvnt" "inconvenient" nil 5)
    ("idc" "introduce" nil 259)
    ("idcd" "introduced" nil 98)
    ("idcg" "introducing" nil 108)
    ("idcs" "introduces" nil 47)
    ("idfn" "identification" nil 1)
    ("idn" "introduction" nil 167)
    ("idns" "introductions" nil 7)
    ("idpc" "independence" nil 19)
    ("idpt" "independent" nil 188)
    ("idpty" "independently" nil 61)
    ("idtt" "indeterminate" nil 5)
    ("idv" "inductive" nil 10)
    ("idvy" "inductively" nil 6)
    ("idx" "index" nil 50)
    ("idxd" "indexed" nil 7)
    ("idxg" "indexing" nil 3)
    ("idxs" "indices" nil 1)
    ("ie" "i.e.," nil 960)
    ("ieft" "inefficient" nil 44)
    ("iefty" "inefficiently" nil 0)
    ("iefy" "inefficiency" nil 22)
    ("iefys" "inefficiencies" nil 3)
    ("ifbl" "inflexible" nil 2)
    ("ifc" "inference" nil 129)
    ("ifcs" "inferences" nil 3)
    ("ifl" "informal" nil 59)
    ("ifly" "informally" nil 10)
    ("ifm" "inform" nil 20)
    ("ifml" "informal" nil 17)
    ("ifmly" "informally" nil 16)
    ("ifmy" "informally" nil 10)
    ("ifn" "information" nil 306)
    ("ifqt" "infrequent" nil 2)
    ("ifqty" "infrequently" nil 0)
    ("ift" "infinite" nil 331)
    ("ifty" "infinitely" nil 52)
    ("igl" "integral" nil 93)
    ("igls" "integrals" nil 9)
    ("ign" "integration" nil 157)
    ("igt" "integrate" nil 30)
    ("igtd" "integrated" nil 9)
    ("igtg" "integrating" nil 2)
    ("igtr" "integrator" nil 1)
    ("igts" "integrates" nil 1)
    ("ijn" "injection" nil 10)
    ("ijns" "injections" nil 3)
    ("ijv" "injective" nil 12)
    ("ijvy" "injectivity" nil 11)
    ("imc" "isomorphic" nil 71)
    ("imc'" "≅" nil 9)
    ("imcy" "isomorphically" nil 6)
    ("imm" "isomorphism" nil 70)
    ("imms" "isomorphisms" nil 47)
    ("implies'" "⟹" nil 2)
    ("incst" "inconsistent" nil 1)
    ("intn" "interaction" nil 173)
    ("intns" "interactions" nil 14)
    ("intv" "interactive" nil 236)
    ("iot" "in order to" nil 6)
    ("iow" "in other words" nil 29)
    ("ipbl" "impossible" nil 79)
    ("ipcn" "implication" nil 64)
    ("ipcns" "implications" nil 36)
    ("ipd" "implemented" nil 260)
    ("ipg" "implementing" nil 117)
    ("iplg" "interpolating" nil 6)
    ("ipln" "interpolation" nil 74)
    ("iplns" "interpolations" nil 1)
    ("iplt" "interpolate" nil 20)
    ("ipltd" "interpolated" nil 5)
    ("iplts" "interpolates" nil 1)
    ("ipn" "implementation" nil 1595)
    ("ipns" "implementations" nil 166)
    ("ipr" "implementor" nil 1)
    ("iprc" "importance" nil 45)
    ("iprs" "implementors" nil 6)
    ("iprt" "important" nil 578)
    ("iprty" "importantly" nil 23)
    ("ipt" "implement" nil 474)
    ("iptd" "implemented" nil 43)
    ("iptg" "implementing" nil 7)
    ("iptl" "implementable" nil 4)
    ("iptr" "implementor" nil 17)
    ("iptrs" "implementors" nil 6)
    ("ipts" "implements" nil 39)
    ("iptv" "imperative" nil 346)
    ("iptvy" "imperatively" nil 10)
    ("ipv" "improve" nil 149)
    ("ipvd" "improved" nil 103)
    ("ipvg" "improving" nil 93)
    ("ipvs" "improves" nil 10)
    ("ipvt" "improvement" nil 67)
    ("ipvts" "improvements" nil 89)
    ("irl" "internal" nil 62)
    ("irls" "internals" nil 2)
    ("irly" "internally" nil 13)
    ("irz" "internalize" nil 3)
    ("irzd" "internalized" nil 1)
    ("isft" "insufficient" nil 3)
    ("isfty" "insufficiently" nil 3)
    ("isl" "intensional" nil 8)
    ("isn" "intersection" nil 26)
    ("isns" "intersections" nil 2)
    ("isnt" "isn't" nil 1)
    ("isrn" "instruction" nil 20)
    ("isrns" "instructions" nil 25)
    ("ist" "instantiate" nil 119)
    ("istd" "instantiated" nil 150)
    ("istg" "instantiating" nil 47)
    ("istn" "instantiation" nil 9)
    ("istns" "instantiations" nil 6)
    ("istr'" "I see to recall" nil 3)
    ("ists" "instantiates" nil 17)
    ("itc" "intutitionistic" nil 10)
    ("itcy" "intutitionistically" nil 0)
    ("itd" "interested" nil 278)
    ("itds" "ill-typedness" nil 29)
    ("itfc" "interface" nil 792)
    ("itfcd" "interfaced" nil 2)
    ("itfcg" "interfacing" nil 13)
    ("itfcs" "interfaces" nil 180)
    ("itg" "interesting" nil 403)
    ("itgy" "interestingly" nil 25)
    ("itm" "imitation" nil 55)
    ("itme" "item" nil 6)
    ("itms" "imitations" nil 40)
    ("itn" "itn" nil 22)
    ("itnc" "intuitionistic" nil 1)
    ("itns" "interactions" nil 13)
    ("itp" "interpret" nil 45)
    ("itpd" "interpreted" nil 11)
    ("itpg" "interpreting" nil 44)
    ("itpn" "interpretation" nil 242)
    ("itpns" "interpretations" nil 56)
    ("itpr" "interpreter" nil 42)
    ("itprs" "interpreters" nil 3)
    ("itps" "interprets" nil 2)
    ("itt" "iterate" nil 7)
    ("ittd" "iterated" nil 1)
    ("ittn" "iteration" nil 18)
    ("ittns" "iterations" nil 4)
    ("ittv" "iterative" nil 22)
    ("ittvy" "iteratively" nil 4)
    ("itv" "interactive" nil 8)
    ("itvty" "interactivity" nil 8)
    ("itvy" "interactively" nil 29)
    ("itz" "internalize" nil 0)
    ("itzd" "internalized" nil 0)
    ("itzg" "internalizing" nil 1)
    ("itzn" "internalization" nil 2)
    ("itzs" "internalizes" nil 0)
    ("iv'a" "interval analysis" nil 7)
    ("ivbl" "invertible" nil 13)
    ("ivl" "interval" nil 296)
    ("ivls" "intervals" nil 108)
    ("ivn" "inversion" nil 35)
    ("ivns" "inversions" nil 4)
    ("ivt" "invariant" nil 115)
    ("ivts" "invariants" nil 12)
    ("ix" "index" nil 11)
    ("ixd" "indexed" nil 2)
    ("ixs" "indices" nil 2)
    ("iz" "initialize" nil 26)
    ("izd" "initialized" nil 15)
    ("izg" "initializing" nil 6)
    ("izn" "initialization" nil 39)
    ("izns" "initializations" nil 4)
    ("izr" "initializer" nil 0)
    ("izrs" "initializers" nil 0)
    ("izs" "initializes" nil 0)
    ("j'r" "John Reynolds" nil 45)
    ("jfd" "justified" nil 11)
    ("jfg" "justifying" nil 8)
    ("jfn" "justification" nil 47)
    ("jfy" "justify" nil 32)
    ("jfyd" "justified" nil 6)
    ("jfyg" "justifing" nil 2)
    ("jfys" "justifies" nil 8)
    ("jsut" "just" nil 17)
    ("jt" "judgment" nil 31)
    ("jtl" "judgmental" nil 9)
    ("jts" "judgments" nil 7)
    ("jxn" "juxtaposition" nil 3)
    ("knwo" "know" nil 1)
    ("konw" "know" nil 17)
    ("l'a" "linear algebra" nil 7)
    ("l'c" "lambda calculus" nil 41)
    ("l'cs" "lambda-calculi" nil 4)
    ("l'cvby" "lambda convertability" nil 2)
    ("l'd't" "algebraic data type" nil 6)
    ("l'd'ts" "algebraic data types" nil 8)
    ("l'e" "lambda expression" nil 9)
    ("l'es" "lambda expressions" nil 12)
    ("l'f" "Logical Framework" nil 2)
    ("l'f'p" "least fixed point" nil 11)
    ("l'f'ps" "least fixed points" nil 1)
    ("l'h'n'f" "long head normal form" nil 6)
    ("l'h's" "left-hand side" nil 16)
    ("l'h'ss" "left-hand sides" nil 17)
    ("l'l" "low-level" nil 48)
    ("l'ls" "lazy lists" nil 1)
    ("l'm" "linear map" nil 1)
    ("l'm't" "local modeling transform" nil 1)
    ("l'm'ts" "local modeling transforms" nil 1)
    ("l'ms" "linear maps" nil 3)
    ("l'n'f" "long normal form" nil 12)
    ("l'o'i" "level of indirection" nil 1)
    ("l'p" "logic programming" nil 58)
    ("l'p'l" "logic programming language" nil 0)
    ("l's'b" "least significant bit" nil 1)
    ("l'u'b" "least upper bound" nil 5)
    ("l'v" "logical variable" nil 1)
    ("l'x" "linear transformation" nil 9)
    ("l'xs" "linear transformations" nil 8)
    ("ladn" "land" nil 2)
    ("lambda'" "λ" nil 5)
    ("lbenf" "long beta-eta normal form" nil 2)
    ("lbepnf" "long beta-eta product normal form" nil 3)
    ("lc" "logic" nil 239)
    ("lcl" "logical" nil 163)
    ("lcly" "logically" nil 14)
    ("lcn" "location" nil 114)
    ("lcns" "locations" nil 72)
    ("lcs" "logics" nil 44)
    ("lcy" "logically" nil 2)
    ("leqi'" "⊑" nil 13)
    ("lg" "language" nil 1588)
    ("lga" "algebra" nil 68)
    ("lgas" "algebras" nil 2)
    ("lgc" "algebraic" nil 85)
    ("lgcy" "algebraically" nil 2)
    ("lgs" "languages" nil 369)
    ("liek" "like" nil 10)
    ("llambda'" "Λ" nil 3)
    ("lpg" "Lambda-Prolog" nil 131)
    ("lppg" "Lambda'pi-Prolog" nil 3)
    ("lr'l" "lower level" nil 8)
    ("lsit" "list" nil 4)
    ("ltods" "ldots" nil 6)
    ("ltt" "alternate" nil 1)
    ("ltv" "alternative" nil 399)
    ("ltvs" "alternatives" nil 157)
    ("ltvy" "alternatively" nil 201)
    ("lub'" "⊔" nil 24)
    ("m'c" "modeling coordinate" nil 3)
    ("m'c's'p" "minimal complete set of pre-unifiers" nil 9)
    ("m'c's'ps" "minimal complete sets of pre-unifiers" nil 8)
    ("m'c's'u" "minimal complete set of unifiers" nil 19)
    ("m'c's'us" "minimal complete sets of unifiers" nil 0)
    ("m'cs" "model coordinates" nil 1)
    ("m'd'p" "Markov decision process" nil 2)
    ("m'd'ps" "Markov decision processes" nil 2)
    ("m'eqn" "multiequation" nil 5)
    ("m'eqns" "multiequations" nil 4)
    ("m'g'u" "most general unifier" nil 12)
    ("m'i" "multiple inheritance" nil 8)
    ("m'l" "meta-language" nil 73)
    ("m'ls" "meta-languages" nil 6)
    ("m'm" "multimedia" nil 15)
    ("m's'b" "most significant bit" nil 0)
    ("m't" "multi-threaded" nil 2)
    ("m'x" "modeling transform" nil 29)
    ("m'xs" "modeling transforms" nil 12)
    ("mabye" "maybe" nil 16)
    ("mch" "match" nil 84)
    ("mchd" "matched" nil 5)
    ("mchg" "matching" nil 171)
    ("mchr" "matcher" nil 5)
    ("mchs" "matches" nil 27)
    ("mcn" "mechanism" nil 50)
    ("mcns" "mechanisms" nil 22)
    ("mfd" "modified" nil 5)
    ("mfn" "modification" nil 52)
    ("mfns" "modifications" nil 22)
    ("mfo" "MediaFlow" nil 34)
    ("mfy" "modify" nil 62)
    ("mfyd" "modified" nil 152)
    ("mfyg" "modifying" nil 29)
    ("mfyl" "modifiable" nil 13)
    ("mfyr" "modifier" nil 2)
    ("mfyrs" "modifiers" nil 0)
    ("mfys" "modifies" nil 9)
    ("mgmt" "management" nil 22)
    ("mgr" "manager" nil 1)
    ("mgt" "management" nil 1)
    ("mlc" "meta-logic" nil 16)
    ("mlcl" "meta-logical" nil 1)
    ("mlpn" "multiplication" nil 5)
    ("mmz" "memoize" nil 23)
    ("mmzd" "memoized" nil 3)
    ("mmzg" "memoizing" nil 7)
    ("mmzn" "memoization" nil 67)
    ("mmzs" "memoizes" nil 0)
    ("mng" "meaning" nil 344)
    ("mngs" "meanings" nil 97)
    ("mpc" "monomorphic" nil 47)
    ("mpln" "multiplication" nil 8)
    ("mpm" "monomorphism" nil 14)
    ("mpz" "monomorphize" nil 6)
    ("mpzd" "monomorphized" nil 2)
    ("mpzg" "monomorphizing" nil 1)
    ("mpzn" "monomorphization" nil 10)
    ("mroe" "more" nil 45)
    ("mtc" "monotonic" nil 49)
    ("mtcly" "monotonically" nil 16)
    ("mtcy" "monotonicity" nil 59)
    ("mtd" "method" nil 656)
    ("mtds" "methods" nil 380)
    ("mtdy" "methodology" nil 52)
    ("mtdys" "methodologies" nil 9)
    ("mtg" "meeting" nil 431)
    ("mtgs" "meetings" nil 40)
    ("mtn" "maintain" nil 1)
    ("mvbl" "meta-variable" nil 8)
    ("mvbls" "meta-variables" nil 5)
    ("mvl" "motivational" nil 4)
    ("mvn" "motivation" nil 104)
    ("mvns" "motivations" nil 10)
    ("mvr" "moreover" nil 183)
    ("mvt" "motivate" nil 48)
    ("mvtd" "motivated" nil 65)
    ("mvtg" "motivating" nil 27)
    ("mvts" "motivates" nil 11)
    ("mxz" "maximize" nil 1)
    ("mxzd" "maximized" nil 0)
    ("mxzs" "maximizes" nil 0)
    ("mz" "minimize" nil 26)
    ("mzd" "minimized" nil 1)
    ("mzg" "minimizing" nil 6)
    ("mzn" "minimization" nil 7)
    ("mzs" "minimizes" nil 2)
    ("n'a's'c" "necessary and sufficient condition" nil 3)
    ("n'c" "necessary condition" nil 5)
    ("n'cs" "necessary conditions" nil 0)
    ("n'd" "natural deduction" nil 10)
    ("n'f" "normal form" nil 139)
    ("n'fs" "normal forms" nil 62)
    ("n's" "non-strict" nil 8)
    ("n'x" "natural transformation" nil 3)
    ("n'xs" "natural transformations" nil 0)
    ("naive'" "naïve" nil 12)
    ("naively'" "naïvely" nil 4)
    ("naivite" "naïvité" nil 1)
    ("nbd" "neighborhood" nil 2)
    ("nbds" "neighborhoods" nil 0)
    ("ncly" "necessarily" nil 76)
    ("ncpnl" "noncomputational" nil 0)
    ("ncts" "noncontinuous" nil 1)
    ("ncvby" "nonconvertability" nil 1)
    ("ncy" "necessary" nil 240)
    ("ndc" "nondeterministic" nil 18)
    ("ndcy" "nondeterministically" nil 5)
    ("ndm" "nondeterminism" nil 13)
    ("ndsv" "non-destructive" nil 0)
    ("ndtc" "nondeterministic" nil 49)
    ("ndtm" "nondeterminism" nil 28)
    ("nfn" "notification" nil 2)
    ("nfnl" "non-functional" nil 0)
    ("nfns" "notifications" nil 1)
    ("ngv" "negative" nil 2)
    ("nintv" "non-interactive" nil 4)
    ("nitv" "non-interactive" nil 20)
    ("nkow" "know" nil 4)
    ("nleqi'" "⋢" nil 1)
    ("nmtc" "nonmonotonic" nil 2)
    ("noteq'" "≠" nil 3)
    ("ntl" "natural" nil 223)
    ("ntls" "naturalness" nil 9)
    ("ntly" "naturally" nil 97)
    ("ntmn" "nontermination" nil 4)
    ("ntmtg" "nonterminating" nil 0)
    ("ntn" "notation" nil 211)
    ("ntnl" "notational" nil 23)
    ("ntns" "notations" nil 10)
    ("ntny" "notationally" nil 3)
    ("nufby" "nonunifiablity" nil 14)
    ("nufl" "nonunifiable" nil 19)
    ("nufm" "nonuniform" nil 2)
    ("nv'c" "Nonviolent Communication" nil 4)
    ("nz" "normalize" nil 96)
    ("nzd" "normalized" nil 28)
    ("nzg" "normalizing" nil 26)
    ("nzl" "normalizable" nil 4)
    ("nzn" "normalization" nil 110)
    ("nzns" "normalizations" nil 1)
    ("nzs" "normalizes" nil 2)
    ("nzy" "normalizability" nil 26)
    ("o'c" "of course" nil 197)
    ("o'd'e" "ordinary differential equation" nil 1)
    ("o'd'es" "ordinary differential equations" nil 3)
    ("o'l" "object language" nil 103)
    ("o'lc" "object logic" nil 1)
    ("o'lcs" "object logics" nil 1)
    ("o'ls" "object languages" nil 16)
    ("o'm" "object model" nil 2)
    ("o'ms" "object models" nil 0)
    ("o'o" "object-oriented" nil 68)
    ("o'o'p" "object-oriented programming" nil 0)
    ("o'on" "object-orientation" nil 5)
    ("o'p'l'c" "omega-order polymorphic lambda-calculus" nil 1)
    ("o's" "object system" nil 35)
    ("o's't" "on second thought" nil 3)
    ("o'sm" "operational semantics" nil 2)
    ("o'ss" "object systems" nil 2)
    ("o't" "overloading tool" nil 0)
    ("o't'f" "of the form" nil 91)
    ("o'tp" "object type" nil 17)
    ("o'tps" "object types" nil 10)
    ("o'u't" "once upon a time" nil 1)
    ("o'w" "of which" nil 9)
    ("ocn" "occurrence" nil 212)
    ("ocns" "occurrences" nil 164)
    ("ocsn" "occlusion" nil 10)
    ("ofr" "for" nil 21)
    ("ojn" "objection" nil 27)
    ("ojns" "objections" nil 19)
    ("ojt" "object" nil 762)
    ("ojtd" "objected" nil 2)
    ("ojts" "objects" nil 519)
    ("ojv" "objective" nil 17)
    ("ojvs" "objectives" nil 4)
    ("ojvy" "objectively" nil 6)
    ("olc" "object-logic" nil 7)
    ("olcs" "object-logics" nil 3)
    ("olg" "object-language" nil 62)
    ("olgs" "object-languages" nil 14)
    ("opl" "optional" nil 140)
    ("oply" "optionally" nil 13)
    ("opn" "operation" nil 310)
    ("opnl" "operational" nil 7)
    ("opns" "operations" nil 449)
    ("opr" "operator" nil 221)
    ("oprl" "operational" nil 62)
    ("oprly" "operationally" nil 10)
    ("oprs" "operators" nil 159)
    ("optg" "operating" nil 14)
    ("ordg" "ordering" nil 20)
    ("ot" "to" nil 101)
    ("otoh" "on the other hand" nil 386)
    ("otp" "object-type" nil 16)
    ("otps" "object-types" nil 9)
    ("otu" "out" nil 4)
    ("ovn" "observation" nil 1)
    ("ovns" "observations" nil 0)
    ("ovw" "overview" nil 23)
    ("owrk" "work" nil 4)
    ("ows" "otherwise" nil 381)
    ("oz" "optimize" nil 104)
    ("ozby" "optimizability" nil 3)
    ("ozd" "optimized" nil 112)
    ("ozg" "optimizing" nil 46)
    ("ozn" "optimization" nil 378)
    ("ozns" "optimizations" nil 110)
    ("ozr" "optimizer" nil 1)
    ("ozs" "optimizes" nil 4)
    ("p'a" #("partial application" 0 8 (fontified t) 8 19 (fontified t)) nil 1)
    ("p'a'p" "proofs as programs" nil 3)
    ("p'a't" "propositions as types" nil 1)
    ("p'as" #("partial applications" 0 8 (fontified t) 8 20 (fontified t)) nil 0)
    ("p'b" "pattern binder" nil 0)
    ("p'c" "predicate calculus" nil 6)
    ("p'd" "program derivation" nil 12)
    ("p'ds" "program derivations" nil 0)
    ("p'e" "partial evaluation" nil 52)
    ("p'ed" "partial evaluated" nil 1)
    ("p'f" "partial function" nil 19)
    ("p'fs" "partial functions" nil 19)
    ("p'l" "programming language" nil 120)
    ("p'l'c" "polymorphic lambda calculus" nil 13)
    ("p'lc" "programmable logic" nil 1)
    ("p'ls" "programming languages" nil 71)
    ("p'm" "pattern matching" nil 44)
    ("p'o" "partial order" nil 22)
    ("p'o'v" "point of view" nil 33)
    ("p'o'vs" "points of view" nil 0)
    ("p'p" "parametric polymorphism" nil 2)
    ("p'p't" "pair-producing type" nil 7)
    ("p'p'ts" "pair-producing types" nil 5)
    ("p'p'v" "pair-producing variable" nil 7)
    ("p'p'vs" "pair-producing variables" nil 6)
    ("p'ps" "progressive pairs" nil 1)
    ("p'r" "primitive recursion" nil 15)
    ("p's" "program synthesis" nil 29)
    ("p'ss" "program syntheses" nil 1)
    ("p'st" "proper subterm" nil 1)
    ("p'v" "program verification" nil 11)
    ("p'x" "program transformation" nil 89)
    ("p'xs" "program transformations" nil 4)
    ("p-eg" "partially evaluating" nil 0)
    ("pagm" "pre-algorithm" nil 38)
    ("pagms" "pre-algorithms" nil 12)
    ("pari" "pair" nil 9)
    ("pbl" "possible" nil 764)
    ("pbm" "problem" nil 1391)
    ("pbmc" "problematic" nil 56)
    ("pbms" "problems" nil 302)
    ("pbty" "possibility" nil 190)
    ("pbtys" "possibilities" nil 190)
    ("pbvr" "proto-behavior" nil 1)
    ("pbvrs" "proto-behaviors" nil 2)
    ("pby" "possibly" nil 299)
    ("pcdn" "precondition" nil 5)
    ("pcdns" "preconditions" nil 1)
    ("pcls" "protocols" nil 1)
    ("pcr" "processor" nil 3)
    ("pdfd" "predefined" nil 7)
    ("pdn" "predomain" nil 12)
    ("pdns" "predomains" nil 16)
    ("pdt" "predicate" nil 228)
    ("pdts" "predicates" nil 47)
    ("perhpas" "perhaps" nil 20)
    ("pf" "proof" nil 32)
    ("pfc" "preference" nil 66)
    ("pfcs" "preferences" nil 36)
    ("pfmc" "performance" nil 1)
    ("pfs" "proofs" nil 122)
    ("pgm" "program" nil 885)
    ("pgmc" "programmatic" nil 9)
    ("pgmcy" "programmatically" nil 2)
    ("pgmd" "programmed" nil 15)
    ("pgmg" "programming" nil 755)
    ("pgml" "programmable" nil 5)
    ("pgmr" "programmer" nil 136)
    ("pgmrs" "programmers" nil 99)
    ("pgms" "programs" nil 431)
    ("pha" "polyhedra" nil 1)
    ("phn" "polyhedron" nil 20)
    ("phns" "polyhedra" nil 6)
    ("pjn" "projection" nil 71)
    ("pjns" "projections" nil 90)
    ("pjr" "projector" nil 2)
    ("pjrs" "projectors" nil 0)
    ("pjt" "project" nil 366)
    ("pjtd" "projected" nil 1)
    ("pjtg" "projecting" nil 5)
    ("pjtr" "projector" nil 2)
    ("pjtrs" "projectors" nil 1)
    ("pjts" "projects" nil 78)
    ("pjv" "projective" nil 3)
    ("pll" "parallel" nil 172)
    ("pllm" "parallelism" nil 55)
    ("plln" "parallelization" nil 6)
    ("pllz" "parallelize" nil 8)
    ("pmc" "polymorphic" nil 174)
    ("pmcy" "polymorphically" nil 4)
    ("pmgr" "programmer" nil 1)
    ("pmm" "polymorphism" nil 293)
    ("pmn" "permutation" nil 17)
    ("pmns" "permutations" nil 6)
    ("pmr" "parameter" nil 180)
    ("pmrs" "parameters" nil 231)
    ("pnc" "permanence" nil 14)
    ("pns" "polyhedra" nil 24)
    ("pnt" "permanent" nil 19)
    ("pnty" "permanently" nil 2)
    ("poitn" "point" nil 1)
    ("poitns" "points" nil 4)
    ("pordg" "preordering" nil 2)
    ("ppn" "proposition" nil 112)
    ("ppns" "propositions" nil 20)
    ("pptys" "properties" nil 4)
    ("pr" "pair" nil 127)
    ("pr'd" "probability distribution" nil 0)
    ("pr'ds" "probability distributions" nil 1)
    ("prby" "probably" nil 1183)
    ("prpr" "pair-pair" nil 2)
    ("prs" "pairs" nil 92)
    ("prtc" "probabilistic" nil 12)
    ("prtcy" #("probabilistically" 0 17 (fontified t)) nil 0)
    ("prty" "probability" nil 26)
    ("prtys" "probabilities" nil 1)
    ("psn" "position" nil 249)
    ("psnl" "positional" nil 3)
    ("psns" "positions" nil 29)
    ("psv" "positive" nil 69)
    ("psvs" "positives" nil 3)
    ("psvy" "positively" nil 5)
    ("pt" "point" nil 856)
    ("pt'f" "point-free" nil 2)
    ("ptc" "parametric" nil 47)
    ("ptcr" "particular" nil 1)
    ("ptcy" "parametrically" nil 16)
    ("ptd" "pointed" nil 207)
    ("ptg" "pointing" nil 47)
    ("ptl" "partial" nil 125)
    ("ptly" "partially" nil 36)
    ("ptn" "pattern" nil 397)
    ("ptns" "patterns" nil 289)
    ("ptr" "pointer" nil 184)
    ("ptrs" "pointers" nil 95)
    ("pts" "points" nil 263)
    ("ptv" "primitive" nil 216)
    ("ptvs" "primitives" nil 201)
    ("ptvy" "primitively" nil 2)
    ("pty" "property" nil 391)
    ("ptys" "properties" nil 324)
    ("pufby" "pre-unifiability" nil 2)
    ("pufl" "pre-unifiable" nil 1)
    ("pufn" "pre-unification" nil 69)
    ("pufr" "pre-unifier" nil 22)
    ("pufrs" "pre-unifiers" nil 27)
    ("pufy" "pre-unify" nil 1)
    ("pv" "prove" nil 196)
    ("pvbl" "provable" nil 5)
    ("pvbty" "provability" nil 4)
    ("pvby" "provably" nil 4)
    ("pvd" "proved" nil 71)
    ("pvg" "proving" nil 56)
    ("pvr" "prover" nil 17)
    ("pvrs" "provers" nil 6)
    ("pvs" "previous" nil 464)
    ("pvsy" "previously" nil 68)
    ("pvt" "private" nil 0)
    ("pvw" "preview" nil 5)
    ("pz" "parametrize" nil 31)
    ("pzd" "parametrized" nil 120)
    ("pzg" "parametrizing" nil 6)
    ("pzn" "parametrization" nil 49)
    ("pzns" "parametrizations" nil 0)
    ("pzs" "parametrizes" nil 1)
    ("qbl" "questionable" nil 8)
    ("qfd" "quantified" nil 51)
    ("qfg" "quantifying" nil 3)
    ("qfn" "quantification" nil 44)
    ("qfns" "quantifications" nil 0)
    ("qfr" "quantifier" nil 38)
    ("qfrs" "quantifiers" nil 70)
    ("qfs" "quantifies" nil 1)
    ("qfy" "quantify" nil 11)
    ("qfyd" "quantified" nil 0)
    ("qlfn" "qualification" nil 1)
    ("qlfns" "qualifications" nil 0)
    ("qlfr" "qualifier" nil 2)
    ("qlfrs" "qualifiers" nil 0)
    ("qlty" "quality" nil 6)
    ("qltys" "qualities" nil 0)
    ("qn" "question" nil 670)
    ("qnd" "questioned" nil 2)
    ("qng" "questioning" nil 0)
    ("qns" "questions" nil 298)
    ("qt" "quote" nil 10)
    ("qtn" "quaternion" nil 4)
    ("qtns" "quaternions" nil 1)
    ("qts" "quotes" nil 2)
    ("qty" "quantity" nil 2)
    ("qtys" "quantities" nil 3)
    ("qvc" "equivalence" nil 28)
    ("qvcs" "equivalences" nil 5)
    ("qvt" "equivalent" nil 121)
    ("qvty" "equivalently" nil 52)
    ("r'a'p" "reasoning about programs" nil 2)
    ("r'b" "reactive behavior" nil 17)
    ("r'bs" "reactive behaviors" nil 29)
    ("r'd'd't" "recursively defined data type" nil 2)
    ("r'd'd'ts" "recursively defined data types" nil 2)
    ("r'e" "regular expression" nil 2)
    ("r'es" "regular expressions" nil 1)
    ("r'h's" "right-hand side" nil 21)
    ("r'h'ss" "right-hand sides" nil 20)
    ("r'n'f" "reactive normal form" nil 3)
    ("r'o" "rigid object" nil 0)
    ("r'os" "rigid objects" nil 0)
    ("r'p'c" "rigid-path-check" nil 2)
    ("r'r" "rewrite rule" nil 55)
    ("r'rs" "rewrite rules" nil 81)
    ("r't" "referentially transparent" nil 10)
    ("r't's" "run-time system" nil 6)
    ("r'ty" "referential transparency" nil 10)
    ("r'v" "reactive value" nil 24)
    ("r'vs" "reactive values" nil 56)
    ("r'w" "roughly well-typed" nil 2)
    ("rarrow'" "→" nil 13)
    ("rbly" "arbitrarily" nil 28)
    ("rbml" "RBML" nil 85)
    ("rby" "arbitrary" nil 194)
    ("rcbn" "recombination" nil 1)
    ("rcd" "recommended" nil 2)
    ("rcn" "recursion" nil 166)
    ("rcns" "recursions" nil 18)
    ("rcptn" "recomputation" nil 3)
    ("rcst" "reconstruct" nil 0)
    ("rcsts" "reconstructs" nil 0)
    ("rcv" "recursive" nil 366)
    ("rcvy" "recursively" nil 103)
    ("rd" "rigid" nil 119)
    ("rdby" "reducibility" nil 1)
    ("rdc" "reduce" nil 130)
    ("rdcd" "reduced" nil 32)
    ("rdcg" "reducing" nil 49)
    ("rdcl" "reducible" nil 1)
    ("rdcs" "reduces" nil 23)
    ("rdf" "redefine" nil 18)
    ("rdfd" "redefined" nil 7)
    ("rdfl" "rigid-flexible" nil 54)
    ("rdfn" "redefinition" nil 3)
    ("rdfs" "redefines" nil 0)
    ("rdn" "reduction" nil 178)
    ("rdns" "reductions" nil 37)
    ("rdrd" "rigid-rigid" nil 150)
    ("rfc" "reference" nil 236)
    ("rfcd" "referenced" nil 10)
    ("rfcs" "references" nil 195)
    ("rfd" "reified" nil 9)
    ("rfg" "reifying" nil 12)
    ("rfl" "referential" nil 8)
    ("rfmn" "reformulation" nil 4)
    ("rfmt" "reformulate" nil 6)
    ("rfmtg" "reformulating" nil 1)
    ("rfn" "reification" nil 93)
    ("rfns" "reifications" nil 1)
    ("rfr" "reifier" nil 1)
    ("rfs" "reifies" nil 3)
    ("rfy" "reify" nil 24)
    ("rgt" "right" nil 3)
    ("rgz" "recognize" nil 2)
    ("rjn" "rejection" nil 1)
    ("rl" "rule" nil 292)
    ("rlcn" "relocation" nil 31)
    ("rlcns" "relocations" nil 1)
    ("rln" "relation" nil 235)
    ("rlnl" "relational" nil 14)
    ("rlns" "relations" nil 78)
    ("rlp" "relationship" nil 176)
    ("rlps" "relationships" nil 55)
    ("rls" "rules" nil 320)
    ("rpbl" "representable" nil 1)
    ("rpc" "replace" nil 498)
    ("rpcd" "replaced" nil 162)
    ("rpcg" "replacing" nil 159)
    ("rpcs" "replaces" nil 29)
    ("rpct" "replacement" nil 53)
    ("rpcts" "replacements" nil 7)
    ("rpn" "representation" nil 980)
    ("rpnl" "representational" nil 5)
    ("rpns" "representations" nil 297)
    ("rpt" "represent" nil 313)
    ("rptbl" "representable" nil 1)
    ("rptd" "represented" nil 177)
    ("rptg" "representing" nil 121)
    ("rpts" "represents" nil 46)
    ("rptv" "representative" nil 3)
    ("rpv" "respective" nil 2)
    ("rpvy" "respectively" nil 35)
    ("rqd" "required" nil 185)
    ("rqg" "requiring" nil 21)
    ("rqr" "require" nil 268)
    ("rqrd" "required" nil 17)
    ("rqrg" "requiring" nil 37)
    ("rqrs" "requires" nil 258)
    ("rqt" "requirement" nil 103)
    ("rqts" "requirements" nil 91)
    ("rsn" "resolution" nil 129)
    ("rsns" "resolutions" nil 5)
    ("rtn" "rotation" nil 76)
    ("rtnl" "rotational" nil 3)
    ("rtns" "rotations" nil 17)
    ("rvlt" "re-evaluate" nil 2)
    ("rvltd" "re-evaluated" nil 0)
    ("rvn" "revolution" nil 1)
    ("rvns" "revolutions" nil 0)
    ("rvy" "respectively" nil 64)
    ("s'a" "such as" nil 236)
    ("s'c" "sufficient condition" nil 24)
    ("s'cs" "sufficient conditions" nil 0)
    ("s'ctn" "success continuation" nil 62)
    ("s'ctns" "success continuations" nil 22)
    ("s'e" "side-effect" nil 12)
    ("s'e'c" "semantic editor combinator" nil 5)
    ("s'e'cs" "semantic editor combinators" nil 6)
    ("s'ec" "syntactic equivalence" nil 4)
    ("s'eg" "software engineering" nil 8)
    ("s'es" "side-effects" nil 16)
    ("s'f" "solved form" nil 31)
    ("s'i" "structural induction" nil 16)
    ("s'j" "syntactic judgment" nil 4)
    ("s'js" "syntactic judgments" nil 1)
    ("s'm" "state machine" nil 0)
    ("s'ms" "state machines" nil 0)
    ("s'n" "strong normalization" nil 26)
    ("s'ng" "strongly normalizing" nil 7)
    ("s'nz" "strongly normalize" nil 4)
    ("s'nzs" "strongly normalizes" nil 0)
    ("s'o" "second-order" nil 55)
    ("s'o'm" "second-order matching" nil 10)
    ("s'o'u" "second-order unification" nil 3)
    ("s'p" "special purpose" nil 11)
    ("s'p'o" "strict partial order" nil 8)
    ("s'p'os" "strict partial orders" nil 0)
    ("s'ps" "special predicates" nil 1)
    ("s'r" "simplification rule" nil 3)
    ("s'rs" "simplification rules" nil 2)
    ("s't" "such that" nil 247)
    ("s't'c" "simply typed calculus" nil 4)
    ("s't'l'c" "simply typed lambda-calculus" nil 24)
    ("s't'l's" "same top level structure" nil 2)
    ("s't'm" "space-time model" nil 6)
    ("s't'ms" "space-time models" nil 10)
    ("s'td" "simply typed" nil 25)
    ("s'tp" "simple type" nil 1)
    ("s'tps" "simple types" nil 1)
    ("s'v" "scientific visualization" nil 1)
    ("s'x" "specification transformation" nil 5)
    ("s'xs" "specification transformations" nil 0)
    ("sb'i" "substitution instance" nil 0)
    ("sb'is" "substitution instances" nil 1)
    ("sbn" "substitution" nil 643)
    ("sbns" "substitutions" nil 309)
    ("sbt" "substitute" nil 66)
    ("sbtd" "substituted" nil 27)
    ("sbtg" "substituting" nil 31)
    ("sbtn" "subtraction" nil 1)
    ("sbts" "substitutes" nil 4)
    ("sbty" "substitutivity" nil 1)
    ("sbv" "substitutive" nil 22)
    ("sbvy" "substitutivity" nil 9)
    ("scg" "scg" nil 2)
    ("scn" "section" nil 703)
    ("scns" "sections" nil 78)
    ("scs" "synchronous" nil 13)
    ("scsy" "synchronously" nil 4)
    ("scz" "synchronize" nil 4)
    ("sczd" "synchronized" nil 6)
    ("sczn" "synchronization" nil 55)
    ("sczs" "synchronizes" nil 0)
    ("sd" "second" nil 937)
    ("sds" "seconds" nil 25)
    ("sdvn" "subderivation" nil 1)
    ("sdy" "secondly" nil 2)
    ("sfc" "specific" nil 257)
    ("sfcs" "specifics" nil 27)
    ("sfcy" "specifically" nil 127)
    ("sfn" "specification" nil 527)
    ("sfns" "specifications" nil 187)
    ("sft" "sufficient" nil 55)
    ("sfty" "sufficiently" nil 28)
    ("sfy" "specify" nil 180)
    ("sfyd" "specified" nil 148)
    ("sfyg" "specifying" nil 68)
    ("sfyr" "specifier" nil 4)
    ("sfyrs" "specifiers" nil 0)
    ("sfys" "specifies" nil 21)
    ("sg" "something" nil 1205)
    ("sgr" "signature" nil 129)
    ("sgrs" "signatures" nil 69)
    ("siad" "said" nil 12)
    ("sicne" "since" nil 34)
    ("simeq'" "≃" nil 1)
    ("simlify" "simplify" nil 1)
    ("sivl" #("subinterval" 0 3 (fontified t) 3 11 (fontified t)) nil 1)
    ("sivls" #("subintervals" 0 3 (fontified t) 3 12 (fontified t)) nil 2)
    ("sjt" "subject" nil 31)
    ("sjtd" "subjected" nil 3)
    ("sjts" "subjects" nil 1)
    ("sjv" "subjective" nil 11)
    ("sjvy" "subjectively" nil 7)
    ("slcn" "selection" nil 10)
    ("sln" "solution" nil 480)
    ("slns" "solutions" nil 135)
    ("smc" "semantic" nil 371)
    ("smcs" "semantics" nil 811)
    ("smcy" "semantically" nil 106)
    ("smn" "simplification" nil 208)
    ("smns" "simplifications" nil 43)
    ("smy" "simplify" nil 285)
    ("smyd" "simplified" nil 109)
    ("smyg" "simplifying" nil 84)
    ("smyr" "simplifier" nil 20)
    ("smyrs" "simplifiers" nil 1)
    ("smys" "simplifies" nil 66)
    ("snc" "synthetic" nil 70)
    ("sncy" "synthetically" nil 2)
    ("sns" "synthesis" nil 120)
    ("snss" "syntheses" nil 5)
    ("snz" "synthesize" nil 51)
    ("snzd" "synthesized" nil 18)
    ("snzg" "synthesizing" nil 16)
    ("snzs" "synthesizes" nil 0)
    ("soem" "some" nil 38)
    ("spbm" "subproblem" nil 1)
    ("spbms" "subproblems" nil 4)
    ("spl" "special" nil 325)
    ("spls" "specials" nil 5)
    ("sply" "specially" nil 21)
    ("spt" "separate" nil 3)
    ("sql" "sequential" nil 152)
    ("sqly" "sequentially" nil 6)
    ("sqn" "sequence" nil 374)
    ("sqns" "sequences" nil 141)
    ("sqty" "sequentiality" nil 91)
    ("ssg" "structure-sharing" nil 25)
    ("stc" "syntactic" nil 81)
    ("stcly" "syntactically" nil 0)
    ("stcy" "syntactically" nil 14)
    ("std" "standard" nil 372)
    ("stds" "standards" nil 6)
    ("stdz" "standardize" nil 4)
    ("stdzn" "standardization" nil 1)
    ("stfd" "satisfied" nil 28)
    ("stfg" "satisfying" nil 41)
    ("stfl" "satisfiable" nil 6)
    ("stfn" "satisfaction" nil 22)
    ("stfs" "satisfies" nil 20)
    ("stfy" "satisfy" nil 70)
    ("stm" "system" nil 468)
    ("stmc" "systematic" nil 21)
    ("stmcy" "systematically" nil 15)
    ("stms" "systems" nil 273)
    ("stmt" "statement" nil 88)
    ("stmts" "statements" nil 41)
    ("sty" "satisfy" nil 52)
    ("styd" "satisfied" nil 33)
    ("styg" "satisfying" nil 21)
    ("stys" "satisfies" nil 13)
    ("svl" "several" nil 429)
    ("sx" "syntax" nil 391)
    ("sxn" "subexpression" nil 3)
    ("sxns" "subexpressions" nil 0)
    ("sxpn" "s-expression" nil 3)
    ("sz" "specialize" nil 150)
    ("szd" "specialized" nil 150)
    ("szg" "specializing" nil 28)
    ("szn" "specialization" nil 109)
    ("szns" "specializations" nil 37)
    ("szr" "specializer" nil 9)
    ("szs" "specializes" nil 117)
    ("t'c" "type checking" nil 64)
    ("t'c'm" "type class morphism" nil 16)
    ("t'c'ms" "type class morphisms" nil 22)
    ("t'cl" "type class" nil 1)
    ("t'd" "temporal deviation" nil 2)
    ("t'f" "the following" nil 1116)
    ("t'f'p" "tangible functional programming" nil 2)
    ("t'i" "type inference" nil 176)
    ("t'id" "type-instantiated" nil 9)
    ("t'in" "type-instantiation" nil 4)
    ("t'itd" "tolerably ill-typed" nil 5)
    ("t'itds" "tolerable ill-typedness" nil 0)
    ("t'l" "term language" nil 73)
    ("t'l'c" "typed lambda calculus" nil 66)
    ("t'l'cs" "typed lambda-calculi" nil 4)
    ("t'l'i" "term language interface" nil 2)
    ("t'l's" "top level structure" nil 28)
    ("t'ls" "term languages" nil 4)
    ("t'o" "third-order" nil 13)
    ("t'ocn" "term-occurence" nil 2)
    ("t'ocns" "term-occurrences" nil 1)
    ("t'p" "theorem proving" nil 94)
    ("t'pr" "theorem prover" nil 3)
    ("t'r" "tail recursive" nil 3)
    ("t't" "time transform" nil 25)
    ("t'td" "time transformed" nil 0)
    ("t'tn" "time transformation" nil 22)
    ("t'tns" "time transformations" nil 3)
    ("t'ts" "time transforms" nil 9)
    ("t'v" "type variable" nil 51)
    ("t'vs" "type variables" nil 114)
    ("ta'v" "tangible value" nil 5)
    ("ta'vs" "tangible values" nil 8)
    ("taht" "that" nil 28)
    ("tcl" "technical" nil 175)
    ("tcly" "technically" nil 10)
    ("tcy" "technology" nil 92)
    ("tcys" "technologies" nil 5)
    ("td" "third" nil 106)
    ("teh" "the" nil 585)
    ("tfr" "therefore" nil 140)
    ("theri" "their" nil 3)
    ("thm" "theorem" nil 66)
    ("thms" "theorems" nil 38)
    ("thsi" "this" nil 100)
    ("thta" "that" nil 19)
    ("thy" "theory" nil 162)
    ("thys" "theories" nil 18)
    ("tiem" "time" nil 61)
    ("tiems" "times" nil 8)
    ("times'" "×" nil 11)
    ("tm" "term" nil 1175)
    ("tm'i" "term inference" nil 25)
    ("tmgy" "terminology" nil 12)
    ("tmn" "termination" nil 65)
    ("tms" "terms" nil 1161)
    ("tmt" "terminate" nil 27)
    ("tmtd" "terminated" nil 13)
    ("tmtg" "terminating" nil 10)
    ("tmts" "terminates" nil 10)
    ("tmv" "term-variable" nil 1)
    ("tnq" "technique" nil 179)
    ("tnqs" "techniques" nil 141)
    ("top'" "⊤" nil 1)
    ("tp" "type" nil 5148)
    ("tpbl" "typable" nil 1)
    ("tpd" "typed" nil 323)
    ("tpg" "typing" nil 298)
    ("tpgs" "typings" nil 17)
    ("tpl" "tuple" nil 11)
    ("tps" "types" nil 2150)
    ("tptp" "type-type" nil 4)
    ("tr'c" "transitive closure" nil 2)
    ("u'c" "unification context" nil 36)
    ("u'cs" "unification contexts" nil 3)
    ("u'e" "unification equivalent" nil 5)
    ("u'i" "user interface" nil 21)
    ("u'in" "user interaction" nil 1)
    ("u'is" "user interfaces" nil 4)
    ("u'l" "unification logic" nil 5)
    ("u'p" "unification problem" nil 151)
    ("u'ps" "unification problems" nil 142)
    ("u'q" "universal quantification" nil 3)
    ("ucvtl" "unconventional" nil 3)
    ("udcbl" "undecidable" nil 6)
    ("udfd" "undefined" nil 614)
    ("ufby" "unifiability" nil 104)
    ("ufd" "unified" nil 62)
    ("ufg" "unifying" nil 84)
    ("ufl" "unifiable" nil 63)
    ("ufm" "uniform" nil 75)
    ("ufms" "uniforms" nil 1)
    ("ufmy" "uniformly" nil 5)
    ("ufn" "unification" nil 683)
    ("ufns" "unifications" nil 13)
    ("ufr" "unifier" nil 222)
    ("ufrs" "unifiers" nil 190)
    ("ufs" "unifies" nil 54)
    ("ufy" "unify" nil 105)
    ("ufys" "unifies" nil 2)
    ("uiprt" "unimportant" nil 10)
    ("uitg" "uninteresting" nil 5)
    ("uizd" "uninitialized" nil 2)
    ("uncly" "unnecessarily" nil 16)
    ("uncy" "unnecessary" nil 80)
    ("unq" "unique" nil 1)
    ("untl" "unnatural" nil 7)
    ("untly" "unnaturally" nil 0)
    ("usfbl" "unsatisfiable" nil 3)
    ("ustyg" "unsatisfying" nil 0)
    ("utpd" "untyped" nil 17)
    ("uvl" "universal" nil 134)
    ("uvls" "universals" nil 19)
    ("uvltd" "unevaluated" nil 3)
    ("uvly" "universally" nil 16)
    ("uvy" "universally" nil 12)
    ("v'b" "variable binding" nil 0)
    ("v'd" "virtual device" nil 8)
    ("v'ds" "virtual devices" nil 1)
    ("v'm" "virtual machine" nil 7)
    ("v'p" "view point" nil 5)
    ("v'r" "virtual reality" nil 5)
    ("v's" "vector space" nil 13)
    ("v'ss" "vector spaces" nil 16)
    ("v't" "virtual trackball" nil 9)
    ("v'w" "virtual world" nil 14)
    ("v'ws" "virtual worlds" nil 9)
    ("v'x" "viewing transform" nil 18)
    ("v'xs" "viewing transforms" nil 2)
    ("vbl" "variable" nil 834)
    ("vbls" "variables" nil 779)
    ("vfcn" "verification" nil 2)
    ("vfd" "verified" nil 11)
    ("vfg" "verifying" nil 3)
    ("vfl" "verifiable" nil 0)
    ("vfn" "verification" nil 35)
    ("vfy" "verify" nil 29)
    ("vfyd" "verified" nil 5)
    ("vfyg" "verifying" nil 0)
    ("vfys" "verifies" nil 2)
    ("vln" "evaluation" nil 267)
    ("vlns" "evaluations" nil 22)
    ("vlt" "evaluate" nil 73)
    ("vltd" "evaluated" nil 51)
    ("vltg" "evaluating" nil 30)
    ("vlts" "evaluates" nil 17)
    ("vpt" "viewpoint" nil 11)
    ("vpts" "viewpoints" nil 0)
    ("vrml" "VRML" nil 23)
    ("vsl" "visual" nil 3)
    ("vsn" "version" nil 922)
    ("vsns" "versions" nil 195)
    ("vtm" "variable-term" nil 39)
    ("vtp" "variable-type" nil 3)
    ("vvtm" "virtual-variable-term" nil 0)
    ("vz" "visualize" nil 12)
    ("vzd" "visualized" nil 4)
    ("vzg" "visualizing" nil 9)
    ("vzn" "visualization" nil 31)
    ("vzns" "visualizations" nil 18)
    ("vzr" "visualizer" nil 1)
    ("vzrs" "visualizers" nil 2)
    ("vzs" "visualizes" nil 0)
    ("w'c" "world coordinate" nil 3)
    ("w'cs" "world coordinates" nil 1)
    ("w'd" "well-defined" nil 0)
    ("w'f" "well formed" nil 12)
    ("w'f'o" "well founded ordering" nil 7)
    ("w'f'os" "well founded orderings" nil 1)
    ("w'fs" "well formedness" nil 3)
    ("w'h'n'f" "weak head normal form" nil 10)
    ("w'h'r" "weak head reduction" nil 1)
    ("w'l'g" "without loss of generality" nil 6)
    ("w'p" "word processing" nil 3)
    ("w'r't" "with respect to" nil 98)
    ("w'v" "weakly valid" nil 2)
    ("w'w" "with which" nil 3)
    ("waht" "what" nil 20)
    ("wasnt" "wasn't" nil 4)
    ("wch" "which" nil 4393)
    ("wdfd" "well-defined" nil 20)
    ("wh" "with" nil 11401)
    ("whehter" "whether" nil 4)
    ("whn" "within" nil 5)
    ("wiht" "with" nil 2)
    ("wkdd" "well-kinded" nil 7)
    ("wnat" "want" nil 7)
    ("wo" "without" nil 1043)
    ("woudl" "would" nil 17)
    ("wouldnt" "wouldn't" nil 0)
    ("wrok" "work" nil 11)
    ("wroking" "working" nil 2)
    ("wtbl" "well-typable" nil 1)
    ("wtd" "well-typed" nil 293)
    ("wtds" "well-typedness" nil 31)
    ("x'p" "transformation path" nil 3)
    ("x'ps" "transformation paths" nil 1)
    ("x'r" "transformation rule" nil 29)
    ("x'rs" "transformation rules" nil 72)
    ("x's" "transformation system" nil 7)
    ("xcv" "exclusive" nil 2)
    ("xfbl" "transformable" nil 3)
    ("xfd" "transformed" nil 56)
    ("xfg" "transforming" nil 51)
    ("xfl" "transformational" nil 12)
    ("xfm" "transform" nil 447)
    ("xfmd" "transformed" nil 10)
    ("xfmg" "transforming" nil 11)
    ("xfmr" "transformer" nil 2)
    ("xfms" "transforms" nil 140)
    ("xfn" "transformation" nil 686)
    ("xfnl" "transformational" nil 4)
    ("xfns" "transformations" nil 291)
    ("xfr" "transformer" nil 39)
    ("xfrs" "transformers" nil 15)
    ("xln" "translation" nil 271)
    ("xlns" "translations" nil 24)
    ("xlt" "translate" nil 136)
    ("xltd" "translated" nil 34)
    ("xltg" "translating" nil 35)
    ("xltn" "translation" nil 2)
    ("xltr" "translator" nil 12)
    ("xlts" "translates" nil 9)
    ("xn" "transition" nil 128)
    ("xnl" "transitional" nil 1)
    ("xns" "transitions" nil 32)
    ("xpl" "example" nil 1008)
    ("xpln" "explanation" nil 154)
    ("xplns" "explanations" nil 10)
    ("xpls" "examples" nil 627)
    ("xpn" "expression" nil 613)
    ("xpnl" "exponential" nil 0)
    ("xpns" "expressions" nil 493)
    ("xps" "express" nil 173)
    ("xpsd" "expressed" nil 116)
    ("xpsg" "expressing" nil 45)
    ("xpsl" "expressible" nil 0)
    ("xpss" "expresses" nil 2)
    ("xpsv" "expressive" nil 12)
    ("xpv" "expressive" nil 37)
    ("xpvs" "expressiveness" nil 16)
    ("xrl" "external" nil 90)
    ("xrly" "externally" nil 9)
    ("xrz" "externalize" nil 7)
    ("xrzd" "externalized" nil 1)
    ("xrzg" "externalizing" nil 0)
    ("xrzn" "externalization" nil 8)
    ("xrzs" "externalizes" nil 0)
    ("xsl" "extensional" nil 8)
    ("xsly" "extensionally" nil 0)
    ("xtbl" "extensible" nil 49)
    ("xtby" "extensibility" nil 23)
    ("xtc" "existence" nil 23)
    ("xtd" "extend" nil 172)
    ("xtdd" "extended" nil 85)
    ("xtdg" "extending" nil 70)
    ("xtds" "extends" nil 48)
    ("xtg" "existing" nil 145)
    ("xtl" "existential" nil 24)
    ("xtls" "existentials" nil 2)
    ("xtly" "existentially" nil 11)
    ("xtn" "extension" nil 215)
    ("xtns" "extensions" nil 134)
    ("xtv" "extensive" nil 7)
    ("xtvy" "extensively" nil 2)
   ))

(define-abbrev-table 'glsl-mode-abbrev-table '())

(define-abbrev-table 'grep-mode-abbrev-table '())

(define-abbrev-table 'haskell-cabal-mode-abbrev-table '())

(define-abbrev-table 'haskell-compilation-mode-abbrev-table '())

(define-abbrev-table 'haskell-debug-mode-abbrev-table '())

(define-abbrev-table 'haskell-error-mode-abbrev-table '())

(define-abbrev-table 'haskell-interactive-mode-abbrev-table '())

(define-abbrev-table 'haskell-mode-abbrev-table
  '(
    ("fo" "fo" nil 5)
   ))

(define-abbrev-table 'haskell-presentation-mode-abbrev-table '())

(define-abbrev-table 'help-mode-abbrev-table '())

(define-abbrev-table 'hs-lint-mode-abbrev-table '())

(define-abbrev-table 'html-mode-abbrev-table
  '(
    ("td" "td" nil 21)
   ))

(define-abbrev-table 'idl-mode-abbrev-table '())

(define-abbrev-table 'inferior-haskell-mode-abbrev-table '())

(define-abbrev-table 'java-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("finally" "finally" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'javascript-mode-abbrev-table '())

(define-abbrev-table 'js-mode-abbrev-table '())

(define-abbrev-table 'latex-mode-abbrev-table '())

(define-abbrev-table 'lisp-mode-abbrev-table
  '(
    ("mvb" "multiple-value-bind" nil 119)
    ("mvs" "multiple-value-setq" nil 3)
   ))

(define-abbrev-table 'literate-haskell-mode-abbrev-table '())

(define-abbrev-table 'log-view-mode-abbrev-table '())

(define-abbrev-table 'makefile-automake-mode-abbrev-table '())

(define-abbrev-table 'makefile-bsdmake-mode-abbrev-table '())

(define-abbrev-table 'makefile-gmake-mode-abbrev-table '())

(define-abbrev-table 'makefile-imake-mode-abbrev-table '())

(define-abbrev-table 'makefile-makepp-mode-abbrev-table '())

(define-abbrev-table 'makefile-mode-abbrev-table '())

(define-abbrev-table 'markdown-mode-abbrev-table
  '(
    ("b'r" "$\\beta$-reduce" nil 13)
    ("b'rd" "$\\beta$-reduced" nil 4)
    ("b'rg" "$\\beta$-reducing" nil 5)
    ("b'rn" "$\\beta$-reduction" nil 46)
    ("b'rns" "$\\beta$-reductions" nil 35)
    ("b'rx" "$\\beta$-redex" nil 43)
    ("b'rxs" "$\\beta$-redexes" nil 44)
    ("e'e" "$\\eta$-expand" nil 15)
    ("e'ed" "$\\eta$-expanded" nil 2)
    ("e'eg" "$\\eta$-expanding" nil 2)
    ("e'en" "$\\eta$-expansion" nil 19)
    ("e'ens" "$\\eta$-expansions" nil 18)
    ("e'r" "$\\eta$-reduce" nil 19)
    ("e'rd" "$\\eta$-reduced" nil 2)
    ("e'rg" "$\\eta$-reducing" nil 2)
    ("e'rn" "$\\eta$-reduction" nil 20)
    ("e'rns" "$\\eta$-reductions" nil 20)
    ("e'rx" "$\\eta$-redex" nil 31)
    ("e'rxs" "$\\eta$-redexes" nil 33)
    ("l'c" "$\\lambda$-calculus" nil 44)
    ("l'cs" "$\\lambda$ calculi" nil 10)
    ("t'l'c" "typed $\\lambda$-calculus" nil 36)
    ("t'l'cs" "typed $\\lambda$-calculi" nil 34)
   ))

(define-abbrev-table 'message-mode-abbrev-table '())

(define-abbrev-table 'messages-buffer-mode-abbrev-table '())

(define-abbrev-table 'network-connection-mode-abbrev-table '())

(define-abbrev-table 'nslookup-mode-abbrev-table '())

(define-abbrev-table 'objc-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 1)
   ))

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'org-mode-abbrev-table '())

(define-abbrev-table 'outline-mode-abbrev-table '())

(define-abbrev-table 'package-menu-mode-abbrev-table '())

(define-abbrev-table 'perl-mode-abbrev-table '())

(define-abbrev-table 'pike-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'plain-tex-mode-abbrev-table '())

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'ps-mode-abbrev-table '())

(define-abbrev-table 'ps-run-mode-abbrev-table '())

(define-abbrev-table 'ruby-mode-abbrev-table '())

(define-abbrev-table 'select-tags-table-mode-abbrev-table '())

(define-abbrev-table 'sgml-mode-abbrev-table '())

(define-abbrev-table 'sh-mode-abbrev-table '())

(define-abbrev-table 'shell-mode-abbrev-table '())

(define-abbrev-table 'slitex-mode-abbrev-table '())

(define-abbrev-table 'smbclient-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'speedbar-mode-abbrev-table '())

(define-abbrev-table 'tabulated-list-mode-abbrev-table '())

(define-abbrev-table 'tar-mode-abbrev-table '())

(define-abbrev-table 'tex-mode-abbrev-table
  '(
    ("a'cn" "$\\alpha$-conversion" nil 52)
    ("a'ec" "$\\alpha$-equivalence" nil 13)
    ("a'et" "$\\alpha$-equivalent" nil 5)
    ("b'cn" "$\\beta$-conversion" nil 3)
    ("b'nf" "$\\beta$ normal form" nil 31)
    ("b'r" "$\\beta$-reduce" nil 7)
    ("b'rd" "$\\beta$-reduced" nil 3)
    ("b'rn" "$\\beta$-reduction" nil 29)
    ("be'nf" "$\\beta\\eta$ normal form" nil 8)
    ("benf" "$\\beta\\eta$ normal form" nil 27)
    ("benfs" "$\\beta\\eta$ normal forms" nil 4)
    ("d't'l'c" "dependent typed $\\lambda$-calculus" nil 1)
    ("dq" "&\\dfq&" nil 6)
    ("e'e" "$\\eta$-expand" nil 11)
    ("e'ed" "$\\eta$-expanded" nil 2)
    ("e'en" "$\\eta$-expansion" nil 16)
    ("e'rn" "$\\eta$-reduction" nil 6)
    ("ith" "$i$th" nil 14)
    ("l'c" "$\\lambda$-calculus" nil 39)
    ("l'cs" "$\\lambda$ calculi" nil 9)
    ("l'cvby" "$\\lambda$-convertability" nil 4)
    ("l'ec" "$\\lambda$-equivalence" nil 2)
    ("l'm" "$\\lambda$-morphism" nil 3)
    ("l'ms" "$\\lambda$-morphisms" nil 3)
    ("lbehnf" "long $\\beta\\eta$ normal form" nil 8)
    ("lbenf" "long $\\beta\\eta$ normal form" nil 18)
    ("lbepnf" "long $\\beta\\eta$ product normal form" nil 3)
    ("lcvn" "$\\lambda$-conversion" nil 1)
    ("lfhnf" "$\\lambda$-free head normal form" nil 6)
    ("lpg" "$\\lambda$Prolog" nil 34)
    ("lppg" "$\\Lpi$Prolog" nil 1)
    ("ltm" "$\\lambda$-term" nil 1)
    ("ltms" "$\\lambda$-terms" nil 1)
    ("o'p'l'c" "$\\omega$-order polymorphic $\\lambda$-calculus" nil 7)
    ("p'l'c" "polymorphic $\\lambda$-calculus" nil 19)
    ("s't'l'c" "simply typed $\\lambda$-calculus" nil 43)
    ("t'l'c" "typed $\\lambda$-calculus" nil 34)
    ("t'l'cs" "typed $\\lambda$-calculi" nil 8)
   ))

(define-abbrev-table 'tex-shell-abbrev-table '())

(define-abbrev-table 'texinfo-mode-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'url-cookie-mode-abbrev-table '())

(define-abbrev-table 'vc-annotate-mode-abbrev-table '())

(define-abbrev-table 'vc-dired-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-edit-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-view-mode-abbrev-table '())

(define-abbrev-table 'vc-svn-log-view-mode-abbrev-table '())

(define-abbrev-table 'verilog-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'yaml-mode-abbrev-table '())

