;;-*-coding: utf-8;-*-
(define-abbrev-table 'agda2-mode-abbrev-table
  '(
    ("go=" "  begin
    ?
  ≡⟨⟩
    ?
  ≡⟨ ? ⟩
    ?
  ≡⟨⟩
    ?
  ∎" nil :count 260)
    ("go~" "  begin
    ?
  ≡⟨⟩
    ?
  ≈⟨ ? ⟩
    ?
  ≡⟨⟩
    ?
  ∎" nil :count 89)
   ))

(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement :count 0)
    ("else" "else" c-electric-continued-statement :count 0)
    ("while" "while" c-electric-continued-statement :count 0)
   ))

(define-abbrev-table 'c-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement :count 0)
    ("while" "while" c-electric-continued-statement :count 0)
   ))

(define-abbrev-table 'global-abbrev-table
  '(
    ("a'a" "axis-aligned" nil :count 5)
    ("a'b" "assign-behavior" nil :count 4)
    ("a'cn" "alpha conversion" nil :count 17)
    ("a'ct" "$\\alpha$-convert" nil :count 4)
    ("a'd" "automatic differentiation" nil :count 121)
    ("a'd't" "abstract data type" nil :count 21)
    ("a'd'ts" "abstract data types" nil :count 22)
    ("a'ect" "alpha-equivalence" nil :count 1)
    ("a'ett" "alpha-equivalent" nil :count 1)
    ("a'f" "as follows" nil :count 342)
    ("a'fr" "applicative functor" nil :count 0)
    ("a'g" "attribute grammar" nil :count 2)
    ("a'k'a" "also known as" nil :count 2)
    ("a'k'o" "a kind of" nil :count 1)
    ("a'l" "at least" nil :count 590)
    ("a'o't" "as opposed to" nil :count 66)
    ("a's" "abstract syntax" nil :count 138)
    ("a's't" "abstract syntax tree" nil :count 5)
    ("a's'ts" "abstract syntax trees" nil :count 10)
    ("a'st" "attribute state" nil :count 2)
    ("a't" "abstract type" nil :count 9)
    ("a't'p" "automated theorem proving" nil :count 3)
    ("a'v" "assign-value" nil :count 3)
    ("a'w" "at which" nil :count 20)
    ("a'w'a" "as well as" nil :count 4)
    ("a'w't" "at which time" nil :count 2)
    ("a'wk" "approximately well-kinded" nil :count 1)
    ("a'ws" "approximate well-typedness" nil :count 21)
    ("aa'bb" "axis-aligned bounding box" nil :count 1)
    ("aa'bbs" "axis-aligned bounding boxes" nil :count 2)
    ("ab'i" "abstract interpretation" nil :count 17)
    ("abd" "abstracted" nil :count 22)
    ("abn" "abstraction" nil :count 390)
    ("abns" "abstractions" nil :count 181)
    ("abotu" "about" nil :count 17)
    ("abt" "abstract" nil :count 487)
    ("abtd" "abstracted" nil :count 4)
    ("abtg" "abstracting" nil :count 17)
    ("abts" "abstracts" nil :count 16)
    ("abty" "abstractly" nil :count 18)
    ("acl" "acceptable" nil :count 72)
    ("actg" "accounting" nil :count 3)
    ("actgs" "accountings" nil :count 0)
    ("acy" "acceptability" nil :count 37)
    ("addn" "addition" nil :count 94)
    ("addns" "additions" nil :count 32)
    ("addny" "additionally" nil :count 6)
    ("adl" "additional" nil :count 3)
    ("adly" "additionally" nil :count 4)
    ("adn" "and" nil :count 532)
    ("adnl" "additional" nil :count 284)
    ("adnly" "additionally" nil :count 19)
    ("adny" "additionally" nil :count 3)
    ("adv" "additive" nil :count 3)
    ("advy" "additively" nil :count 0)
    ("agm" "algorithm" nil :count 954)
    ("agmc" "algorithmic" nil :count 34)
    ("agmcs" "algorithmics" nil :count 0)
    ("agmcy" "algorithmically" nil :count 7)
    ("agms" "algorithms" nil :count 494)
    ("agt" "argument" nil :count 1266)
    ("agts" "arguments" nil :count 822)
    ("ahve" "have" nil :count 58)
    ("ajn" "adjunction" nil :count 18)
    ("ajns" "adjunctions" nil :count 6)
    ("ala" "à la" nil :count 3)
    ("alc" "algebraic" nil :count 37)
    ("alcy" "algebraically" nil :count 1)
    ("alhpa" "alpha" nil :count 2)
    ("alt" "absolute" nil :count 97)
    ("altg" "alternating" nil :count 2)
    ("altt" "alternate" nil :count 69)
    ("altts" "alternates" nil :count 1)
    ("alty" "absolutely" nil :count 11)
    ("amn" "animation" nil :count 74)
    ("amns" "animations" nil :count 23)
    ("aot" "as opposed to" nil :count 7)
    ("aot'" "as opposed to" nil :count 7)
    ("ap'f" "applicative functor" nil :count 10)
    ("ap'fs" "applicative functors" nil :count 9)
    ("apbl" "applicable" nil :count 71)
    ("apby" "applicability" nil :count 34)
    ("apg" "applying" nil :count 393)
    ("aph" "approach" nil :count 1121)
    ("aphd" "approached" nil :count 6)
    ("aphg" "approaching" nil :count 8)
    ("aphs" "approaches" nil :count 113)
    ("apn" "application" nil :count 1143)
    ("apns" "applications" nil :count 531)
    ("appt" "appropriate" nil :count 18)
    ("appty" "appropriately" nil :count 1)
    ("aps" "applies" nil :count 86)
    ("apv" "applicative" nil :count 807)
    ("apvl" "approval" nil :count 4)
    ("apvs" "applicatives" nil :count 24)
    ("apvy" "applicatively" nil :count 4)
    ("apy" "apply" nil :count 1019)
    ("apyd" "applied" nil :count 393)
    ("apys" "applies" nil :count 141)
    ("arent" "aren't" nil :count 38)
    ("asap'" "as soon as possible" nil :count 2)
    ("asct" "associate" nil :count 4)
    ("asg" "assigning" nil :count 27)
    ("asgd" "assigned" nil :count 16)
    ("asgt" "assignment" nil :count 92)
    ("asgts" "assignments" nil :count 28)
    ("asmn" "assumption" nil :count 151)
    ("asmns" "assumptions" nil :count 62)
    ("asn" "association" nil :count 59)
    ("asns" "associations" nil :count 11)
    ("asrn" "assertion" nil :count 3)
    ("asrns" "assertions" nil :count 0)
    ("ast" "associate" nil :count 81)
    ("astd" "associated" nil :count 344)
    ("astg" "associating" nil :count 21)
    ("astn" "association" nil :count 2)
    ("asts" "associates" nil :count 21)
    ("asty" "associativity" nil :count 17)
    ("asv" "associative" nil :count 111)
    ("asvy" "associativity" nil :count 103)
    ("at's" "attribute state" nil :count 0)
    ("ata" "automata" nil :count 60)
    ("atc" "automatic" nil :count 129)
    ("atcy" "automatically" nil :count 258)
    ("atn" "automaton" nil :count 85)
    ("atr" "architecture" nil :count 141)
    ("atrl" "architectural" nil :count 3)
    ("atrs" "architectures" nil :count 49)
    ("att" "attribute" nil :count 248)
    ("attd" "attributed" nil :count 13)
    ("attr" "attr" nil :count 85)
    ("atts" "attributes" nil :count 222)
    ("aufn" "anti-unification" nil :count 4)
    ("aufr" "anti-unifier" nil :count 1)
    ("aufrs" "anti-unifiers" nil :count 0)
    ("avn" "abbreviation" nil :count 45)
    ("avns" "abbreviations" nil :count 22)
    ("avt" "abbreviate" nil :count 12)
    ("avtd" "abbreviated" nil :count 8)
    ("avtg" "abbreviating" nil :count 0)
    ("avts" "abbreviates" nil :count 3)
    ("axg" "approximating" nil :count 26)
    ("axm" "axiom" nil :count 4)
    ("axms" "axioms" nil :count 22)
    ("axn" "approximation" nil :count 219)
    ("axns" "approximations" nil :count 100)
    ("axt" "approximate" nil :count 107)
    ("axtd" "approximated" nil :count 14)
    ("axtg" "approximating" nil :count 7)
    ("axts" "approximates" nil :count 12)
    ("axty" "approximately" nil :count 5)
    ("axy" "approximately" nil :count 11)
    ("b'b" "bounding box" nil :count 10)
    ("b'bs" "bounding boxes" nil :count 13)
    ("b'cn" "beta-conversion" nil :count 3)
    ("b'f" "breadth-first" nil :count 7)
    ("b'f's" "breadth-first search" nil :count 8)
    ("b'l" "behavior language" nil :count 32)
    ("b'm'o" "by means of" nil :count 2)
    ("b'rc" "beta reduce" nil :count 4)
    ("b'rcd" "beta reduced" nil :count 0)
    ("b'rdt" "beta reduced" nil :count 1)
    ("b'rn" "beta reduction" nil :count 39)
    ("b'rns" "beta reductions" nil :count 6)
    ("b'rnt" "beta reduction" nil :count 22)
    ("b'rt" "beta reduce" nil :count 1)
    ("b'rx" "beta redex" nil :count 7)
    ("b'rxs" "beta redexes" nil :count 5)
    ("b't" "behavior thread" nil :count 12)
    ("b't'w" "by the way" nil :count 31)
    ("b'ts" "behavior threads" nil :count 8)
    ("b'v" "bound variable" nil :count 46)
    ("b'v'h" "bounding volume hierarchy" nil :count 0)
    ("b'v'hs" "bounding volume hierarchies" nil :count 0)
    ("b'vm" "bounding volume" nil :count 4)
    ("b'vms" "bounding volumes" nil :count 9)
    ("b'vs" "bound variables" nil :count 82)
    ("bccc'" "bicartesian closed category" nil :count 1)
    ("bd" "bound" nil :count 123)
    ("bdd" "bounded" nil :count 19)
    ("bdg" "binding" nil :count 189)
    ("bdgs" "bindings" nil :count 85)
    ("bds" "bounds" nil :count 23)
    ("becasue" "because" nil :count 35)
    ("becuase" "because" nil :count 80)
    ("bjn" "bijection" nil :count 63)
    ("bjns" "bijections" nil :count 13)
    ("bjv" "bijective" nil :count 27)
    ("bot'" "⊥" nil :count 73)
    ("btm" "bottom" nil :count 1)
    ("btms" "bottoms" nil :count 1)
    ("bv" "behave" nil :count 1)
    ("bvd" "behaved" nil :count 1)
    ("bvl" "behavioral" nil :count 3)
    ("bvr" "behavior" nil :count 1702)
    ("bvrl" "behavioral" nil :count 6)
    ("bvrr" "Bvr" nil :count 3)
    ("bvrs" "behaviors" nil :count 905)
    ("bvs" "behaves" nil :count 0)
    ("c'b'v" "call-by-value" nil :count 27)
    ("c'b'x" "continuation-based transformation" nil :count 1)
    ("c'c" "cartesian category" nil :count 3)
    ("c'cs" "cartesian categories" nil :count 0)
    ("c'ctn" "collision continuation" nil :count 3)
    ("c'd" "collision detection" nil :count 19)
    ("c'e" "constraint expression" nil :count 2)
    ("c'es" "constraint expressions" nil :count 2)
    ("c'f" "continuous function" nil :count 9)
    ("c'f'l" "context-free language" nil :count 0)
    ("c'f'ls" "context-free languages" nil :count 1)
    ("c'fs" "continuous functions" nil :count 1)
    ("c'g" "computer graphics" nil :count 12)
    ("c'l'p" "constraint logic programming" nil :count 23)
    ("c'o'c" "Calculus of Constructions" nil :count 9)
    ("c'o'm" "calculus on manifolds" nil :count 5)
    ("c'p" "collision prediction" nil :count 47)
    ("c'p's" "continuation-passing style" nil :count 2)
    ("c'r" "collision response" nil :count 5)
    ("c'rs" "conversion rules" nil :count 6)
    ("c's" "concrete syntax" nil :count 14)
    ("c's'e" "common subexpression elimination" nil :count 12)
    ("c's'g" "constructive solid geometry" nil :count 2)
    ("c's'p" "complete set of pre-unifiers" nil :count 0)
    ("c's'u" "complete set of unifiers" nil :count 13)
    ("c's'us" "complete sets of unifiers" nil :count 4)
    ("c't" "category theory" nil :count 113)
    ("c't'c" "compiling to categories" nil :count 17)
    ("c'tc" "category theoretic" nil :count 1)
    ("c'v" "concrete value" nil :count 12)
    ("c'vs" "concrete values" nil :count 18)
    ("cafe'" "café" nil :count 3)
    ("cafe's" "cafés" nil :count 2)
    ("cant" "can't" nil :count 85)
    ("cbl" "combinational" nil :count 119)
    ("cbly" "combinationally" nil :count 3)
    ("cbn" "combination" nil :count 181)
    ("cbns" "combinations" nil :count 41)
    ("cbr" "combinator" nil :count 70)
    ("cbrl" "combinatorial" nil :count 3)
    ("cbrs" "combinators" nil :count 204)
    ("cc'" "cartesian closed" nil :count 0)
    ("ccc'" "cartesian closed category" nil :count 11)
    ("cccs'" "cartesian closed categories" nil :count 18)
    ("ccf'" "closed cartesian functor" nil :count 2)
    ("cci" "calculi" nil :count 25)
    ("ccln" "conclusion" nil :count 128)
    ("cclns" "conclusions" nil :count 56)
    ("ccn" "calculation" nil :count 53)
    ("ccns" "calculations" nil :count 27)
    ("ccs" "calculus" nil :count 194)
    ("cct" "calculate" nil :count 24)
    ("cctg" "calculating" nil :count 7)
    ("ccts" "calculates" nil :count 1)
    ("cdl" "conditional" nil :count 83)
    ("cdls" "conditionals" nil :count 0)
    ("cdly" "conditionally" nil :count 6)
    ("cdmn" "codomain" nil :count 24)
    ("cdmns" "codomains" nil :count 1)
    ("cdn" "condition" nil :count 278)
    ("cdnl" "conditional" nil :count 45)
    ("cdnls" "conditionals" nil :count 45)
    ("cdnly" "conditionally" nil :count 0)
    ("cdns" "conditions" nil :count 116)
    ("cdots'" "⋯" nil :count 4)
    ("cdt" "coordinate" nil :count 52)
    ("cdtd" "coordinated" nil :count 5)
    ("cdtg" "coordinating" nil :count 5)
    ("cdts" "coordinates" nil :count 43)
    ("cfc" "conference" nil :count 75)
    ("cfcs" "conferences" nil :count 12)
    ("cft" "coefficient" nil :count 12)
    ("cfts" "coefficients" nil :count 25)
    ("cgl" "categorical" nil :count 4)
    ("cgly" "categorically" nil :count 1)
    ("cgn" "conjugation" nil :count 11)
    ("cgt" "conjugate" nil :count 1)
    ("cgy" "category" nil :count 3)
    ("cgys" "categories" nil :count 1)
    ("ch'r" "Church-Rosser" nil :count 32)
    ("chagne" "change" nil :count 5)
    ("cidcn" "coinduction" nil :count 1)
    ("cidv" "coinductive" nil :count 12)
    ("circ'" "∘" nil :count 8)
    ("cjn" "conjunction" nil :count 106)
    ("cjns" "conjunctions" nil :count 14)
    ("cjr" "conjecture" nil :count 44)
    ("cjrd" "conjectured" nil :count 2)
    ("cjrs" "conjectures" nil :count 2)
    ("cjv" "conjunctive" nil :count 6)
    ("cjvy" "conjunctively" nil :count 0)
    ("ck" "check" nil :count 493)
    ("ckd" "checked" nil :count 96)
    ("ckg" "checking" nil :count 186)
    ("ckr" "checker" nil :count 3)
    ("cks" "checks" nil :count 19)
    ("clga" "coalgebra" nil :count 3)
    ("clgas" "coalgebras" nil :count 1)
    ("clgc" "coalgebraic" nil :count 10)
    ("clgcy" "coalgebraically" nil :count 1)
    ("cln" "collection" nil :count 465)
    ("clns" "collections" nil :count 63)
    ("cmpn" "composition" nil :count 7)
    ("cmx" "complex" nil :count 6)
    ("cn" "connection" nil :count 258)
    ("cnn'" "convolutional neural network" nil :count 0)
    ("cnns'" "convolutional neural networks" nil :count 0)
    ("cnqy" "consequently" nil :count 0)
    ("cns" "connections" nil :count 77)
    ("cnt" "constant" nil :count 819)
    ("cnts" "constants" nil :count 335)
    ("cnty" "constantly" nil :count 0)
    ("cojt" "cobject" nil :count 2)
    ("cojts" "cobjects" nil :count 3)
    ("commetn" "comment" nil :count 1)
    ("couldnt" "couldn't" nil :count 22)
    ("cpbl" "composable" nil :count 6)
    ("cpby" "composability" nil :count 8)
    ("cpd" "composed" nil :count 10)
    ("cpl" "compositional" nil :count 173)
    ("cply" "compositionally" nil :count 60)
    ("cpn" "composition" nil :count 1172)
    ("cpnl" "compositional" nil :count 85)
    ("cpns" "compositions" nil :count 147)
    ("cpny" "compositionally" nil :count 11)
    ("cps" "compose" nil :count 20)
    ("cpsd" "composed" nil :count 4)
    ("cpsg" "composing" nil :count 13)
    ("cpss" "composes" nil :count 0)
    ("cpt" "component" nil :count 275)
    ("cptl" "computational" nil :count 79)
    ("cptly" "computationally" nil :count 10)
    ("cptn" "computation" nil :count 762)
    ("cptns" "computations" nil :count 276)
    ("cpts" "components" nil :count 262)
    ("cpty" "compositionality" nil :count 18)
    ("cqn" "consequence" nil :count 77)
    ("cqns" "consequences" nil :count 57)
    ("cqny" "consequently" nil :count 9)
    ("cqt" "consequent" nil :count 8)
    ("cqty" "consequently" nil :count 30)
    ("crcn" "corecursion" nil :count 0)
    ("crcv" "corecursive" nil :count 0)
    ("crcvy" "corecursively" nil :count 2)
    ("crd" "correspond" nil :count 190)
    ("crdc" "correspondence" nil :count 159)
    ("crdd" "corresponded" nil :count 27)
    ("crdg" "corresponding" nil :count 528)
    ("crdgy" "correspondingly" nil :count 39)
    ("crdn" "coordination" nil :count 3)
    ("crds" "corresponds" nil :count 152)
    ("crln" "correlation" nil :count 1)
    ("crlns" "correlations" nil :count 0)
    ("cse'" "common subexpression elimination" nil :count 1)
    ("csn" "collision" nil :count 123)
    ("csns" "collisions" nil :count 39)
    ("cst" "construct" nil :count 529)
    ("cstd" "constructed" nil :count 166)
    ("cstg" "constructing" nil :count 200)
    ("cstn" "construction" nil :count 566)
    ("cstns" "constructions" nil :count 50)
    ("csts" "constructs" nil :count 95)
    ("cstv" "constructive" nil :count 55)
    ("cstvy" "constructively" nil :count 15)
    ("csv" "conservative" nil :count 21)
    ("csvy" "conservatively" nil :count 3)
    ("ct" "constraint" nil :count 411)
    ("ct'" "CT" nil :count 6)
    ("ctc'" "compiling to categories" nil :count 29)
    ("ctc''" "compiling-to-categories" nil :count 86)
    ("ctg" "containing" nil :count 31)
    ("ctgs" "contiguous" nil :count 1)
    ("ctn" "continuation" nil :count 141)
    ("ctns" "continuations" nil :count 68)
    ("ctods" "cdots" nil :count 6)
    ("ctr" "constructor" nil :count 536)
    ("ctrs" "constructors" nil :count 283)
    ("cts" "constraints" nil :count 356)
    ("ctsy" "continuously" nil :count 14)
    ("ctus" "continuous" nil :count 520)
    ("ctusy" "continuously" nil :count 45)
    ("ctuy" "continuity" nil :count 25)
    ("ctv" "commutative" nil :count 124)
    ("ctvy" "commutativity" nil :count 38)
    ("cty" "continuity" nil :count 39)
    ("cvbl" "ConstraintVariable" nil :count 2)
    ("cvby" "convertibility" nil :count 42)
    ("cvc" "convenience" nil :count 7)
    ("cvl" "convertible" nil :count 62)
    ("cvln" "convolution" nil :count 311)
    ("cvlnl" "convolutional" nil :count 2)
    ("cvlns" "convolutions" nil :count 5)
    ("cvn" "conversion" nil :count 381)
    ("cvnc" "convenience" nil :count 145)
    ("cvncs" "conveniences" nil :count 0)
    ("cvns" "conversions" nil :count 71)
    ("cvnt" "convenient" nil :count 299)
    ("cvnty" "conveniently" nil :count 34)
    ("cvt" "convert" nil :count 268)
    ("cvtd" "converted" nil :count 59)
    ("cvtg" "converting" nil :count 92)
    ("cvtl" "conventional" nil :count 143)
    ("cvtly" "conventionally" nil :count 6)
    ("cvtn" "convention" nil :count 71)
    ("cvtns" "conventions" nil :count 15)
    ("cvtr" "converter" nil :count 5)
    ("cvtrs" "converters" nil :count 0)
    ("cvts" "converts" nil :count 26)
    ("cx" "context" nil :count 348)
    ("cx'" "cx" nil :count 5)
    ("cx'f" "context-free" nil :count 4)
    ("cx'f'l" "context-free language" nil :count 0)
    ("cx'f'ls" "context-free languages" nil :count 0)
    ("cx's" "context-sensitive" nil :count 1)
    ("cxs" "contexts" nil :count 118)
    ("cz" "characterize" nil :count 2)
    ("d'b" "double buffer" nil :count 1)
    ("d'bd" "double-buffered" nil :count 0)
    ("d'bg" "double buffering" nil :count 4)
    ("d'c" "dependent calculus" nil :count 30)
    ("d'd" "denotational design" nil :count 98)
    ("d'e" "differential equation" nil :count 9)
    ("d'es" "differential equations" nil :count 30)
    ("d'f" "depth-first" nil :count 11)
    ("d'f'p" "differentiable functional programming" nil :count 4)
    ("d'f's" "depth-first search" nil :count 8)
    ("d'f't" "dependent function type" nil :count 1)
    ("d'f'ts" "dependent function types" nil :count 9)
    ("d'i" "de Bruijn index" nil :count 15)
    ("d'is" "de Bruijn indices" nil :count 28)
    ("d'l" "deep learning" nil :count 69)
    ("d'm" "direct manipulation" nil :count 1)
    ("d'o'f" "degree of freedom" nil :count 8)
    ("d'o'fs" "degrees of freedom" nil :count 17)
    ("d'p" "dynamic programming" nil :count 17)
    ("d'p't" "dependent product type" nil :count 0)
    ("d'p'ts" "dependent product types" nil :count 0)
    ("d's" "data structure" nil :count 93)
    ("d's'e'l" "domain-specific embedded language" nil :count 1)
    ("d's'e'ls" "domain-specific embedded languages" nil :count 2)
    ("d's'l" "domain-specific language" nil :count 5)
    ("d's'ls" "domain-specific languages" nil :count 9)
    ("d'sm" "denotational semantics" nil :count 114)
    ("d'ss" "data structures" nil :count 67)
    ("d't" "data type" nil :count 136)
    ("d't'l'c" "dependent typed lambda calculus" nil :count 5)
    ("d'tp" "data type" nil :count 19)
    ("d'tps" "data types" nil :count 11)
    ("d'ts" "data types" nil :count 152)
    ("da'd" "data-driven" nil :count 18)
    ("da'p" "data-parallel" nil :count 1)
    ("dbd" "distributed" nil :count 29)
    ("dbn" "distribution" nil :count 131)
    ("dbns" "distributions" nil :count 115)
    ("dbt" "distribute" nil :count 52)
    ("dbtd" "distributed" nil :count 25)
    ("dbtg" "distributing" nil :count 13)
    ("dbts" "distributes" nil :count 32)
    ("dbv" "distributive" nil :count 46)
    ("dbvy" "distributivity" nil :count 22)
    ("dcb" "describe" nil :count 246)
    ("dcbd" "described" nil :count 474)
    ("dcbg" "describing" nil :count 108)
    ("dcbl" "decidable" nil :count 45)
    ("dcbs" "describes" nil :count 132)
    ("dcbty" "decidability" nil :count 5)
    ("dcln" "declaration" nil :count 83)
    ("dclns" "declarations" nil :count 55)
    ("dcn" "declaration" nil :count 112)
    ("dcns" "declarations" nil :count 82)
    ("dcpd" "decomposed" nil :count 0)
    ("dcpn" "decomposition" nil :count 161)
    ("dcpns" "decompositions" nil :count 18)
    ("dcps" "decompose" nil :count 45)
    ("dcpsg" "decomposing" nil :count 9)
    ("dcpss" "decomposes" nil :count 2)
    ("dct" "document" nil :count 324)
    ("dctd" "documented" nil :count 17)
    ("dctg" "documenting" nil :count 3)
    ("dctn" "documentation" nil :count 148)
    ("dcts" "documents" nil :count 23)
    ("dcty" "discontinuity" nil :count 3)
    ("dctys" "discontinuities" nil :count 1)
    ("dcv" "declarative" nil :count 114)
    ("dcvy" "declaratively" nil :count 11)
    ("ddc" "deduce" nil :count 40)
    ("ddcd" "deduced" nil :count 3)
    ("ddcg" "deducing" nil :count 3)
    ("ddcs" "deduces" nil :count 2)
    ("ddn" "deduction" nil :count 43)
    ("ddns" "deductions" nil :count 12)
    ("ddv" "deductive" nil :count 9)
    ("de'd" "demand-driven" nil :count 18)
    ("depty" "depth" nil :count 5)
    ("df" "define" nil :count 2050)
    ("df'" "df" nil :count 32)
    ("dfbl" "differentiable" nil :count 177)
    ("dfby" "differentiability" nil :count 20)
    ("dfc" "difference" nil :count 346)
    ("dfcg" "differencing" nil :count 3)
    ("dfcs" "differences" nil :count 83)
    ("dfd" "defined" nil :count 1215)
    ("dfg" "defining" nil :count 373)
    ("dfl" "differential" nil :count 66)
    ("dfls" "differentials" nil :count 0)
    ("dfly" "differentially" nil :count 3)
    ("dfn" "definition" nil :count 2279)
    ("dfnl" "definitional" nil :count 9)
    ("dfnly" "definitionally" nil :count 10)
    ("dfns" "definitions" nil :count 1046)
    ("dfny" "definitionally" nil :count 1)
    ("dfrn" "differentiation" nil :count 301)
    ("dfrns" "differentiations" nil :count 2)
    ("dfrt" "differentiate" nil :count 39)
    ("dfrtd" "differentiated" nil :count 13)
    ("dfrts" "differentiates" nil :count 1)
    ("dfs" "defines" nil :count 105)
    ("dft" "different" nil :count 1353)
    ("dftg" "differentiating" nil :count 19)
    ("dfty" "differently" nil :count 125)
    ("dgt" "disagreement" nil :count 1)
    ("di'p" "disagreement pair" nil :count 172)
    ("di'ps" "disagreement pairs" nil :count 168)
    ("di'sq" "disagreement sequence" nil :count 8)
    ("di'sqs" "disagreement sequences" nil :count 0)
    ("didnt" "didn't" nil :count 91)
    ("djn" "disjunction" nil :count 37)
    ("djns" "disjunctions" nil :count 9)
    ("djv" "disjunctive" nil :count 6)
    ("djvy" "disjunctively" nil :count 0)
    ("dlt" "difficult" nil :count 26)
    ("dlty" "difficulty" nil :count 20)
    ("dltys" "difficulties" nil :count 4)
    ("dm't" "domain theory" nil :count 10)
    ("dm'tc" "domain theoretic" nil :count 3)
    ("dmn" "domain" nil :count 313)
    ("dmns" "domains" nil :count 77)
    ("dn" "denotation" nil :count 90)
    ("dnl" "denotational" nil :count 434)
    ("dnly" "denotationally" nil :count 53)
    ("dnn" "denotation" nil :count 160)
    ("dnn'" "dnn" nil :count 5)
    ("dnns" "denotations" nil :count 28)
    ("dns" "denotations" nil :count 13)
    ("dnv" "denotative" nil :count 88)
    ("dnvy" "denotatively" nil :count 1)
    ("doesnt" "doesn't" nil :count 190)
    ("dof'" "degree of freedom" nil :count 6)
    ("dofs'" "degrees of freedom" nil :count 5)
    ("dont" "don't" nil :count 954)
    ("dpc" "dependence" nil :count 40)
    ("dpcn" "decomposition" nil :count 1)
    ("dpd" "depend" nil :count 165)
    ("dpdd" "depended" nil :count 6)
    ("dpdg" "depending" nil :count 103)
    ("dpds" "depends" nil :count 196)
    ("dpt" "dependent" nil :count 460)
    ("dpts" "dependents" nil :count 0)
    ("dpty" "dependently" nil :count 70)
    ("dpv" "disprove" nil :count 1)
    ("dpy" "dependency" nil :count 135)
    ("dpys" "dependencies" nil :count 139)
    ("drfc" "dereference" nil :count 0)
    ("dscn" "description" nil :count 343)
    ("dscns" "descriptions" nil :count 99)
    ("dscrn" "description" nil :count 1)
    ("dscv" "descriptive" nil :count 18)
    ("dstn" "destruction" nil :count 3)
    ("dstr" "destructor" nil :count 1)
    ("dstrs" "destructors" nil :count 0)
    ("dsv" "destructive" nil :count 30)
    ("dsvy" "destructively" nil :count 44)
    ("dtc" "deterministic" nil :count 89)
    ("dtcy" "deterministically" nil :count 3)
    ("dtm" "determinism" nil :count 15)
    ("dtt" "determinate" nil :count 3)
    ("dtv" "derivative" nil :count 708)
    ("dtvs" "derivatives" nil :count 542)
    ("dv" "derive" nil :count 151)
    ("dv'" "dv" nil :count 17)
    ("dvbl" "derivable" nil :count 1)
    ("dvd" "derived" nil :count 147)
    ("dvg" "deriving" nil :count 271)
    ("dvn" "derivation" nil :count 363)
    ("dvnl" "derivational" nil :count 7)
    ("dvns" "derivations" nil :count 80)
    ("dvp" "develop" nil :count 101)
    ("dvpd" "developed" nil :count 90)
    ("dvpg" "developing" nil :count 80)
    ("dvpr" "developer" nil :count 6)
    ("dvprs" "developers" nil :count 10)
    ("dvps" "develops" nil :count 13)
    ("dvs" "derives" nil :count 15)
    ("dvt" "development" nil :count 287)
    ("dvtl" "developmental" nil :count 0)
    ("dvts" "developments" nil :count 16)
    ("e'b'g" "explanation based generalization" nil :count 2)
    ("e'e" "eta expand" nil :count 21)
    ("e'ed" "eta expanded" nil :count 1)
    ("e'eg" "eta expanding" nil :count 1)
    ("e'en" "eta expansion" nil :count 12)
    ("e'ens" "eta expansions" nil :count 1)
    ("e'es" "eta expands" nil :count 1)
    ("e'l'f" "Edinburgh Logical Framework" nil :count 17)
    ("e'o" "each other" nil :count 0)
    ("e'p" "expression procedure" nil :count 4)
    ("e'pmc" "explicitly polymorphic" nil :count 0)
    ("e'pmm" "explicit polymorphism" nil :count 5)
    ("e'ps" "expression procedures" nil :count 3)
    ("e's's" "ERGO Suport System" nil :count 11)
    ("e'u" "equational unification" nil :count 3)
    ("eft" "efficient" nil :count 778)
    ("efty" "efficiently" nil :count 204)
    ("efy" "efficiency" nil :count 322)
    ("eg" "e.g.," nil :count 1363)
    ("elmn" "elimination" nil :count 5)
    ("emt" "element" nil :count 284)
    ("emts" "elements" nil :count 325)
    ("eplg" "extrapolating" nil :count 0)
    ("epln" "extrapolation" nil :count 11)
    ("eplt" "extrapolate" nil :count 1)
    ("eqc" "equivalence" nil :count 64)
    ("eqcs" "equivalences" nil :count 5)
    ("eqn" "equation" nil :count 137)
    ("eqnl" "equational" nil :count 105)
    ("eqnly" "equationally" nil :count 2)
    ("eqns" "equations" nil :count 156)
    ("eqty" "equality" nil :count 64)
    ("eqtys" "equalities" nil :count 0)
    ("equiv'" "≡" nil :count 17)
    ("eqvt" "equivalent" nil :count 132)
    ("eqvts" "equivalents" nil :count 0)
    ("eqvty" "equivalently" nil :count 7)
    ("evetn" "event" nil :count 4)
    ("evetns" "events" nil :count 9)
    ("evt" "environment" nil :count 407)
    ("evtl" "environmental" nil :count 2)
    ("evts" "environments" nil :count 72)
    ("excersize" "exercise" nil :count 2)
    ("exists'" "∃" nil :count 1)
    ("f'a" "functional animation" nil :count 6)
    ("f'b" "frame buffer" nil :count 2)
    ("f'c" "first-class" nil :count 9)
    ("f'cb" "functor combinator" nil :count 1)
    ("f'cbs" "functor combinators" nil :count 0)
    ("f'ctn" "failure continutation" nil :count 5)
    ("f'ctns" "failure continutations" nil :count 0)
    ("f'e" "for example" nil :count 127)
    ("f'f'i" "foreign function interface" nil :count 10)
    ("f'i" "for instance" nil :count 1339)
    ("f'l" "formal language" nil :count 6)
    ("f'o" "first-order" nil :count 47)
    ("f'o'l" "first-order logic" nil :count 8)
    ("f'o'm" "first-order matching" nil :count 1)
    ("f'o'r" "first-order resolution" nil :count 3)
    ("f'o'u" "first-order unification" nil :count 33)
    ("f'o'v" "field of view" nil :count 1)
    ("f'occ" "free-occurrence" nil :count 2)
    ("f'occs" "free-occurrences" nil :count 1)
    ("f'os" "function objects" nil :count 5)
    ("f'p" "functional programming" nil :count 262)
    ("f'p'i" "fixed point induction" nil :count 13)
    ("f'pt" "floating point" nil :count 3)
    ("f'r" "functional reactive" nil :count 0)
    ("f'r'a" "functional reactive animation" nil :count 1)
    ("f'r'p" "functional reactive programming" nil :count 27)
    ("f's" "formal system" nil :count 10)
    ("f's'm" "finite state machine" nil :count 2)
    ("f's'ms" "finite state machines" nil :count 0)
    ("f'ss" "function symbols" nil :count 5)
    ("f't" "future time" nil :count 1)
    ("f't'v" "free type variable" nil :count 2)
    ("f't'vs" "free type variables" nil :count 7)
    ("f'v" "free variable" nil :count 36)
    ("f'v's" "free vector space" nil :count 12)
    ("f'v'ss" "free vector spaces" nil :count 4)
    ("f'vs" "free variables" nil :count 142)
    ("f'x" "for example" nil :count 4)
    ("fbl" "flexible" nil :count 101)
    ("fbly" "flexibly" nil :count 7)
    ("fbty" "flexibility" nil :count 68)
    ("fby" "flexibility" nil :count 42)
    ("fdl" "fundamental" nil :count 184)
    ("fdls" "fundamentals" nil :count 3)
    ("fdly" "fundamentally" nil :count 59)
    ("fdn" "foundation" nil :count 112)
    ("fdnl" "foundational" nil :count 12)
    ("fdns" "foundations" nil :count 37)
    ("ffl" "flex-flex" nil :count 0)
    ("flase" "False" nil :count 2)
    ("fld" "followed" nil :count 73)
    ("flfl" "flexible-flexible" nil :count 166)
    ("flg" "following" nil :count 354)
    ("flrd" "flexible-rigid" nil :count 153)
    ("fls" "follows" nil :count 81)
    ("fltp" "flexible-type" nil :count 2)
    ("fm" "from" nil :count 9873)
    ("fma" "formula" nil :count 133)
    ("fmac" "formulaic" nil :count 1)
    ("fmas" "formulas" nil :count 78)
    ("fml" "formal" nil :count 209)
    ("fmly" "formally" nil :count 45)
    ("fmn" "formulation" nil :count 384)
    ("fmns" "formulations" nil :count 92)
    ("fmt" "formulate" nil :count 138)
    ("fmtd" "formulated" nil :count 31)
    ("fmtg" "formulating" nil :count 31)
    ("fmts" "formulates" nil :count 7)
    ("fmy" "family" nil :count 319)
    ("fmys" "families" nil :count 109)
    ("fn" "function" nil :count 5254)
    ("fnl" "functional" nil :count 1258)
    ("fnls" "functionals" nil :count 18)
    ("fnly" "functionally" nil :count 39)
    ("fns" "functions" nil :count 3738)
    ("fnty" "functionality" nil :count 169)
    ("fo" "of" nil :count 496)
    ("forall'" "∀" nil :count 8)
    ("fqt" "frequent" nil :count 20)
    ("fqty" "frequently" nil :count 23)
    ("fqy" "frequency" nil :count 34)
    ("fqys" "frequencies" nil :count 5)
    ("frechet" "Fréchet" nil :count 13)
    ("frnak" "frank" nil :count 3)
    ("fsm" "formalism" nil :count 27)
    ("fsm'" "fsm" nil :count 5)
    ("fsms" "formalisms " nil :count 1)
    ("ft" "first" nil :count 3983)
    ("fu'v" "future value" nil :count 2)
    ("fu'vs" "future values" nil :count 15)
    ("fvs'" "free vector space" nil :count 1)
    ("fvss'" "free vector spaces" nil :count 2)
    ("fx'p" "fixed point" nil :count 82)
    ("fx'ps" "fixed points" nil :count 71)
    ("fz" "formalize" nil :count 62)
    ("fzd" "formalized" nil :count 13)
    ("fzg" "formalizing" nil :count 27)
    ("fzl" "formalizable" nil :count 0)
    ("fzn" "formalization" nil :count 24)
    ("fzns" "formalizations" nil :count 5)
    ("fzs" "formalizes" nil :count 4)
    ("g''o" "geometric-object" nil :count 3)
    ("g''os" "geometric-objects" nil :count 0)
    ("g'a'f" "graphics application framework" nil :count 7)
    ("g'c" "garbage collection" nil :count 70)
    ("g'cd" "garbage-collected" nil :count 2)
    ("g'cr" "garbage collector" nil :count 2)
    ("g'd" "geometry-dependent" nil :count 5)
    ("g'dc" "geometry-dependence" nil :count 0)
    ("g'e" "geometry expression" nil :count 9)
    ("g'es" "geometry expressions" nil :count 3)
    ("g'f" "generic function" nil :count 2)
    ("g'l" "geometry language" nil :count 27)
    ("g'o" "geometric object" nil :count 56)
    ("g'os" "geometric objects" nil :count 29)
    ("g'p" "general purpose" nil :count 22)
    ("g'pv" "geometric primitive" nil :count 0)
    ("g'pvs" "geometric primitives" nil :count 7)
    ("g'u'i" "graphical user interface" nil :count 0)
    ("g'u'is" "graphical user interfaces" nil :count 1)
    ("gd" "gd" nil :count 42)
    ("gl" "general" nil :count 1595)
    ("glb'" "⊓" nil :count 4)
    ("glty" "generality" nil :count 99)
    ("gltys" "generalities" nil :count 0)
    ("gly" "generally" nil :count 436)
    ("gmc" "geometric" nil :count 173)
    ("gmcy" "geometrically" nil :count 3)
    ("gmr" "grammar" nil :count 73)
    ("gmrs" "grammars" nil :count 14)
    ("gmy" "geometry" nil :count 1470)
    ("gmys" "geometries" nil :count 13)
    ("gn" "generation" nil :count 299)
    ("gnc" "generic" nil :count 122)
    ("gncs" "generics" nil :count 2)
    ("gncy" "generically" nil :count 6)
    ("gns" "generations" nil :count 6)
    ("gnt" "generate" nil :count 4)
    ("gnts" "generates" nil :count 0)
    ("goign" "going" nil :count 38)
    ("gp" "group" nil :count 607)
    ("gpd" "grouping" nil :count 0)
    ("gpg" "grouping" nil :count 1)
    ("gps" "groups" nil :count 74)
    ("grahpics" "graphics" nil :count 7)
    ("gt" "generate" nil :count 379)
    ("gtd" "generated" nil :count 382)
    ("gtg" "generating" nil :count 125)
    ("gtr" "generator" nil :count 84)
    ("gtrs" "generators" nil :count 34)
    ("gts" "generates" nil :count 139)
    ("gz" "generalize" nil :count 712)
    ("gzd" "generalized" nil :count 502)
    ("gzg" "generalizing" nil :count 194)
    ("gzn" "generalization" nil :count 241)
    ("gzns" "generalizations" nil :count 50)
    ("gzs" "generalizes" nil :count 137)
    ("h'e" "hyper-edge" nil :count 1)
    ("h'es" "hyper-edges" nil :count 0)
    ("h'g" "hyper-graph" nil :count 2)
    ("h'gs" "hyper-graphs" nil :count 0)
    ("h'l" "high-level" nil :count 140)
    ("h'n" "head normal" nil :count 2)
    ("h'n'f" "head normal form" nil :count 38)
    ("h'n'fs" "head normal forms" nil :count 2)
    ("h'o" "higher-order" nil :count 437)
    ("h'o'a's" "higher-order abstract syntax" nil :count 6)
    ("h'o'f" "higher-order function" nil :count 16)
    ("h'o'fs" "higher-order functions" nil :count 32)
    ("h'o'h'h" "higher-order hereditary Harrop" nil :count 2)
    ("h'o'l" "higher-order logic" nil :count 57)
    ("h'o'm" "higher-order matching" nil :count 19)
    ("h'o'r" "higher-order resolution" nil :count 4)
    ("h'o't" "higher-order type" nil :count 1)
    ("h'o'ts" "higher-order types" nil :count 9)
    ("h'o'u" "higher-order unification" nil :count 197)
    ("h's'r" "hidden surface removal" nil :count 4)
    ("h'ss" "half spaces" nil :count 0)
    ("hadnt" "hadn't" nil :count 22)
    ("hasnt" "hasn't" nil :count 7)
    ("havent" "haven't" nil :count 52)
    ("hcl" "hierarchical" nil :count 45)
    ("hcly" "hierarchically" nil :count 5)
    ("hcy" "hierarchy" nil :count 51)
    ("hcys" "hierarchies" nil :count 4)
    ("hmc" "homomorphic" nil :count 158)
    ("hmcy" "homomorphically" nil :count 33)
    ("hmm" "homomorphism" nil :count 528)
    ("hmms" "homomorphisms" nil :count 171)
    ("hod'" "higher-order derivative" nil :count 0)
    ("hods'" "higher-order derivatives" nil :count 1)
    ("hof'" "higher-order function" nil :count 16)
    ("hofs'" "higher-order functions" nil :count 31)
    ("hr'd" "higher dimensional" nil :count 0)
    ("hr'l" "higher level" nil :count 65)
    ("hr'ls" "higher levels" nil :count 1)
    ("hte" "the" nil :count 80)
    ("hvae" "have" nil :count 38)
    ("hvr" "however" nil :count 1615)
    ("hwo" "how" nil :count 13)
    ("hymc" "hylomorphic" nil :count 7)
    ("hymm" "hylomorphism" nil :count 6)
    ("hymms" "hylomorphisms" nil :count 7)
    ("hzl" "horizontal" nil :count 44)
    ("hzly" "horizontally" nil :count 13)
    ("i'a" "in addition" nil :count 36)
    ("i'a't" "in addition to" nil :count 155)
    ("i'as" "inherited attributes" nil :count 2)
    ("i'b" "interactive behavior" nil :count 3)
    ("i'bs" "interactive behaviors" nil :count 1)
    ("i'c" "in contrast" nil :count 125)
    ("i'c'o" "in case of" nil :count 2)
    ("i'f" "in fact" nil :count 151)
    ("i'f'f" "if and only if" nil :count 5)
    ("i'f'o" "in favor of" nil :count 93)
    ("i'fe" "indirection-free" nil :count 2)
    ("i'g" "in general" nil :count 284)
    ("i'h" "induction hypothesis" nil :count 8)
    ("i'm'e" "in my experience" nil :count 4)
    ("i'm'o" "in my opinion" nil :count 12)
    ("i'o" "in order" nil :count 23)
    ("i'o'f" "in order for" nil :count 1)
    ("i'o't" "in order to" nil :count 340)
    ("i'o'w" "in other words" nil :count 136)
    ("i'p" "in particular" nil :count 554)
    ("i'pmc" "implicitly polymorphic" nil :count 3)
    ("i'pmm" "implicit polymorphism" nil :count 30)
    ("i'r" "inference rule" nil :count 29)
    ("i'r't" "in response to" nil :count 1)
    ("i'rs" "inference rules" nil :count 38)
    ("i's" "inference system" nil :count 8)
    ("i's'o" "in spite of" nil :count 42)
    ("i'ss" "inference systems" nil :count 0)
    ("i't" "in that" nil :count 19)
    ("i't'o" "in terms of" nil :count 362)
    ("i'v" "improving value" nil :count 35)
    ("i'vb" "instance variable" nil :count 18)
    ("i'vbs" "instance variables" nil :count 40)
    ("i'vs" "improving values" nil :count 23)
    ("i'w" "in which" nil :count 565)
    ("i'w'c" "in which case" nil :count 68)
    ("iat" "in addition to" nil :count 8)
    ("iat'" "in addition to" nil :count 15)
    ("ibvr" "i-behavior" nil :count 3)
    ("ibvrs" "i-behaviors" nil :count 1)
    ("ic'" "in contrast" nil :count 4)
    ("icl" "incremental" nil :count 171)
    ("icly" "incrementally" nil :count 32)
    ("iclz" "incrementalize" nil :count 0)
    ("icn" "inclusion" nil :count 1)
    ("ict" "increment" nil :count 25)
    ("ict'" "in contrast to" nil :count 8)
    ("icts" "increments" nil :count 0)
    ("icv" "inclusive" nil :count 26)
    ("icvc" "inconvenience" nil :count 1)
    ("icvnc" "inconvenience" nil :count 0)
    ("icvnt" "inconvenient" nil :count 13)
    ("icvy" "inclusively" nil :count 0)
    ("idc" "introduce" nil :count 378)
    ("idcd" "introduced" nil :count 135)
    ("idcg" "introducing" nil :count 160)
    ("idcn" "induction" nil :count 3)
    ("idcs" "introduces" nil :count 67)
    ("idfn" "identification" nil :count 1)
    ("idn" "introduction" nil :count 244)
    ("idns" "introductions" nil :count 11)
    ("idpc" "independence" nil :count 33)
    ("idpt" "independent" nil :count 251)
    ("idpty" "independently" nil :count 85)
    ("idt'" "inductive data type" nil :count 0)
    ("idts'" "inductive data types" nil :count 0)
    ("idtt" "indeterminate" nil :count 5)
    ("idv" "inductive" nil :count 83)
    ("idvy" "inductively" nil :count 16)
    ("idx" "index" nil :count 51)
    ("idxd" "indexed" nil :count 7)
    ("idxg" "indexing" nil :count 3)
    ("idxs" "indices" nil :count 1)
    ("ie" "i.e.," nil :count 1759)
    ("ieft" "inefficient" nil :count 82)
    ("iefty" "inefficiently" nil :count 3)
    ("iefy" "inefficiency" nil :count 32)
    ("iefys" "inefficiencies" nil :count 6)
    ("ieqty" "inequality" nil :count 4)
    ("ieqtys" "inequalities" nil :count 3)
    ("ifbl" "inflexible" nil :count 3)
    ("ifc" "inference" nil :count 181)
    ("ifcs" "inferences" nil :count 5)
    ("iff'" "if and only if" nil :count 1)
    ("ifl" "informal" nil :count 92)
    ("ifly" "informally" nil :count 34)
    ("ifm" "inform" nil :count 23)
    ("ifml" "informal" nil :count 18)
    ("ifmly" "informally" nil :count 16)
    ("ifmy" "informally" nil :count 11)
    ("ifn" "information" nil :count 589)
    ("ifo" "in favor of" nil :count 7)
    ("ifo'" "in favor of" nil :count 10)
    ("ifqt" "infrequent" nil :count 3)
    ("ifqty" "infrequently" nil :count 0)
    ("ift" "infinite" nil :count 551)
    ("ifty" "infinitely" nil :count 84)
    ("igl" "integral" nil :count 106)
    ("igls" "integrals" nil :count 11)
    ("ign" "integration" nil :count 190)
    ("igns" "integrations" nil :count 2)
    ("igt" "integrate" nil :count 43)
    ("igtd" "integrated" nil :count 18)
    ("igtg" "integrating" nil :count 7)
    ("igtr" "integrator" nil :count 1)
    ("igts" "integrates" nil :count 1)
    ("ijn" "injection" nil :count 21)
    ("ijns" "injections" nil :count 16)
    ("ijv" "injective" nil :count 123)
    ("ijvly" "injectively" nil :count 23)
    ("ijvty" "injectivity" nil :count 26)
    ("imc" "isomorphic" nil :count 199)
    ("imc'" "≅" nil :count 9)
    ("imcy" "isomorphically" nil :count 15)
    ("ime'" "in my experience" nil :count 1)
    ("imm" "isomorphism" nil :count 351)
    ("imms" "isomorphisms" nil :count 275)
    ("implies'" "⟹" nil :count 2)
    ("incst" "inconsistent" nil :count 1)
    ("intn" "interaction" nil :count 180)
    ("intns" "interactions" nil :count 21)
    ("intv" "interactive" nil :count 248)
    ("iot" "in order to" nil :count 30)
    ("iot'" "in order to" nil :count 34)
    ("iow" "in other words" nil :count 165)
    ("ipbl" "impossible" nil :count 96)
    ("ipcn" "implication" nil :count 78)
    ("ipcns" "implications" nil :count 46)
    ("ipd" "implemented" nil :count 339)
    ("ipg" "implementing" nil :count 139)
    ("iplg" "interpolating" nil :count 6)
    ("ipln" "interpolation" nil :count 75)
    ("iplns" "interpolations" nil :count 1)
    ("iplt" "interpolate" nil :count 20)
    ("ipltd" "interpolated" nil :count 5)
    ("iplts" "interpolates" nil :count 1)
    ("ipn" "implementation" nil :count 2241)
    ("ipns" "implementations" nil :count 390)
    ("ipr" "implementer" nil :count 10)
    ("iprc" "importance" nil :count 63)
    ("iprs" "implementers" nil :count 6)
    ("iprt" "important" nil :count 825)
    ("iprty" "importantly" nil :count 37)
    ("ipt" "implement" nil :count 616)
    ("iptd" "implemented" nil :count 51)
    ("iptg" "implementing" nil :count 13)
    ("iptl" "implementable" nil :count 4)
    ("iptr" "implementer" nil :count 25)
    ("iptrs" "implementers" nil :count 8)
    ("ipts" "implements" nil :count 65)
    ("iptv" "imperative" nil :count 446)
    ("iptvy" "imperatively" nil :count 12)
    ("ipv" "improve" nil :count 230)
    ("ipvd" "improved" nil :count 141)
    ("ipvg" "improving" nil :count 128)
    ("ipvs" "improves" nil :count 13)
    ("ipvt" "improvement" nil :count 85)
    ("ipvts" "improvements" nil :count 131)
    ("irl" "internal" nil :count 102)
    ("irls" "internals" nil :count 11)
    ("irly" "internally" nil :count 23)
    ("irz" "internalize" nil :count 9)
    ("irzd" "internalized" nil :count 3)
    ("irzg" "internalizing" nil :count 0)
    ("irzs" "internalizes" nil :count 0)
    ("isft" "insufficient" nil :count 6)
    ("isfty" "insufficiently" nil :count 6)
    ("isl" "intensional" nil :count 10)
    ("isn" "intersection" nil :count 54)
    ("isns" "intersections" nil :count 4)
    ("isnt" "isn't" nil :count 64)
    ("iso'" "in spite of" nil :count 1)
    ("isrn" "instruction" nil :count 38)
    ("isrns" "instructions" nil :count 44)
    ("isrv" "instructive" nil :count 2)
    ("ist" "instantiate" nil :count 136)
    ("istd" "instantiated" nil :count 159)
    ("istg" "instantiating" nil :count 49)
    ("istn" "instantiation" nil :count 13)
    ("istns" "instantiations" nil :count 6)
    ("istr'" "I see to recall" nil :count 3)
    ("ists" "instantiates" nil :count 19)
    ("itc" "intutitionistic" nil :count 10)
    ("itcy" "intutitionistically" nil :count 0)
    ("itd" "interested" nil :count 453)
    ("itds" "ill-typedness" nil :count 29)
    ("itfc" "interface" nil :count 947)
    ("itfcd" "interfaced" nil :count 2)
    ("itfcg" "interfacing" nil :count 13)
    ("itfcs" "interfaces" nil :count 219)
    ("itg" "interesting" nil :count 562)
    ("itgy" "interestingly" nil :count 52)
    ("itm" "imitation" nil :count 55)
    ("itme" "item" nil :count 6)
    ("itms" "imitations" nil :count 40)
    ("itn" "itn" nil :count 25)
    ("itnc" "intuitionistic" nil :count 1)
    ("itns" "interactions" nil :count 17)
    ("ito" "in terms of" nil :count 56)
    ("ito'" "in terms of" nil :count 52)
    ("itp" "interpret" nil :count 97)
    ("itpd" "interpreted" nil :count 34)
    ("itpg" "interpreting" nil :count 61)
    ("itpn" "interpretation" nil :count 390)
    ("itpns" "interpretations" nil :count 123)
    ("itpr" "interpreter" nil :count 56)
    ("itprs" "interpreters" nil :count 4)
    ("itps" "interprets" nil :count 5)
    ("itt" "iterate" nil :count 8)
    ("ittd" "iterated" nil :count 1)
    ("ittn" "iteration" nil :count 19)
    ("ittns" "iterations" nil :count 4)
    ("ittv" "iterative" nil :count 22)
    ("ittvy" "iteratively" nil :count 4)
    ("itv" "interactive" nil :count 19)
    ("itvty" "interactivity" nil :count 8)
    ("itvy" "interactively" nil :count 30)
    ("itz" "internalize" nil :count 0)
    ("itzd" "internalized" nil :count 0)
    ("itzg" "internalizing" nil :count 1)
    ("itzn" "internalization" nil :count 2)
    ("itzs" "internalizes" nil :count 0)
    ("iv'a" "interval analysis" nil :count 37)
    ("ivbl" "invertible" nil :count 69)
    ("ivby" "invertibility" nil :count 4)
    ("ivc" "invariance" nil :count 3)
    ("ive" "I've" nil :count 70)
    ("ivl" "interval" nil :count 415)
    ("ivln" "involution" nil :count 4)
    ("ivlns" "involutions" nil :count 0)
    ("ivls" "intervals" nil :count 253)
    ("ivn" "inversion" nil :count 72)
    ("ivns" "inversions" nil :count 6)
    ("ivt" "invariant" nil :count 126)
    ("ivts" "invariants" nil :count 14)
    ("iw'" "in which" nil :count 3)
    ("iwc" "in which case" nil :count 9)
    ("iwc'" "in which case" nil :count 70)
    ("iwt'" "in which to" nil :count 1)
    ("ix" "index" nil :count 414)
    ("ixd" "indexed" nil :count 385)
    ("ixg" "indexing" nil :count 41)
    ("ixs" "indices" nil :count 11)
    ("iz" "initialize" nil :count 32)
    ("izd" "initialized" nil :count 17)
    ("izg" "initializing" nil :count 9)
    ("izn" "initialization" nil :count 45)
    ("izns" "initializations" nil :count 5)
    ("izr" "initializer" nil :count 0)
    ("izrs" "initializers" nil :count 0)
    ("izs" "initializes" nil :count 0)
    ("j'r" "John Reynolds" nil :count 45)
    ("jfd" "justified" nil :count 11)
    ("jfg" "justifying" nil :count 9)
    ("jfn" "justification" nil :count 59)
    ("jfns" "justifications" nil :count 0)
    ("jfy" "justify" nil :count 59)
    ("jfyd" "justified" nil :count 18)
    ("jfyg" "justifying" nil :count 9)
    ("jfys" "justifies" nil :count 12)
    ("joao" "João" nil :count 5)
    ("jsut" "just" nil :count 32)
    ("jt" "judgment" nil :count 41)
    ("jtl" "judgmental" nil :count 10)
    ("jtly" "judgmentally" nil :count 1)
    ("jts" "judgments" nil :count 7)
    ("jxn" "juxtaposition" nil :count 7)
    ("knwo" "know" nil :count 1)
    ("konw" "know" nil :count 18)
    ("l'a" "linear algebra" nil :count 154)
    ("l'c" "lambda calculus" nil :count 53)
    ("l'cs" "lambda-calculi" nil :count 4)
    ("l'cvby" "lambda convertability" nil :count 2)
    ("l'd't" "algebraic data type" nil :count 17)
    ("l'd'ts" "algebraic data types" nil :count 16)
    ("l'e" "lambda expression" nil :count 12)
    ("l'es" "lambda expressions" nil :count 17)
    ("l'f" "Logical Framework" nil :count 4)
    ("l'f'p" "least fixed point" nil :count 18)
    ("l'f'ps" "least fixed points" nil :count 9)
    ("l'h'n'f" "long head normal form" nil :count 6)
    ("l'h's" "left-hand side" nil :count 17)
    ("l'h'ss" "left-hand sides" nil :count 19)
    ("l'l" "low-level" nil :count 63)
    ("l'ls" "lazy lists" nil :count 1)
    ("l'm" "linear map" nil :count 151)
    ("l'm't" "local modeling transform" nil :count 1)
    ("l'm'ts" "local modeling transforms" nil :count 1)
    ("l'ms" "linear maps" nil :count 267)
    ("l'n'f" "long normal form" nil :count 12)
    ("l'o'i" "level of indirection" nil :count 1)
    ("l'p" "logic programming" nil :count 59)
    ("l'p'l" "logic programming language" nil :count 0)
    ("l's'b" "least significant bit" nil :count 1)
    ("l'u'b" "least upper bound" nil :count 6)
    ("l'u'bs" "least upper bounds" nil :count 0)
    ("l'v" "logical variable" nil :count 1)
    ("l'x" "linear transformation" nil :count 17)
    ("l'xs" "linear transformations" nil :count 41)
    ("ladn" "land" nil :count 2)
    ("lambda'" "λ" nil :count 5)
    ("lbenf" "long beta-eta normal form" nil :count 2)
    ("lbepnf" "long beta-eta product normal form" nil :count 3)
    ("lc" "logic" nil :count 426)
    ("lcl" "logical" nil :count 203)
    ("lcly" "logically" nil :count 28)
    ("lcn" "location" nil :count 179)
    ("lcns" "locations" nil :count 122)
    ("lcs" "logics" nil :count 46)
    ("lcy" "logically" nil :count 2)
    ("leqi'" "⊑" nil :count 13)
    ("lfp'" "least fixed point" nil :count 2)
    ("lfps'" "least fixed points" nil :count 0)
    ("lg" "language" nil :count 2198)
    ("lga" "algebra" nil :count 201)
    ("lgas" "algebras" nil :count 13)
    ("lgc" "algebraic" nil :count 234)
    ("lgcy" "algebraically" nil :count 3)
    ("lgs" "languages" nil :count 651)
    ("lhs'" "left-hand side" nil :count 0)
    ("lhss'" "left-hand sides" nil :count 0)
    ("li'c" "linear combination" nil :count 2)
    ("li'cs" "linear combinations" nil :count 0)
    ("liek" "like" nil :count 21)
    ("llambda'" "Λ" nil :count 3)
    ("loh" "Löh" nil :count 1)
    ("lpg" "Lambda-Prolog" nil :count 131)
    ("lppg" "Lambda'pi-Prolog" nil :count 3)
    ("lr'l" "lower level" nil :count 22)
    ("lr'ls" "lower levels" nil :count 3)
    ("lsit" "list" nil :count 4)
    ("ltods" "ldots" nil :count 6)
    ("ltt" "alternate" nil :count 2)
    ("ltv" "alternative" nil :count 642)
    ("ltvs" "alternatives" nil :count 235)
    ("ltvy" "alternatively" nil :count 409)
    ("lub'" "⊔" nil :count 24)
    ("m'c" "modeling coordinate" nil :count 3)
    ("m'c's'p" "minimal complete set of pre-unifiers" nil :count 9)
    ("m'c's'ps" "minimal complete sets of pre-unifiers" nil :count 8)
    ("m'c's'u" "minimal complete set of unifiers" nil :count 19)
    ("m'c's'us" "minimal complete sets of unifiers" nil :count 0)
    ("m'cs" "model coordinates" nil :count 1)
    ("m'd'p" "Markov decision process" nil :count 3)
    ("m'd'ps" "Markov decision processes" nil :count 5)
    ("m'eqn" "multiequation" nil :count 5)
    ("m'eqns" "multiequations" nil :count 4)
    ("m'g'u" "most general unifier" nil :count 12)
    ("m'i" "multiple inheritance" nil :count 8)
    ("m'l" "metalanguage" nil :count 84)
    ("m'ls" "metalanguages" nil :count 6)
    ("m'm" "multimedia" nil :count 15)
    ("m's'b" "most significant bit" nil :count 0)
    ("m't" "multi-threaded" nil :count 2)
    ("m'x" "modeling transform" nil :count 29)
    ("m'xs" "modeling transforms" nil :count 12)
    ("ma'l" "machine learning" nil :count 173)
    ("mabye" "maybe" nil :count 33)
    ("martin-lof" "Martin-Löf" nil :count 0)
    ("mch" "match" nil :count 90)
    ("mchd" "matched" nil :count 5)
    ("mchg" "matching" nil :count 175)
    ("mchr" "matcher" nil :count 5)
    ("mchs" "matches" nil :count 29)
    ("mcn" "mechanism" nil :count 66)
    ("mcns" "mechanisms" nil :count 44)
    ("mfd" "modified" nil :count 6)
    ("mfn" "modification" nil :count 54)
    ("mfns" "modifications" nil :count 23)
    ("mfo" "MediaFlow" nil :count 34)
    ("mfy" "modify" nil :count 66)
    ("mfyd" "modified" nil :count 162)
    ("mfyg" "modifying" nil :count 31)
    ("mfyl" "modifiable" nil :count 13)
    ("mfyr" "modifier" nil :count 4)
    ("mfyrs" "modifiers" nil :count 0)
    ("mfys" "modifies" nil :count 9)
    ("mgmt" "management" nil :count 59)
    ("mgr" "manager" nil :count 5)
    ("mgt" "management" nil :count 1)
    ("mightnt" "mightn't" nil :count 1)
    ("ml'" "metalanguage" nil :count 4)
    ("mlc" "meta-logic" nil :count 16)
    ("mlcl" "meta-logical" nil :count 1)
    ("mlpn" "multiplication" nil :count 6)
    ("mls'" "metalanguages" nil :count 1)
    ("mmm" "monomorphism" nil :count 0)
    ("mmms" "monomorphisms" nil :count 0)
    ("mmz" "memoize" nil :count 46)
    ("mmzd" "memoized" nil :count 41)
    ("mmzg" "memoizing" nil :count 21)
    ("mmzn" "memoization" nil :count 144)
    ("mmzs" "memoizes" nil :count 1)
    ("mna" "minima" nil :count 0)
    ("mng" "meaning" nil :count 518)
    ("mngs" "meanings" nil :count 140)
    ("mnm" "minimum" nil :count 1)
    ("mpc" "monomorphic" nil :count 61)
    ("mpln" "multiplication" nil :count 187)
    ("mplns" "multiplications" nil :count 3)
    ("mpm" "monomorphism" nil :count 18)
    ("mpms" "monomorphisms" nil :count 0)
    ("mpn" "multiplication" nil :count 69)
    ("mpns" "multiplications" nil :count 1)
    ("mpv" "multiplicative" nil :count 10)
    ("mpvy" "multiplicatively" nil :count 0)
    ("mpy" "multiply" nil :count 12)
    ("mpyd" "multiplied" nil :count 2)
    ("mpyg" "multiplying" nil :count 5)
    ("mpys" "multiplies " nil :count 2)
    ("mpz" "monomorphize" nil :count 6)
    ("mpzd" "monomorphized" nil :count 2)
    ("mpzg" "monomorphizing" nil :count 1)
    ("mpzn" "monomorphization" nil :count 14)
    ("mroe" "more" nil :count 62)
    ("mtc" "monotonic" nil :count 135)
    ("mtcly" "monotonically" nil :count 21)
    ("mtcy" "monotonicity" nil :count 115)
    ("mtd" "method" nil :count 820)
    ("mtds" "methods" nil :count 487)
    ("mtdy" "methodology" nil :count 82)
    ("mtdys" "methodologies" nil :count 10)
    ("mtg" "meeting" nil :count 520)
    ("mtgs" "meetings" nil :count 54)
    ("mtn" "maintain" nil :count 1)
    ("mustnt" "mustn't" nil :count 7)
    ("mvbl" "meta-variable" nil :count 8)
    ("mvbls" "meta-variables" nil :count 5)
    ("mvl" "motivational" nil :count 7)
    ("mvn" "motivation" nil :count 182)
    ("mvnl" "motivational" nil :count 0)
    ("mvns" "motivations" nil :count 16)
    ("mvr" "moreover" nil :count 392)
    ("mvt" "motivate" nil :count 68)
    ("mvtd" "motivated" nil :count 111)
    ("mvtg" "motivating" nil :count 39)
    ("mvts" "motivates" nil :count 29)
    ("mxa" "maxima" nil :count 4)
    ("mxm" "maximum" nil :count 61)
    ("mxz" "maximize" nil :count 19)
    ("mxzd" "maximized" nil :count 0)
    ("mxzg" "maximizing" nil :count 0)
    ("mxzn" "maximization" nil :count 0)
    ("mxzs" "maximizes" nil :count 2)
    ("mz" "minimize" nil :count 59)
    ("mzd" "minimized" nil :count 10)
    ("mzg" "minimizing" nil :count 8)
    ("mzn" "minimization" nil :count 22)
    ("mzs" "minimizes" nil :count 8)
    ("n'a's'c" "necessary and sufficient condition" nil :count 4)
    ("n'c" "necessary condition" nil :count 5)
    ("n'cs" "necessary conditions" nil :count 0)
    ("n'd" "natural deduction" nil :count 10)
    ("n'f" "normal form" nil :count 143)
    ("n'fs" "normal forms" nil :count 62)
    ("n'n" "natural number" nil :count 4)
    ("n'ns" "natural numbers" nil :count 20)
    ("n's" "non-strict" nil :count 8)
    ("n'x" "natural transformation" nil :count 15)
    ("n'xs" "natural transformations" nil :count 3)
    ("naive'" "naïve" nil :count 24)
    ("naively'" "naïvely" nil :count 5)
    ("naivete" "naïveté" nil :count 3)
    ("naivite" "naïvité" nil :count 1)
    ("nbd" "neighborhood" nil :count 8)
    ("nbds" "neighborhoods" nil :count 3)
    ("nbr" "neighbor" nil :count 2)
    ("nbrs" "neighbors" nil :count 2)
    ("ncly" "necessarily" nil :count 135)
    ("ncpnl" "noncomputational" nil :count 0)
    ("ncts" "noncontinuous" nil :count 1)
    ("ncvby" "nonconvertability" nil :count 1)
    ("ncy" "necessary" nil :count 331)
    ("ndc" "nondeterministic" nil :count 54)
    ("ndcy" "nondeterministically" nil :count 7)
    ("ndm" "nondeterminism" nil :count 34)
    ("ndsv" "non-destructive" nil :count 0)
    ("ndtc" "nondeterministic" nil :count 50)
    ("ndtm" "nondeterminism" nil :count 30)
    ("ne'n" "neural network" nil :count 5)
    ("ne'ns" "neural networks" nil :count 1)
    ("neednt" "needn't" nil :count 51)
    ("nfn" "notification" nil :count 2)
    ("nfnl" "non-functional" nil :count 0)
    ("nfns" "notifications" nil :count 1)
    ("ngv" "negative" nil :count 2)
    ("nicl" "non-incremental" nil :count 0)
    ("nidv" "noninductive" nil :count 2)
    ("nidvy" "noninductively" nil :count 0)
    ("nijv" "non-injective" nil :count 4)
    ("nijvty" "non-injectivity" nil :count 12)
    ("nintv" "non-interactive" nil :count 4)
    ("nitv" "non-interactive" nil :count 20)
    ("nivbl" "non-invertible" nil :count 1)
    ("nixd" "non-indexed" nil :count 15)
    ("njtl" "nonjudgmental" nil :count 4)
    ("njtly" "nonjudgmentally" nil :count 2)
    ("nkow" "know" nil :count 4)
    ("nleqi'" "⋢" nil :count 1)
    ("nmtc" "nonmonotonic" nil :count 3)
    ("noteq'" "≠" nil :count 3)
    ("nsql" "nonsequential" nil :count 0)
    ("nstd" "nonstandard" nil :count 5)
    ("ntcl" "nontechnical" nil :count 1)
    ("ntl" "natural" nil :count 527)
    ("ntls" "naturalness" nil :count 14)
    ("ntly" "naturally" nil :count 167)
    ("ntmn" "non-termination" nil :count 14)
    ("ntmtg" "nonterminating" nil :count 0)
    ("ntn" "notation" nil :count 279)
    ("ntnl" "notational" nil :count 35)
    ("ntns" "notations" nil :count 12)
    ("ntny" "notationally" nil :count 4)
    ("nufby" "nonunifiablity" nil :count 14)
    ("nufl" "nonunifiable" nil :count 19)
    ("nufm" "nonuniform" nil :count 9)
    ("nv'c" "Nonviolent Communication" nil :count 4)
    ("nz" "normalize" nil :count 104)
    ("nzd" "normalized" nil :count 35)
    ("nzg" "normalizing" nil :count 29)
    ("nzl" "normalizable" nil :count 4)
    ("nzn" "normalization" nil :count 117)
    ("nzns" "normalizations" nil :count 1)
    ("nzs" "normalizes" nil :count 3)
    ("nzy" "normalizability" nil :count 26)
    ("o'c" "of course" nil :count 265)
    ("o'd'e" "ordinary differential equation" nil :count 1)
    ("o'd'es" "ordinary differential equations" nil :count 4)
    ("o'f" "objective function" nil :count 0)
    ("o'fs" "objective functions" nil :count 0)
    ("o'l" "object language" nil :count 106)
    ("o'lc" "object logic" nil :count 1)
    ("o'lcs" "object logics" nil :count 1)
    ("o'ls" "object languages" nil :count 16)
    ("o'm" "object model" nil :count 3)
    ("o'ms" "object models" nil :count 0)
    ("o'o" "object-oriented" nil :count 68)
    ("o'o'p" "object-oriented programming" nil :count 0)
    ("o'on" "object-orientation" nil :count 5)
    ("o'p'l'c" "omega-order polymorphic lambda-calculus" nil :count 1)
    ("o's" "object system" nil :count 37)
    ("o's't" "on second thought" nil :count 10)
    ("o'sm" "operational semantics" nil :count 13)
    ("o'ss" "object systems" nil :count 2)
    ("o't" "overloading tool" nil :count 0)
    ("o't'f" "of the form" nil :count 92)
    ("o'tp" "object type" nil :count 17)
    ("o'tps" "object types" nil :count 10)
    ("o'u't" "once upon a time" nil :count 1)
    ("o'w" "of which" nil :count 9)
    ("ocn" "occurrence" nil :count 225)
    ("ocns" "occurrences" nil :count 198)
    ("ocsn" "occlusion" nil :count 13)
    ("odg" "ordering" nil :count 1)
    ("ofr" "for" nil :count 28)
    ("ojn" "objection" nil :count 35)
    ("ojns" "objections" nil :count 24)
    ("ojt" "object" nil :count 899)
    ("ojtd" "objected" nil :count 4)
    ("ojtg" "objecting" nil :count 4)
    ("ojts" "objects" nil :count 709)
    ("ojv" "objective" nil :count 59)
    ("ojvs" "objectives" nil :count 12)
    ("ojvy" "objectively" nil :count 14)
    ("olc" "object-logic" nil :count 7)
    ("olcs" "object-logics" nil :count 3)
    ("olg" "object-language" nil :count 62)
    ("olgs" "object-languages" nil :count 14)
    ("omer" "Ömer" nil :count 8)
    ("opl" "optional" nil :count 148)
    ("oply" "optionally" nil :count 14)
    ("opn" "operation" nil :count 655)
    ("opnl" "operational" nil :count 7)
    ("opns" "operations" nil :count 1084)
    ("opr" "operator" nil :count 277)
    ("oprl" "operational" nil :count 251)
    ("oprly" "operationally" nil :count 41)
    ("oprs" "operators" nil :count 175)
    ("optg" "operating" nil :count 16)
    ("ordg" "ordering" nil :count 23)
    ("ost'" "on second thought" nil :count 12)
    ("ot" "to" nil :count 153)
    ("otf'" "of the form" nil :count 1)
    ("otoh" "on the other hand" nil :count 562)
    ("otp" "object-type" nil :count 16)
    ("otps" "object-types" nil :count 9)
    ("otu" "out" nil :count 6)
    ("ovn" "observation" nil :count 2)
    ("ovns" "observations" nil :count 4)
    ("ovw" "overview" nil :count 23)
    ("owrk" "work" nil :count 5)
    ("ows" "otherwise" nil :count 511)
    ("oz" "optimize" nil :count 175)
    ("ozby" "optimizability" nil :count 4)
    ("ozd" "optimized" nil :count 166)
    ("ozg" "optimizing" nil :count 80)
    ("ozn" "optimization" nil :count 573)
    ("ozns" "optimizations" nil :count 154)
    ("ozr" "optimizer" nil :count 4)
    ("ozs" "optimizes" nil :count 8)
    ("p'a" "partial application" nil :count 2)
    ("p'a'p" "proofs as programs" nil :count 3)
    ("p'a't" "propositions as types" nil :count 1)
    ("p'as" "partial applications" nil :count 0)
    ("p'b" "pattern binder" nil :count 0)
    ("p'c" "predicate calculus" nil :count 6)
    ("p'd" "program derivation" nil :count 14)
    ("p'ds" "program derivations" nil :count 0)
    ("p'e" "partial evaluation" nil :count 53)
    ("p'ed" "partial evaluated" nil :count 1)
    ("p'f" "partial function" nil :count 20)
    ("p'fs" "partial functions" nil :count 19)
    ("p'l" "programming language" nil :count 152)
    ("p'l'c" "polymorphic lambda calculus" nil :count 13)
    ("p'lc" "programmable logic" nil :count 1)
    ("p'ls" "programming languages" nil :count 93)
    ("p'm" "pattern matching" nil :count 64)
    ("p'o" "partial order" nil :count 51)
    ("p'o'v" "point of view" nil :count 35)
    ("p'o'vs" "points of view" nil :count 0)
    ("p'og" "partial ordering" nil :count 3)
    ("p'os" "partial orders" nil :count 5)
    ("p'p" "parametric polymorphism" nil :count 2)
    ("p'p't" "pair-producing type" nil :count 7)
    ("p'p'ts" "pair-producing types" nil :count 5)
    ("p'p'v" "pair-producing variable" nil :count 7)
    ("p'p'vs" "pair-producing variables" nil :count 6)
    ("p'ps" "progressive pairs" nil :count 1)
    ("p'r" "primitive recursion" nil :count 17)
    ("p's" "program synthesis" nil :count 30)
    ("p'ss" "program syntheses" nil :count 1)
    ("p'st" "proper subterm" nil :count 1)
    ("p'v" "program verification" nil :count 11)
    ("p'x" "program transformation" nil :count 90)
    ("p'xs" "program transformations" nil :count 4)
    ("p-eg" "partially evaluating" nil :count 0)
    ("pagm" "pre-algorithm" nil :count 38)
    ("pagms" "pre-algorithms" nil :count 12)
    ("pari" "pair" nil :count 9)
    ("pbl" "possible" nil :count 990)
    ("pbm" "problem" nil :count 1770)
    ("pbmc" "problematic" nil :count 97)
    ("pbms" "problems" nil :count 440)
    ("pbty" "possibility" nil :count 227)
    ("pbtys" "possibilities" nil :count 234)
    ("pbvr" "proto-behavior" nil :count 1)
    ("pbvrs" "proto-behaviors" nil :count 2)
    ("pby" "possibly" nil :count 404)
    ("pcdn" "precondition" nil :count 5)
    ("pcdns" "preconditions" nil :count 2)
    ("pcls" "protocols" nil :count 1)
    ("pcr" "processor" nil :count 3)
    ("pdfd" "predefined" nil :count 7)
    ("pdmn" "predomain" nil :count 13)
    ("pdmns" "predomains" nil :count 16)
    ("pdt" "predicate" nil :count 311)
    ("pdts" "predicates" nil :count 104)
    ("perhpas" "perhaps" nil :count 38)
    ("pf" "proof" nil :count 483)
    ("pfc" "preference" nil :count 89)
    ("pfcs" "preferences" nil :count 47)
    ("pfmc" "performance" nil :count 3)
    ("pfs" "proofs" nil :count 535)
    ("pgm" "program" nil :count 1068)
    ("pgmc" "programmatic" nil :count 14)
    ("pgmcy" "programmatically" nil :count 6)
    ("pgmd" "programmed" nil :count 21)
    ("pgmg" "programming" nil :count 1230)
    ("pgml" "programmable" nil :count 10)
    ("pgmr" "programmer" nil :count 147)
    ("pgmrs" "programmers" nil :count 158)
    ("pgms" "programs" nil :count 625)
    ("pha" "polyhedra" nil :count 1)
    ("phn" "polyhedron" nil :count 20)
    ("phns" "polyhedra" nil :count 6)
    ("pjn" "projection" nil :count 78)
    ("pjns" "projections" nil :count 111)
    ("pjr" "projector" nil :count 2)
    ("pjrs" "projectors" nil :count 0)
    ("pjt" "project" nil :count 601)
    ("pjtd" "projected" nil :count 4)
    ("pjtg" "projecting" nil :count 8)
    ("pjtr" "projector" nil :count 2)
    ("pjtrs" "projectors" nil :count 1)
    ("pjts" "projects" nil :count 132)
    ("pjv" "projective" nil :count 4)
    ("pll" "parallel" nil :count 621)
    ("pllm" "parallelism" nil :count 123)
    ("plln" "parallelization" nil :count 7)
    ("pllz" "parallelize" nil :count 12)
    ("pmc" "polymorphic" nil :count 279)
    ("pmcy" "polymorphically" nil :count 8)
    ("pmgr" "programmer" nil :count 2)
    ("pml" "polynomial" nil :count 39)
    ("pmls" "polynomials" nil :count 50)
    ("pmm" "polymorphism" nil :count 317)
    ("pmn" "permutation" nil :count 44)
    ("pmns" "permutations" nil :count 14)
    ("pmr" "parameter" nil :count 295)
    ("pmrs" "parameters" nil :count 344)
    ("pnc" "permanence" nil :count 14)
    ("pns" "polyhedra" nil :count 28)
    ("pnt" "permanent" nil :count 24)
    ("pnty" "permanently" nil :count 3)
    ("poitn" "point" nil :count 2)
    ("poitns" "points" nil :count 4)
    ("pordg" "preordering" nil :count 2)
    ("ppl" "propositional" nil :count 12)
    ("pply" "propositionally" nil :count 4)
    ("ppn" "proposition" nil :count 135)
    ("ppns" "propositions" nil :count 45)
    ("ppny" "propositionally" nil :count 3)
    ("pptys" "properties" nil :count 4)
    ("pr" "pair" nil :count 161)
    ("pr'd" "probability distribution" nil :count 0)
    ("pr'ds" "probability distributions" nil :count 1)
    ("prby" "probably" nil :count 1857)
    ("prpr" "pair-pair" nil :count 2)
    ("prs" "pairs" nil :count 98)
    ("prtc" "probabilistic" nil :count 74)
    ("prtcy" "probabilistically" nil :count 0)
    ("prty" "probability" nil :count 146)
    ("prtys" "probabilities" nil :count 24)
    ("psn" "position" nil :count 355)
    ("psnl" "positional" nil :count 10)
    ("psns" "positions" nil :count 43)
    ("psv" "positive" nil :count 123)
    ("psvs" "positives" nil :count 4)
    ("psvy" "positively" nil :count 12)
    ("pt" "point" nil :count 1029)
    ("pt'd" "partial derivative" nil :count 1)
    ("pt'ds" "partial derivatives" nil :count 3)
    ("pt'f" "point-free" nil :count 2)
    ("ptc" "parametric" nil :count 74)
    ("ptcr" "particular" nil :count 1)
    ("ptcy" "parametrically" nil :count 30)
    ("ptd" "pointed" nil :count 254)
    ("ptg" "pointing" nil :count 62)
    ("ptl" "partial" nil :count 206)
    ("ptly" "partially" nil :count 55)
    ("ptn" "pattern" nil :count 566)
    ("ptns" "patterns" nil :count 376)
    ("ptr" "pointer" nil :count 193)
    ("ptrs" "pointers" nil :count 107)
    ("pts" "points" nil :count 292)
    ("ptv" "primitive" nil :count 334)
    ("ptvs" "primitives" nil :count 302)
    ("ptvy" "primitively" nil :count 2)
    ("pty" "property" nil :count 696)
    ("ptys" "properties" nil :count 698)
    ("pufby" "pre-unifiability" nil :count 2)
    ("pufl" "pre-unifiable" nil :count 1)
    ("pufn" "pre-unification" nil :count 69)
    ("pufr" "pre-unifier" nil :count 22)
    ("pufrs" "pre-unifiers" nil :count 27)
    ("pufy" "pre-unify" nil :count 1)
    ("pv" "prove" nil :count 499)
    ("pvbl" "provable" nil :count 5)
    ("pvbty" "provability" nil :count 4)
    ("pvby" "provably" nil :count 5)
    ("pvd" "proved" nil :count 154)
    ("pvg" "proving" nil :count 125)
    ("pvr" "prover" nil :count 17)
    ("pvrs" "provers" nil :count 6)
    ("pvs" "previous" nil :count 575)
    ("pvsy" "previously" nil :count 107)
    ("pvt" "private" nil :count 0)
    ("pvw" "preview" nil :count 5)
    ("pz" "parametrize" nil :count 67)
    ("pzd" "parametrized" nil :count 210)
    ("pzg" "parametrizing" nil :count 15)
    ("pzn" "parametrization" nil :count 54)
    ("pzns" "parametrizations" nil :count 0)
    ("pzs" "parametrizes" nil :count 2)
    ("q'c" "equivalence class" nil :count 12)
    ("q'cs" "equivalence classes" nil :count 4)
    ("q'm" "quantum mechanics" nil :count 0)
    ("q'r" "equivalence relation" nil :count 32)
    ("q'rs" "equivalence relations" nil :count 16)
    ("qbl" "questionable" nil :count 14)
    ("qfd" "quantified" nil :count 57)
    ("qfg" "quantifying" nil :count 9)
    ("qfn" "quantification" nil :count 69)
    ("qfns" "quantifications" nil :count 0)
    ("qfr" "quantifier" nil :count 42)
    ("qfrs" "quantifiers" nil :count 73)
    ("qfs" "quantifies" nil :count 1)
    ("qfy" "quantify" nil :count 19)
    ("qfyd" "quantified" nil :count 13)
    ("qlfn" "qualification" nil :count 3)
    ("qlfns" "qualifications" nil :count 0)
    ("qlfr" "qualifier" nil :count 2)
    ("qlfrs" "qualifiers" nil :count 0)
    ("qlty" "quality" nil :count 6)
    ("qltys" "qualities" nil :count 0)
    ("qn" "question" nil :count 1083)
    ("qnd" "questioned" nil :count 3)
    ("qng" "questioning" nil :count 2)
    ("qnl" "equational" nil :count 7)
    ("qns" "questions" nil :count 529)
    ("qt" "quote" nil :count 10)
    ("qtn" "quaternion" nil :count 4)
    ("qtns" "quaternions" nil :count 1)
    ("qts" "quotes" nil :count 2)
    ("qty" "quantity" nil :count 7)
    ("qtys" "quantities" nil :count 3)
    ("qvc" "equivalence" nil :count 143)
    ("qvcs" "equivalences" nil :count 13)
    ("qvt" "equivalent" nil :count 268)
    ("qvts" "equivalents" nil :count 0)
    ("qvty" "equivalently" nil :count 151)
    ("r'a'p" "reasoning about programs" nil :count 2)
    ("r'b" "reactive behavior" nil :count 17)
    ("r'bs" "reactive behaviors" nil :count 29)
    ("r'd'd't" "recursively defined data type" nil :count 2)
    ("r'd'd'ts" "recursively defined data types" nil :count 2)
    ("r'e" "regular expression" nil :count 7)
    ("r'es" "regular expressions" nil :count 43)
    ("r'f" "representable functor" nil :count 22)
    ("r'fs" "representable functors" nil :count 35)
    ("r'h's" "right-hand side" nil :count 24)
    ("r'h'ss" "right-hand sides" nil :count 21)
    ("r'l" "reinforcement learning" nil :count 17)
    ("r'n'f" "reactive normal form" nil :count 3)
    ("r'o" "rigid object" nil :count 0)
    ("r'os" "rigid objects" nil :count 0)
    ("r'p'c" "rigid-path-check" nil :count 2)
    ("r'r" "rewrite rule" nil :count 89)
    ("r'rs" "rewrite rules" nil :count 138)
    ("r't" "referentially transparent" nil :count 10)
    ("r't's" "run-time system" nil :count 6)
    ("r'ty" "referential transparency" nil :count 10)
    ("r'v" "reactive value" nil :count 24)
    ("r'vs" "reactive values" nil :count 56)
    ("r'w" "roughly well-typed" nil :count 2)
    ("rarrow'" "→" nil :count 13)
    ("rastg" "re-associating" nil :count 0)
    ("rbly" "arbitrarily" nil :count 43)
    ("rbml" "RBML" nil :count 85)
    ("rby" "arbitrary" nil :count 406)
    ("rcbn" "recombination" nil :count 1)
    ("rcd" "recommended" nil :count 2)
    ("rcn" "recursion" nil :count 263)
    ("rcns" "recursions" nil :count 32)
    ("rcptn" "recomputation" nil :count 4)
    ("rcst" "reconstruct" nil :count 0)
    ("rcsts" "reconstructs" nil :count 0)
    ("rcv" "recursive" nil :count 508)
    ("rcvy" "recursively" nil :count 168)
    ("rd" "rigid" nil :count 127)
    ("rdby" "reducibility" nil :count 1)
    ("rdc" "reduce" nil :count 173)
    ("rdcd" "reduced" nil :count 40)
    ("rdcg" "reducing" nil :count 68)
    ("rdcl" "reducible" nil :count 1)
    ("rdcs" "reduces" nil :count 30)
    ("rdf" "redefine" nil :count 32)
    ("rdfd" "redefined" nil :count 10)
    ("rdfg" "redefining" nil :count 1)
    ("rdfl" "rigid-flexible" nil :count 54)
    ("rdfn" "redefinition" nil :count 3)
    ("rdfs" "redefines" nil :count 0)
    ("rdn" "reduction" nil :count 193)
    ("rdns" "reductions" nil :count 39)
    ("rdrd" "rigid-rigid" nil :count 150)
    ("rfc" "reference" nil :count 284)
    ("rfcd" "referenced" nil :count 10)
    ("rfcs" "references" nil :count 241)
    ("rfd" "reified" nil :count 9)
    ("rfg" "reifying" nil :count 12)
    ("rfl" "referential" nil :count 13)
    ("rfmn" "reformulation" nil :count 16)
    ("rfmns" "reformulations" nil :count 2)
    ("rfmt" "reformulate" nil :count 20)
    ("rfmtd" "reformulated" nil :count 1)
    ("rfmtg" "reformulating" nil :count 6)
    ("rfn" "reification" nil :count 95)
    ("rfns" "reifications" nil :count 2)
    ("rfr" "reifier" nil :count 1)
    ("rfy" "reify" nil :count 24)
    ("rfys" "reifies" nil :count 5)
    ("rgt" "right" nil :count 3)
    ("rgz" "recognize" nil :count 2)
    ("ridc" "reintroduce" nil :count 2)
    ("ritp" "reinterpret" nil :count 3)
    ("ritpd" "reinterpreted" nil :count 1)
    ("ritpg" "reinterpreting" nil :count 2)
    ("ritpn" "reinterpretation" nil :count 2)
    ("ritpns" "reinterpretations" nil :count 1)
    ("rjn" "rejection" nil :count 1)
    ("rl" "rule" nil :count 313)
    ("rl'" "rl" nil :count 13)
    ("rlcn" "relocation" nil :count 31)
    ("rlcns" "relocations" nil :count 1)
    ("rln" "relation" nil :count 442)
    ("rlnl" "relational" nil :count 26)
    ("rlns" "relations" nil :count 151)
    ("rlp" "relationship" nil :count 262)
    ("rlps" "relationships" nil :count 80)
    ("rls" "rules" nil :count 321)
    ("rpbl" "representable" nil :count 243)
    ("rpc" "replace" nil :count 782)
    ("rpcd" "replaced" nil :count 198)
    ("rpcg" "replacing" nil :count 246)
    ("rpcs" "replaces" nil :count 43)
    ("rpct" "replacement" nil :count 81)
    ("rpcts" "replacements" nil :count 11)
    ("rpn" "representation" nil :count 1538)
    ("rpnl" "representational" nil :count 32)
    ("rpns" "representations" nil :count 568)
    ("rpny" "representationally" nil :count 2)
    ("rpt" "represent" nil :count 479)
    ("rptbl" "representable" nil :count 1)
    ("rptd" "represented" nil :count 286)
    ("rptg" "representing" nil :count 196)
    ("rpts" "represents" nil :count 98)
    ("rptv" "representative" nil :count 8)
    ("rptvs" "representatives" nil :count 1)
    ("rpv" "respective" nil :count 6)
    ("rpvy" "respectively" nil :count 35)
    ("rpzn" "reparametrization" nil :count 3)
    ("rqd" "required" nil :count 249)
    ("rqg" "requiring" nil :count 37)
    ("rqr" "require" nil :count 400)
    ("rqrd" "required" nil :count 22)
    ("rqrg" "requiring" nil :count 60)
    ("rqrs" "requires" nil :count 371)
    ("rqt" "requirement" nil :count 156)
    ("rqts" "requirements" nil :count 114)
    ("rsn" "resolution" nil :count 161)
    ("rsns" "resolutions" nil :count 6)
    ("rtn" "rotation" nil :count 83)
    ("rtnl" "rotational" nil :count 3)
    ("rtns" "rotations" nil :count 20)
    ("rvlt" "re-evaluate" nil :count 2)
    ("rvltd" "re-evaluated" nil :count 0)
    ("rvn" "revolution" nil :count 9)
    ("rvns" "revolutions" nil :count 5)
    ("rvy" "respectively" nil :count 120)
    ("rxps" "re-express" nil :count 2)
    ("s'a" "such as" nil :count 407)
    ("s'c" "sufficient condition" nil :count 24)
    ("s'cs" "sufficient conditions" nil :count 0)
    ("s'ctn" "success continuation" nil :count 62)
    ("s'ctns" "success continuations" nil :count 22)
    ("s'e" "side-effect" nil :count 12)
    ("s'e'c" "semantic editor combinator" nil :count 7)
    ("s'e'cs" "semantic editor combinators" nil :count 7)
    ("s'ec" "syntactic equivalence" nil :count 4)
    ("s'eg" "software engineering" nil :count 8)
    ("s'es" "side-effects" nil :count 19)
    ("s'f" "solved form" nil :count 31)
    ("s'i" "structural induction" nil :count 16)
    ("s'j" "syntactic judgment" nil :count 4)
    ("s'js" "syntactic judgments" nil :count 1)
    ("s'm" "state machine" nil :count 0)
    ("s'ms" "state machines" nil :count 0)
    ("s'n" "strong normalization" nil :count 26)
    ("s'ng" "strongly normalizing" nil :count 7)
    ("s'nz" "strongly normalize" nil :count 4)
    ("s'nzs" "strongly normalizes" nil :count 0)
    ("s'o" "second-order" nil :count 56)
    ("s'o'm" "second-order matching" nil :count 10)
    ("s'o'u" "second-order unification" nil :count 3)
    ("s'p" "special purpose" nil :count 11)
    ("s'p'o" "strict partial order" nil :count 8)
    ("s'p'os" "strict partial orders" nil :count 0)
    ("s'ps" "special predicates" nil :count 1)
    ("s'r" "simplification rule" nil :count 3)
    ("s'rs" "simplification rules" nil :count 2)
    ("s't" "such that" nil :count 357)
    ("s't'c" "simply typed calculus" nil :count 4)
    ("s't'l'c" "simply typed lambda-calculus" nil :count 26)
    ("s't'l's" "same top level structure" nil :count 2)
    ("s't'm" "space-time model" nil :count 6)
    ("s't'ms" "space-time models" nil :count 10)
    ("s'td" "simply typed" nil :count 25)
    ("s'tp" "simple type" nil :count 1)
    ("s'tps" "simple types" nil :count 1)
    ("s'v" "scientific visualization" nil :count 2)
    ("s'x" "specification transformation" nil :count 5)
    ("s'xs" "specification transformations" nil :count 0)
    ("sb'i" "substitution instance" nil :count 0)
    ("sb'is" "substitution instances" nil :count 1)
    ("sbn" "substitution" nil :count 667)
    ("sbns" "substitutions" nil :count 312)
    ("sbt" "substitute" nil :count 93)
    ("sbtd" "substituted" nil :count 29)
    ("sbtg" "substituting" nil :count 33)
    ("sbtn" "subtraction" nil :count 1)
    ("sbts" "substitutes" nil :count 7)
    ("sbty" "substitutivity" nil :count 1)
    ("sbv" "substitutive" nil :count 22)
    ("sbvy" "substitutivity" nil :count 9)
    ("scn" "section" nil :count 929)
    ("scns" "sections" nil :count 99)
    ("scs" "synchronous" nil :count 92)
    ("scsy" "synchronously" nil :count 4)
    ("scz" "synchronize" nil :count 7)
    ("sczd" "synchronized" nil :count 9)
    ("sczg" "synchronizing" nil :count 0)
    ("sczn" "synchronization" nil :count 67)
    ("sczs" "synchronizes" nil :count 0)
    ("sd" "second" nil :count 1394)
    ("sds" "seconds" nil :count 27)
    ("sdvn" "subderivation" nil :count 1)
    ("sdy" "secondly" nil :count 3)
    ("sfc" "specific" nil :count 406)
    ("sfcs" "specifics" nil :count 49)
    ("sfcy" "specifically" nil :count 268)
    ("sfn" "specification" nil :count 988)
    ("sfns" "specifications" nil :count 329)
    ("sft" "sufficient" nil :count 106)
    ("sfty" "sufficiently" nil :count 46)
    ("sfy" "specify" nil :count 262)
    ("sfyd" "specified" nil :count 204)
    ("sfyg" "specifying" nil :count 88)
    ("sfyr" "specifier" nil :count 4)
    ("sfyrs" "specifiers" nil :count 0)
    ("sfys" "specifies" nil :count 23)
    ("sg" "something" nil :count 1810)
    ("sgp" "semigroup" nil :count 6)
    ("sgps" "semigroups" nil :count 3)
    ("sgr" "signature" nil :count 187)
    ("sgrs" "signatures" nil :count 108)
    ("shoudl" "should" nil :count 3)
    ("shouldnt" "shouldn't" nil :count 16)
    ("si" "is" nil :count 6)
    ("siad" "said" nil :count 15)
    ("sicne" "since" nil :count 91)
    ("simeq'" "≃" nil :count 1)
    ("simlify" "simplify" nil :count 1)
    ("sivl" "subinterval" nil :count 1)
    ("sivls" "subintervals" nil :count 2)
    ("sjn" "surjection" nil :count 3)
    ("sjns" "surjections" nil :count 5)
    ("sjt" "subject" nil :count 37)
    ("sjtd" "subjected" nil :count 5)
    ("sjts" "subjects" nil :count 1)
    ("sjv" "subjective" nil :count 20)
    ("sjvy" "subjectively" nil :count 11)
    ("slcn" "selection" nil :count 11)
    ("sln" "solution" nil :count 640)
    ("slns" "solutions" nil :count 184)
    ("smc" "semantic" nil :count 575)
    ("smcs" "semantics" nil :count 1023)
    ("smcy" "semantically" nil :count 136)
    ("smn" "simplification" nil :count 271)
    ("smns" "simplifications" nil :count 65)
    ("smy" "simplify" nil :count 473)
    ("smyd" "simplified" nil :count 172)
    ("smyg" "simplifying" nil :count 130)
    ("smyr" "simplifier" nil :count 42)
    ("smyrs" "simplifiers" nil :count 1)
    ("smys" "simplifies" nil :count 79)
    ("snc" "synthetic" nil :count 73)
    ("sncy" "synthetically" nil :count 2)
    ("sns" "synthesis" nil :count 144)
    ("snss" "syntheses" nil :count 6)
    ("snz" "synthesize" nil :count 75)
    ("snzd" "synthesized" nil :count 33)
    ("snzg" "synthesizing" nil :count 24)
    ("snzs" "synthesizes" nil :count 0)
    ("soem" "some" nil :count 81)
    ("spbm" "subproblem" nil :count 1)
    ("spbms" "subproblems" nil :count 4)
    ("spl" "special" nil :count 479)
    ("spls" "specials" nil :count 5)
    ("sply" "specially" nil :count 25)
    ("spt" "separate" nil :count 3)
    ("sql" "sequential" nil :count 446)
    ("sqly" "sequentially" nil :count 28)
    ("sqn" "sequence" nil :count 452)
    ("sqns" "sequences" nil :count 190)
    ("sqty" "sequentiality" nil :count 94)
    ("srv" "surjective" nil :count 21)
    ("srvly" "surjectively" nil :count 4)
    ("srvty" "surjectivity" nil :count 13)
    ("ssg" "structure-sharing" nil :count 25)
    ("st'" "such that" nil :count 1)
    ("stc" "syntactic" nil :count 149)
    ("stcly" "syntactically" nil :count 0)
    ("stcy" "syntactically" nil :count 19)
    ("std" "standard" nil :count 673)
    ("stds" "standards" nil :count 8)
    ("stdz" "standardize" nil :count 6)
    ("stdzn" "standardization" nil :count 2)
    ("stfd" "satisfied" nil :count 28)
    ("stfg" "satisfying" nil :count 41)
    ("stfl" "satisfiable" nil :count 6)
    ("stfn" "satisfaction" nil :count 42)
    ("stfs" "satisfies" nil :count 20)
    ("stfy" "satisfy" nil :count 78)
    ("stm" "system" nil :count 560)
    ("stmc" "systematic" nil :count 37)
    ("stmcy" "systematically" nil :count 32)
    ("stms" "systems" nil :count 336)
    ("stmt" "statement" nil :count 105)
    ("stmts" "statements" nil :count 44)
    ("sty" "satisfy" nil :count 134)
    ("styd" "satisfied" nil :count 70)
    ("styg" "satisfying" nil :count 58)
    ("stys" "satisfies" nil :count 43)
    ("svl" "several" nil :count 629)
    ("sx" "syntax" nil :count 466)
    ("sxn" "subexpression" nil :count 3)
    ("sxns" "subexpressions" nil :count 0)
    ("sxpn" "s-expression" nil :count 3)
    ("sz" "specialize" nil :count 245)
    ("szd" "specialized" nil :count 203)
    ("szg" "specializing" nil :count 67)
    ("szn" "specialization" nil :count 141)
    ("szns" "specializations" nil :count 62)
    ("szr" "specializer" nil :count 9)
    ("szs" "specializes" nil :count 130)
    ("t'b" "tangent bundle" nil :count 0)
    ("t'bs" "tangent bundles" nil :count 0)
    ("t'c" "type-check" nil :count 9)
    ("t'c'm" "type class morphism" nil :count 16)
    ("t'c'ms" "type class morphisms" nil :count 22)
    ("t'cg" "type checking" nil :count 83)
    ("t'cr" "type checker" nil :count 5)
    ("t'd" "temporal deviation" nil :count 3)
    ("t'f" "the following" nil :count 1461)
    ("t'f'p" "tangible functional programming" nil :count 5)
    ("t'i" "type inference" nil :count 191)
    ("t'id" "type-instantiated" nil :count 9)
    ("t'in" "type-instantiation" nil :count 4)
    ("t'itd" "tolerably ill-typed" nil :count 5)
    ("t'itds" "tolerable ill-typedness" nil :count 0)
    ("t'l" "term language" nil :count 73)
    ("t'l'c" "typed lambda calculus" nil :count 67)
    ("t'l'cs" "typed lambda-calculi" nil :count 4)
    ("t'l'i" "term language interface" nil :count 2)
    ("t'l's" "top level structure" nil :count 28)
    ("t'ls" "term languages" nil :count 4)
    ("t'o" "third-order" nil :count 13)
    ("t'ocn" "term-occurence" nil :count 2)
    ("t'ocns" "term-occurrences" nil :count 1)
    ("t'p" "theorem proving" nil :count 95)
    ("t'pr" "theorem prover" nil :count 3)
    ("t'r" "tail recursive" nil :count 3)
    ("t't" "time transform" nil :count 32)
    ("t'td" "time transformed" nil :count 0)
    ("t'tn" "time transformation" nil :count 22)
    ("t'tns" "time transformations" nil :count 3)
    ("t'ts" "time transforms" nil :count 9)
    ("t'v" "type variable" nil :count 53)
    ("t'vs" "type variables" nil :count 124)
    ("t'w" "to which" nil :count 0)
    ("ta'v" "tangible value" nil :count 5)
    ("ta'vs" "tangible values" nil :count 8)
    ("taht" "that" nil :count 55)
    ("tcl" "technical" nil :count 229)
    ("tcly" "technically" nil :count 15)
    ("tcy" "technology" nil :count 111)
    ("tcys" "technologies" nil :count 6)
    ("td" "third" nil :count 162)
    ("teh" "the" nil :count 1078)
    ("tfr" "therefore" nil :count 162)
    ("tgy" "terminology" nil :count 18)
    ("thats" "that's" nil :count 1)
    ("theres" "there's" nil :count 2)
    ("theri" "their" nil :count 4)
    ("theyve" "they've" nil :count 1)
    ("thm" "theorem" nil :count 185)
    ("thms" "theorems" nil :count 102)
    ("thsi" "this" nil :count 124)
    ("thta" "that" nil :count 29)
    ("thy" "theory" nil :count 293)
    ("thys" "theories" nil :count 25)
    ("tiem" "time" nil :count 82)
    ("tiems" "times" nil :count 15)
    ("times'" "×" nil :count 11)
    ("tm" "term" nil :count 1270)
    ("tm'i" "term inference" nil :count 25)
    ("tml" "terminal" nil :count 21)
    ("tmls" "terminals" nil :count 0)
    ("tmn" "termination" nil :count 97)
    ("tms" "terms" nil :count 1258)
    ("tmt" "terminate" nil :count 44)
    ("tmtd" "terminated" nil :count 13)
    ("tmtg" "terminating" nil :count 17)
    ("tmts" "terminates" nil :count 13)
    ("tmv" "term-variable" nil :count 1)
    ("tnq" "technique" nil :count 277)
    ("tnqs" "techniques" nil :count 209)
    ("top'" "⊤" nil :count 1)
    ("tp" "type" nil :count 7101)
    ("tp'c" "type class" nil :count 6)
    ("tp'cs" "type classes" nil :count 1)
    ("tp'f" "type family" nil :count 9)
    ("tp'fs" "type families" nil :count 2)
    ("tp't" "type theory" nil :count 3)
    ("tpbl" "typable" nil :count 1)
    ("tpd" "typed" nil :count 440)
    ("tpg" "typing" nil :count 361)
    ("tpgs" "typings" nil :count 19)
    ("tpl" "tuple" nil :count 11)
    ("tps" "types" nil :count 3044)
    ("tptp" "type-type" nil :count 4)
    ("tr'c" "transitive closure" nil :count 2)
    ("ty'c" "type class" nil :count 9)
    ("ty'cs" "type classes" nil :count 1)
    ("u'c" "unification context" nil :count 36)
    ("u'cs" "unification contexts" nil :count 3)
    ("u'e" "unification equivalent" nil :count 5)
    ("u'i" "user interface" nil :count 21)
    ("u'in" "user interaction" nil :count 1)
    ("u'is" "user interfaces" nil :count 4)
    ("u'l" "unification logic" nil :count 5)
    ("u'p" "unification problem" nil :count 151)
    ("u'ps" "unification problems" nil :count 142)
    ("u'q" "universal quantification" nil :count 5)
    ("u'qd" "universally quantified" nil :count 0)
    ("ucdl" "unconditional" nil :count 0)
    ("ucvtl" "unconventional" nil :count 5)
    ("udcbl" "undecidable" nil :count 9)
    ("udfd" "undefined" nil :count 851)
    ("ufby" "unifiability" nil :count 104)
    ("ufd" "unified" nil :count 66)
    ("ufg" "unifying" nil :count 90)
    ("ufl" "unifiable" nil :count 63)
    ("ufm" "uniform" nil :count 121)
    ("ufms" "uniforms" nil :count 1)
    ("ufmy" "uniformly" nil :count 16)
    ("ufn" "unification" nil :count 691)
    ("ufns" "unifications" nil :count 13)
    ("ufr" "unifier" nil :count 222)
    ("ufrs" "unifiers" nil :count 190)
    ("ufs" "unifies" nil :count 54)
    ("ufy" "unify" nil :count 120)
    ("ufys" "unifies" nil :count 6)
    ("uiprt" "unimportant" nil :count 15)
    ("uitd" "uninterested" nil :count 1)
    ("uitg" "uninteresting" nil :count 10)
    ("uizd" "uninitialized" nil :count 2)
    ("uncly" "unnecessarily" nil :count 47)
    ("uncy" "unnecessary" nil :count 144)
    ("unq" "unique" nil :count 1)
    ("untl" "unnatural" nil :count 17)
    ("untly" "unnaturally" nil :count 0)
    ("uozd" "unoptimized" nil :count 5)
    ("upvd" "unproved" nil :count 0)
    ("usfbl" "unsatisfiable" nil :count 3)
    ("ustyd" "unsatisfied" nil :count 2)
    ("ustyg" "unsatisfying" nil :count 2)
    ("utpd" "untyped" nil :count 18)
    ("uvfyd" "unverified" nil :count 0)
    ("uvl" "universal" nil :count 208)
    ("uvls" "universals" nil :count 19)
    ("uvltd" "unevaluated" nil :count 3)
    ("uvly" "universally" nil :count 24)
    ("uvy" "universally" nil :count 18)
    ("v'b" "variable binding" nil :count 0)
    ("v'd" "virtual device" nil :count 8)
    ("v'ds" "virtual devices" nil :count 1)
    ("v'm" "virtual machine" nil :count 11)
    ("v'ms" "virtual machines" nil :count 2)
    ("v'p" "view point" nil :count 5)
    ("v'r" "virtual reality" nil :count 5)
    ("v's" "vector space" nil :count 71)
    ("v'ss" "vector spaces" nil :count 94)
    ("v't" "virtual trackball" nil :count 9)
    ("v'w" "virtual world" nil :count 14)
    ("v'ws" "virtual worlds" nil :count 9)
    ("v'x" "viewing transform" nil :count 18)
    ("v'xs" "viewing transforms" nil :count 2)
    ("vbl" "variable" nil :count 1035)
    ("vbls" "variables" nil :count 841)
    ("vfcn" "verification" nil :count 2)
    ("vfd" "verified" nil :count 17)
    ("vfg" "verifying" nil :count 4)
    ("vfl" "verifiable" nil :count 0)
    ("vfn" "verification" nil :count 59)
    ("vfy" "verify" nil :count 55)
    ("vfyd" "verified" nil :count 50)
    ("vfyg" "verifying" nil :count 1)
    ("vfyr" "verifier" nil :count 0)
    ("vfyrs" "verifiers" nil :count 0)
    ("vfys" "verifies" nil :count 3)
    ("vln" "evaluation" nil :count 344)
    ("vlns" "evaluations" nil :count 26)
    ("vlt" "evaluate" nil :count 104)
    ("vltd" "evaluated" nil :count 71)
    ("vltg" "evaluating" nil :count 51)
    ("vlts" "evaluates" nil :count 20)
    ("vpt" "viewpoint" nil :count 19)
    ("vpts" "viewpoints" nil :count 0)
    ("vrml" "VRML" nil :count 23)
    ("vsl" "visual" nil :count 3)
    ("vsn" "version" nil :count 1393)
    ("vsns" "versions" nil :count 311)
    ("vtm" "variable-term" nil :count 39)
    ("vtp" "variable-type" nil :count 3)
    ("vvtm" "virtual-variable-term" nil :count 0)
    ("vz" "visualize" nil :count 19)
    ("vzd" "visualized" nil :count 7)
    ("vzg" "visualizing" nil :count 15)
    ("vzn" "visualization" nil :count 48)
    ("vzns" "visualizations" nil :count 25)
    ("vzr" "visualizer" nil :count 1)
    ("vzrs" "visualizers" nil :count 2)
    ("vzs" "visualizes" nil :count 1)
    ("w'c" "world coordinate" nil :count 3)
    ("w'cs" "world coordinates" nil :count 1)
    ("w'd" "well-defined" nil :count 1)
    ("w'f" "well formed" nil :count 12)
    ("w'f'o" "well founded ordering" nil :count 7)
    ("w'f'os" "well founded orderings" nil :count 1)
    ("w'fs" "well formedness" nil :count 3)
    ("w'h'n'f" "weak head normal form" nil :count 10)
    ("w'h'r" "weak head reduction" nil :count 1)
    ("w'l'g" "without loss of generality" nil :count 6)
    ("w'p" "word processing" nil :count 3)
    ("w'r't" "with respect to" nil :count 119)
    ("w'v" "weakly valid" nil :count 2)
    ("w'w" "with which" nil :count 3)
    ("waht" "what" nil :count 30)
    ("wasnt" "wasn't" nil :count 22)
    ("wch" "which" nil :count 6211)
    ("wdfd" "well-defined" nil :count 20)
    ("werent" "weren't" nil :count 8)
    ("weve" "we've" nil :count 15)
    ("wh" "with" nil :count 17512)
    ("whehter" "whether" nil :count 17)
    ("whn" "within" nil :count 8)
    ("wiht" "with" nil :count 2)
    ("wkdd" "well-kinded" nil :count 7)
    ("wnat" "want" nil :count 14)
    ("wo" "without" nil :count 1609)
    ("wont" "won't" nil :count 56)
    ("wont'" "wont" nil :count 3)
    ("woudl" "would" nil :count 20)
    ("wouldnt" "wouldn't" nil :count 47)
    ("wrok" "work" nil :count 12)
    ("wroking" "working" nil :count 3)
    ("wrt'" "with respect to" nil :count 11)
    ("wtbl" "well-typable" nil :count 1)
    ("wtd" "well-typed" nil :count 295)
    ("wtds" "well-typedness" nil :count 31)
    ("x'p" "transformation path" nil :count 3)
    ("x'ps" "transformation paths" nil :count 1)
    ("x'q" "existential quantification" nil :count 6)
    ("x'qd" "existentially quantified" nil :count 0)
    ("x'r" "transformation rule" nil :count 29)
    ("x'rs" "transformation rules" nil :count 72)
    ("x's" "transformation system" nil :count 7)
    ("xcn" "exclusion" nil :count 2)
    ("xcv" "exclusive" nil :count 32)
    ("xcvy" "exclusively" nil :count 0)
    ("xfbl" "transformable" nil :count 3)
    ("xfd" "transformed" nil :count 63)
    ("xfg" "transforming" nil :count 61)
    ("xfl" "transformational" nil :count 12)
    ("xfm" "transform" nil :count 498)
    ("xfmd" "transformed" nil :count 10)
    ("xfmg" "transforming" nil :count 11)
    ("xfmr" "transformer" nil :count 2)
    ("xfms" "transforms" nil :count 145)
    ("xfn" "transformation" nil :count 866)
    ("xfnl" "transformational" nil :count 4)
    ("xfns" "transformations" nil :count 394)
    ("xfr" "transformer" nil :count 44)
    ("xfrs" "transformers" nil :count 23)
    ("xln" "translation" nil :count 411)
    ("xlnl" "translational" nil :count 0)
    ("xlns" "translations" nil :count 39)
    ("xlt" "translate" nil :count 171)
    ("xltd" "translated" nil :count 38)
    ("xltg" "translating" nil :count 44)
    ("xltn" "translation" nil :count 2)
    ("xltr" "translator" nil :count 12)
    ("xlts" "translates" nil :count 11)
    ("xn" "transition" nil :count 194)
    ("xnl" "transitional" nil :count 2)
    ("xns" "transitions" nil :count 48)
    ("xpl" "example" nil :count 1486)
    ("xpln" "explanation" nil :count 250)
    ("xplns" "explanations" nil :count 36)
    ("xpls" "examples" nil :count 1009)
    ("xpn" "expression" nil :count 726)
    ("xpnl" "exponential" nil :count 0)
    ("xpns" "expressions" nil :count 600)
    ("xps" "express" nil :count 280)
    ("xpsd" "expressed" nil :count 197)
    ("xpsg" "expressing" nil :count 65)
    ("xpsl" "expressible" nil :count 1)
    ("xpss" "expresses" nil :count 2)
    ("xpsv" "expressive" nil :count 12)
    ("xpv" "expressive" nil :count 47)
    ("xpvs" "expressiveness" nil :count 30)
    ("xrl" "external" nil :count 107)
    ("xrly" "externally" nil :count 10)
    ("xrz" "externalize" nil :count 7)
    ("xrzd" "externalized" nil :count 1)
    ("xrzg" "externalizing" nil :count 0)
    ("xrzn" "externalization" nil :count 8)
    ("xrzs" "externalizes" nil :count 0)
    ("xsl" "extensional" nil :count 35)
    ("xslty" "extensionality" nil :count 3)
    ("xsly" "extensionally" nil :count 21)
    ("xsty" "extensionality" nil :count 9)
    ("xtbl" "extensible" nil :count 49)
    ("xtby" "extensibility" nil :count 24)
    ("xtc" "existence" nil :count 34)
    ("xtd" "extend" nil :count 252)
    ("xtdd" "extended" nil :count 154)
    ("xtdg" "extending" nil :count 91)
    ("xtds" "extends" nil :count 78)
    ("xtg" "existing" nil :count 187)
    ("xtl" "existential" nil :count 58)
    ("xtls" "existentials" nil :count 8)
    ("xtly" "existentially" nil :count 50)
    ("xtn" "extension" nil :count 234)
    ("xtns" "extensions" nil :count 149)
    ("xtv" "extensive" nil :count 11)
    ("xtvy" "extensively" nil :count 4)
    ("youd" "you'd" nil :count 1)
    ("youre" "you're" nil :count 5)
    ("youve" "you've" nil :count 8)
   ))

(define-abbrev-table 'haskell-mode-abbrev-table
  '(
    ("Td" "Td" nil :count 4)
    ("alt" "Alt" nil :count 2)
    ("df" "df" nil :count 30)
    ("fo" "fo" nil :count 8)
   ))

(define-abbrev-table 'tex-mode-abbrev-table
  '(
    ("a'cn" "$\\alpha$ conversion" nil :count 52)
    ("a'ec" "$\\alpha$ equivalence" nil :count 13)
    ("a'et" "$\\alpha$ equivalent" nil :count 5)
    ("b'cn" "$\\beta$ conversion" nil :count 3)
    ("b'nf" "$\\beta$ normal form" nil :count 31)
    ("b'r" "$\\beta$ reduce" nil :count 9)
    ("b'rd" "$\\beta$ reduced" nil :count 3)
    ("b'rn" "$\\beta$ reduction" nil :count 32)
    ("be'nf" "$\\beta\\eta$ normal form" nil :count 8)
    ("benf" "$\\beta\\eta$ normal form" nil :count 27)
    ("benfs" "$\\beta\\eta$ normal forms" nil :count 4)
    ("d't'l'c" "dependent typed $\\lambda$ calculus" nil :count 1)
    ("e'e" "$\\eta$ expand" nil :count 15)
    ("e'ed" "$\\eta$ expanded" nil :count 3)
    ("e'en" "$\\eta$ expansion" nil :count 22)
    ("e'rn" "$\\eta$ reduction" nil :count 11)
    ("gd" "gd" nil :count 17)
    ("ith'" "$i$th" nil :count 19)
    ("l'c" "$\\lambda$ calculus" nil :count 43)
    ("l'cs" "$\\lambda$ calculi" nil :count 9)
    ("l'cvby" "$\\lambda$ convertability" nil :count 4)
    ("l'ec" "$\\lambda$ equivalence" nil :count 2)
    ("l'mm" "$\\lambda$ morphism" nil :count 3)
    ("l'mms" "$\\lambda$ morphisms" nil :count 5)
    ("lbehnf" "long $\\beta\\eta$ normal form" nil :count 8)
    ("lbenf" "long $\\beta\\eta$ normal form" nil :count 18)
    ("lbepnf" "long $\\beta\\eta$ product normal form" nil :count 3)
    ("lcvn" "$\\lambda$ conversion" nil :count 1)
    ("lfhnf" "$\\lambda$-free head normal form" nil :count 6)
    ("lpg" "$\\lambda$Prolog" nil :count 34)
    ("lppg" "$\\Lpi$Prolog" nil :count 1)
    ("ltm" "$\\lambda$ term" nil :count 1)
    ("ltms" "$\\lambda$ terms" nil :count 1)
    ("o'p'l'c" "$\\omega$-order polymorphic $\\lambda$ calculus" nil :count 7)
    ("p'l'c" "polymorphic $\\lambda$ calculus" nil :count 19)
    ("s't'l'c" "simply typed $\\lambda$ calculus" nil :count 45)
    ("t'l'c" "typed $\\lambda$ calculus" nil :count 35)
    ("t'l'cs" "typed $\\lambda$ calculi" nil :count 8)
   ))

