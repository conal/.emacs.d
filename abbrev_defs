;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'Custom-mode-abbrev-table '())

(define-abbrev-table 'Info-edit-mode-abbrev-table '())

(define-abbrev-table 'Man-mode-abbrev-table '())

(define-abbrev-table 'antlr-mode-abbrev-table '())

(define-abbrev-table 'apropos-mode-abbrev-table '())

(define-abbrev-table 'asm-mode-abbrev-table '())

(define-abbrev-table 'awk-mode-abbrev-table '())

(define-abbrev-table 'bibtex-mode-abbrev-table '())

(define-abbrev-table 'bookmark-bmenu-mode-abbrev-table '())

(define-abbrev-table 'bookmark-edit-annotation-mode-abbrev-table '())

(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'c-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'cabal-mode-abbrev-table '())

(define-abbrev-table 'calendar-mode-abbrev-table '())

(define-abbrev-table 'change-log-mode-abbrev-table '())

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'conf-colon-mode-abbrev-table '())

(define-abbrev-table 'conf-javaprop-mode-abbrev-table '())

(define-abbrev-table 'conf-ppd-mode-abbrev-table '())

(define-abbrev-table 'conf-space-mode-abbrev-table '())

(define-abbrev-table 'conf-unix-mode-abbrev-table '())

(define-abbrev-table 'conf-windows-mode-abbrev-table '())

(define-abbrev-table 'conf-xdefaults-mode-abbrev-table '())

(define-abbrev-table 'csharp-mode-abbrev-table '())

(define-abbrev-table 'css-mode-abbrev-table '())

(define-abbrev-table 'debugger-mode-abbrev-table '())

(define-abbrev-table 'delphi-mode-abbrev-table '())

(define-abbrev-table 'diff-mode-abbrev-table '())

(define-abbrev-table 'display-time-world-mode-abbrev-table '())

(define-abbrev-table 'doc-view-mode-abbrev-table '())

(define-abbrev-table 'doctex-mode-abbrev-table '())

(define-abbrev-table 'doctor-mode-abbrev-table '())

(define-abbrev-table 'edit-abbrevs-mode-abbrev-table '())

(define-abbrev-table 'elisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'epa-info-mode-abbrev-table '())

(define-abbrev-table 'epa-key-list-mode-abbrev-table '())

(define-abbrev-table 'epa-key-mode-abbrev-table '())

(define-abbrev-table 'erc-chanlist-mode-abbrev-table '())

(define-abbrev-table 'erc-list-menu-mode-abbrev-table '())

(define-abbrev-table 'erc-mode-abbrev-table '())

(define-abbrev-table 'eshell-mode-abbrev-table '())

(define-abbrev-table 'finder-mode-abbrev-table '())

(define-abbrev-table 'flycheck-error-list-mode-abbrev-table '())

(define-abbrev-table 'ftp-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'gfm-mode-abbrev-table '())

(define-abbrev-table 'ghc-core-mode-abbrev-table '())

(define-abbrev-table 'ghci-script-mode-abbrev-table '())

(define-abbrev-table 'git-log-view-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table
  '(
    ("a'a" "axis-aligned" nil 5)
    ("a'b" "assign-behavior" nil 4)
    ("a'cn" "alpha conversion" nil 17)
    ("a'ct" "$\\alpha$-convert" nil 4)
    ("a'd" "automatic differentiation" nil 82)
    ("a'd't" "abstract data type" nil 21)
    ("a'd'ts" "abstract data types" nil 22)
    ("a'ect" "alpha-equivalence" nil 1)
    ("a'ett" "alpha-equivalent" nil 1)
    ("a'f" "as follows" nil 301)
    ("a'fr" "applicative functor" nil 0)
    ("a'g" "attribute grammar" nil 2)
    ("a'k'a" "also known as" nil 2)
    ("a'k'o" "a kind of" nil 1)
    ("a'l" "at least" nil 444)
    ("a'o't" "as opposed to" nil 58)
    ("a's" "abstract syntax" nil 137)
    ("a's't" "abstract syntax tree" nil 4)
    ("a's'ts" "abstract syntax trees" nil 10)
    ("a'st" "attribute state" nil 2)
    ("a't" "abstract type" nil 8)
    ("a't'p" "automated theorem proving" nil 3)
    ("a'v" "assign-value" nil 3)
    ("a'w" "at which" nil 17)
    ("a'w'a" "as well as" nil 4)
    ("a'w't" "at which time" nil 2)
    ("a'wk" "approximately well-kinded" nil 1)
    ("a'ws" "approximate well-typedness" nil 21)
    ("aa'bb" "axis-aligned bounding box" nil 1)
    ("aa'bbs" "axis-aligned bounding boxes" nil 2)
    ("abd" "abstracted" nil 22)
    ("abn" "abstraction" nil 346)
    ("abns" "abstractions" nil 154)
    ("abotu" "about" nil 9)
    ("abt" "abstract" nil 427)
    ("abtd" "abstracted" nil 4)
    ("abtg" "abstracting" nil 16)
    ("abts" "abstracts" nil 12)
    ("abty" "abstractly" nil 17)
    ("acl" "acceptable" nil 72)
    ("actg" "accounting" nil 3)
    ("actgs" "accountings" nil 0)
    ("acy" "acceptability" nil 37)
    ("addn" "addition" nil 89)
    ("addns" "additions" nil 32)
    ("addny" "additionally" nil 6)
    ("adl" "additional" nil 2)
    ("adly" "additionally" nil 3)
    ("adn" "and" nil 388)
    ("adnl" "additional" nil 228)
    ("adnly" "additionally" nil 15)
    ("adny" "additionally" nil 3)
    ("adv" "additive" nil 1)
    ("agm" "algorithm" nil 821)
    ("agmc" "algorithmic" nil 27)
    ("agmcy" "algorithmically" nil 5)
    ("agms" "algorithms" nil 322)
    ("agt" "argument" nil 1113)
    ("agts" "arguments" nil 743)
    ("ahve" "have" nil 46)
    ("ajn" "adjunction" nil 9)
    ("ajns" "adjunctions" nil 2)
    ("ala" "à la" nil 2)
    ("alc" "algebraic" nil 37)
    ("alcy" "algebraically" nil 1)
    ("alhpa" "alpha" nil 2)
    ("alt" "absolute" nil 92)
    ("altg" "alternating" nil 2)
    ("altt" "alternate" nil 69)
    ("altts" "alternates" nil 1)
    ("alty" "absolutely" nil 8)
    ("amn" "animation" nil 65)
    ("amns" "animations" nil 17)
    ("ap'f" "applicative functor" nil 10)
    ("ap'fs" "applicative functors" nil 9)
    ("apbl" "applicable" nil 66)
    ("apby" "applicability" nil 28)
    ("apg" "applying" nil 355)
    ("aph" "approach" nil 1056)
    ("aphd" "approached" nil 4)
    ("aphg" "approaching" nil 8)
    ("aphs" "approaches" nil 102)
    ("apn" "application" nil 1076)
    ("apns" "applications" nil 496)
    ("appt" "appropriate" nil 6)
    ("appty" "appropriately" nil 1)
    ("aps" "applies" nil 86)
    ("apv" "applicative" nil 766)
    ("apvl" "approval" nil 2)
    ("apvs" "applicatives" nil 24)
    ("apvy" "applicatively" nil 4)
    ("apy" "apply" nil 873)
    ("apyd" "applied" nil 351)
    ("apys" "applies" nil 110)
    ("arent" "aren't" nil 3)
    ("asap'" "as soon as possible" nil 2)
    ("asct" "associate" nil 4)
    ("asg" "assigning" nil 27)
    ("asgd" "assigned" nil 16)
    ("asgt" "assignment" nil 89)
    ("asgts" "assignments" nil 26)
    ("asmn" "assumption" nil 117)
    ("asmns" "assumptions" nil 39)
    ("asn" "association" nil 57)
    ("asns" "associations" nil 8)
    ("asrn" "assertion" nil 3)
    ("asrns" "assertions" nil 0)
    ("ast" "associate" nil 72)
    ("astd" "associated" nil 293)
    ("astg" "associating" nil 20)
    ("astn" "association" nil 2)
    ("asts" "associates" nil 19)
    ("asty" "associativity" nil 16)
    ("asv" "associative" nil 81)
    ("asvy" "associativity" nil 70)
    ("at's" "attribute state" nil 0)
    ("ata" "automata" nil 56)
    ("atc" "automatic" nil 102)
    ("atcy" "automatically" nil 204)
    ("atn" "automaton" nil 80)
    ("atr" "architecture" nil 129)
    ("atrl" "architectural" nil 3)
    ("atrs" "architectures" nil 31)
    ("att" "attribute" nil 246)
    ("attd" "attributed" nil 13)
    ("attr" "attr" nil 85)
    ("atts" "attributes" nil 220)
    ("aufn" "anti-unification" nil 4)
    ("aufr" "anti-unifier" nil 1)
    ("aufrs" "anti-unifiers" nil 0)
    ("avl" "ActiveVRML" nil 78)
    ("avn" "abbreviation" nil 45)
    ("avns" "abbreviations" nil 21)
    ("avt" "abbreviate" nil 11)
    ("avtd" "abbreviated" nil 6)
    ("avtg" "abbreviating" nil 0)
    ("avts" "abbreviates" nil 3)
    ("axg" "approximating" nil 26)
    ("axm" "axiom" nil 4)
    ("axms" "axioms" nil 22)
    ("axn" "approximation" nil 196)
    ("axns" "approximations" nil 88)
    ("axt" "approximate" nil 96)
    ("axtd" "approximated" nil 11)
    ("axtg" "approximating" nil 5)
    ("axts" "approximates" nil 11)
    ("axty" "approximately" nil 4)
    ("axy" "approximately" nil 11)
    ("b'b" "bounding box" nil 10)
    ("b'bs" "bounding boxes" nil 12)
    ("b'cn" "beta-conversion" nil 3)
    ("b'f" "breadth-first" nil 7)
    ("b'f's" "breadth-first search" nil 8)
    ("b'l" "behavior language" nil 32)
    ("b'm'o" "by means of" nil 2)
    ("b'rc" "beta reduce" nil 4)
    ("b'rcd" "beta reduced" nil 0)
    ("b'rdt" "beta reduced" nil 1)
    ("b'rn" "beta reduction" nil 38)
    ("b'rns" "beta reductions" nil 6)
    ("b'rnt" "beta reduction" nil 22)
    ("b'rt" "beta reduce" nil 1)
    ("b'rx" "beta redex" nil 7)
    ("b'rxs" "beta redexes" nil 5)
    ("b't" "behavior thread" nil 12)
    ("b't'w" "by the way" nil 31)
    ("b'ts" "behavior threads" nil 8)
    ("b'v" "bound variable" nil 45)
    ("b'v'h" "bounding volume hierarchy" nil 0)
    ("b'v'hs" "bounding volume hierarchies" nil 0)
    ("b'vm" "bounding volume" nil 4)
    ("b'vms" "bounding volumes" nil 9)
    ("b'vs" "bound variables" nil 82)
    ("bc'c'c" "bicartesian closed category" nil 1)
    ("bd" "bound" nil 109)
    ("bdd" "bounded" nil 19)
    ("bdg" "binding" nil 187)
    ("bdgs" "bindings" nil 85)
    ("bds" "bounds" nil 23)
    ("becasue" "because" nil 26)
    ("becuase" "because" nil 65)
    ("bjn" "bijection" nil 33)
    ("bjns" "bijections" nil 4)
    ("bjv" "bijective" nil 12)
    ("bot'" "⊥" nil 73)
    ("btm" "bottom" nil 1)
    ("btms" "bottoms" nil 1)
    ("bv" "behave" nil 1)
    ("bvd" "behaved" nil 0)
    ("bvl" "behavioral" nil 3)
    ("bvr" "behavior" nil 1672)
    ("bvrl" "behavioral" nil 4)
    ("bvrr" "Bvr" nil 3)
    ("bvrs" "behaviors" nil 897)
    ("bvs" "behaves" nil 0)
    ("c'b'v" "call-by-value" nil 27)
    ("c'b'x" "continuation-based transformation" nil 1)
    ("c'c'c" "cartesian closed category" nil 5)
    ("c'c'cs" "cartesian closed categories" nil 15)
    ("c'cs" "chain-completeness" nil 1)
    ("c'ctn" "collision continuation" nil 3)
    ("c'd" "collision detection" nil 19)
    ("c'e" "constraint expression" nil 2)
    ("c'es" "constraint expressions" nil 2)
    ("c'f" "continuous function" nil 9)
    ("c'f'l" "context-free language" nil 0)
    ("c'f'ls" "context-free languages" nil 1)
    ("c'fs" "continuous functions" nil 1)
    ("c'g" "computer graphics" nil 11)
    ("c'l'p" "constraint logic programming" nil 23)
    ("c'o'c" "Calculus of Constructions" nil 9)
    ("c'o'm" "calculus on manifolds" nil 5)
    ("c'p" "collision prediction" nil 47)
    ("c'p's" "continuation-passing style" nil 2)
    ("c'r" "collision response" nil 5)
    ("c'rs" "conversion rules" nil 6)
    ("c's" "concrete syntax" nil 12)
    ("c's'e" "common subexpression elimination" nil 9)
    ("c's'g" "constructive solid geometry" nil 2)
    ("c's'p" "complete set of pre-unifiers" nil 0)
    ("c's'u" "complete set of unifiers" nil 13)
    ("c's'us" "complete sets of unifiers" nil 4)
    ("c't" "category theory" nil 51)
    ("c't'c" "compiling to categories" nil 13)
    ("c'tc" "category theoretic" nil 1)
    ("c'v" "concrete value" nil 12)
    ("c'vs" "concrete values" nil 18)
    ("c-tc" "category theoretic" nil 0)
    ("cafe'" "café" nil 3)
    ("cafe's" "cafés" nil 2)
    ("cant" "can't" nil 28)
    ("cbl" "constrainable" nil 93)
    ("cbls" "constrainables" nil 52)
    ("cbn" "combination" nil 134)
    ("cbnl" "combinational" nil 18)
    ("cbns" "combinations" nil 34)
    ("cbr" "combinator" nil 67)
    ("cbrs" "combinators" nil 194)
    ("cci" "calculi" nil 25)
    ("ccln" "conclusion" nil 113)
    ("cclns" "conclusions" nil 53)
    ("ccn" "calculation" nil 11)
    ("ccns" "calculations" nil 10)
    ("ccs" "calculus" nil 168)
    ("cct" "calculate" nil 5)
    ("ccts" "calculates" nil 1)
    ("cdl" "conditional" nil 69)
    ("cdls" "conditionals" nil 0)
    ("cdly" "conditionally" nil 3)
    ("cdn" "condition" nil 225)
    ("cdnl" "conditional" nil 39)
    ("cdnls" "conditionals" nil 44)
    ("cdnly" "conditionally" nil 0)
    ("cdns" "conditions" nil 99)
    ("cdots'" "⋯" nil 4)
    ("cdt" "coordinate" nil 46)
    ("cdtd" "coordinated" nil 5)
    ("cdtg" "coordinating" nil 3)
    ("cdts" "coordinates" nil 39)
    ("cfc" "conference" nil 65)
    ("cfcs" "conferences" nil 10)
    ("cft" "coefficient" nil 10)
    ("cfts" "coefficients" nil 16)
    ("cgl" "categorical" nil 4)
    ("cgly" "categorically" nil 1)
    ("cgn" "conjugation" nil 11)
    ("cgt" "conjugate" nil 1)
    ("cgy" "category" nil 3)
    ("cgys" "categories" nil 1)
    ("ch'r" "Church-Rosser" nil 32)
    ("circ'" "∘" nil 8)
    ("cjn" "conjunction" nil 93)
    ("cjns" "conjunctions" nil 14)
    ("cjr" "conjecture" nil 24)
    ("cjrd" "conjectured" nil 0)
    ("cjv" "conjunctive" nil 4)
    ("cjvy" "conjunctively" nil 0)
    ("ck" "check" nil 435)
    ("ckd" "checked" nil 71)
    ("ckg" "checking" nil 155)
    ("cks" "checks" nil 17)
    ("cln" "collection" nil 366)
    ("clns" "collections" nil 47)
    ("cmpn" "composition" nil 7)
    ("cmx" "complex" nil 6)
    ("cn" "connection" nil 194)
    ("cnqy" "consequently" nil 0)
    ("cns" "connections" nil 65)
    ("cnt" "constant" nil 750)
    ("cnts" "constants" nil 335)
    ("cnty" "constantly" nil 0)
    ("cojt" "cobject" nil 2)
    ("cojts" "cobjects" nil 3)
    ("commetn" "comment" nil 1)
    ("couldnt" "couldn't" nil 1)
    ("cpbl" "composable" nil 6)
    ("cpby" "composability" nil 8)
    ("cpd" "composed" nil 10)
    ("cpl" "compositional" nil 102)
    ("cply" "compositionally" nil 20)
    ("cpn" "composition" nil 930)
    ("cpnl" "compositional" nil 25)
    ("cpns" "compositions" nil 114)
    ("cps" "compose" nil 17)
    ("cpsd" "composed" nil 4)
    ("cpsg" "composing" nil 12)
    ("cpss" "composes" nil 0)
    ("cpt" "component" nil 242)
    ("cptl" "computational" nil 33)
    ("cptly" "computationally" nil 3)
    ("cptn" "computation" nil 440)
    ("cptns" "computations" nil 157)
    ("cpts" "components" nil 233)
    ("cpty" "compositionality" nil 6)
    ("cqn" "consequence" nil 63)
    ("cqns" "consequences" nil 38)
    ("cqny" "consequently" nil 9)
    ("cqt" "consequent" nil 6)
    ("cqty" "consequently" nil 26)
    ("crd" "correspond" nil 140)
    ("crdc" "correspondence" nil 144)
    ("crdd" "corresponded" nil 27)
    ("crdg" "corresponding" nil 410)
    ("crdgy" "correspondingly" nil 33)
    ("crdn" "coordination" nil 2)
    ("crds" "corresponds" nil 107)
    ("crln" "correlation" nil 1)
    ("crlns" "correlations" nil 0)
    ("csn" "collision" nil 116)
    ("csns" "collisions" nil 33)
    ("cst" "construct" nil 415)
    ("cstd" "constructed" nil 143)
    ("cstg" "constructing" nil 165)
    ("cstn" "construction" nil 442)
    ("cstns" "constructions" nil 31)
    ("csts" "constructs" nil 87)
    ("cstv" "constructive" nil 11)
    ("cstvy" "constructively" nil 4)
    ("csv" "conservative" nil 21)
    ("csvy" "conservatively" nil 2)
    ("ct" "constraint" nil 334)
    ("ct'" "CT" nil 2)
    ("ctc'" "compiling to categories" nil 11)
    ("ctc''" "compiling-to-categories" nil 9)
    ("ctg" "containing" nil 30)
    ("ctgs" "contiguous" nil 1)
    ("ctn" "continuation" nil 129)
    ("ctns" "continuations" nil 65)
    ("ctods" "cdots" nil 6)
    ("ctr" "constructor" nil 451)
    ("ctrs" "constructors" nil 259)
    ("cts" "constraints" nil 274)
    ("ctsy" "continuously" nil 13)
    ("ctus" "continuous" nil 431)
    ("ctusy" "continuously" nil 40)
    ("ctuy" "continuity" nil 14)
    ("ctv" "commutative" nil 36)
    ("ctvy" "commutativity" nil 22)
    ("cty" "continuity" nil 39)
    ("cvbl" "ConstraintVariable" nil 2)
    ("cvby" "convertibility" nil 42)
    ("cvc" "convenience" nil 5)
    ("cvl" "convertible" nil 62)
    ("cvln" "convolution" nil 196)
    ("cvlnl" "convolutional" nil 1)
    ("cvlns" "convolutions" nil 5)
    ("cvn" "conversion" nil 356)
    ("cvnc" "convenience" nil 126)
    ("cvns" "conversions" nil 70)
    ("cvnt" "convenient" nil 228)
    ("cvnty" "conveniently" nil 18)
    ("cvt" "convert" nil 250)
    ("cvtd" "converted" nil 57)
    ("cvtg" "converting" nil 86)
    ("cvtl" "conventional" nil 121)
    ("cvtly" "conventionally" nil 4)
    ("cvtn" "convention" nil 63)
    ("cvtns" "conventions" nil 13)
    ("cvtr" "converter" nil 5)
    ("cvtrs" "converters" nil 0)
    ("cvts" "converts" nil 25)
    ("cx" "context" nil 297)
    ("cx'" "cx" nil 5)
    ("cx'f" "context-free" nil 4)
    ("cx'f'l" "context-free language" nil 0)
    ("cx'f'ls" "context-free languages" nil 0)
    ("cx's" "context-sensitive" nil 1)
    ("cxs" "contexts" nil 115)
    ("cz" "characterize" nil 2)
    ("d'b" "double buffer" nil 1)
    ("d'bd" "double-buffered" nil 0)
    ("d'bg" "double buffering" nil 4)
    ("d'c" "dependent calculus" nil 30)
    ("d'd" "denotational design" nil 16)
    ("d'e" "differential equation" nil 9)
    ("d'es" "differential equations" nil 28)
    ("d'f" "depth-first" nil 11)
    ("d'f'p" "differentiable functional programming" nil 4)
    ("d'f's" "depth-first search" nil 8)
    ("d'f't" "dependent function type" nil 1)
    ("d'f'ts" "dependent function types" nil 9)
    ("d'i" "de Bruijn index" nil 15)
    ("d'is" "de Bruijn indices" nil 28)
    ("d'l" "deep learning" nil 33)
    ("d'm" "direct manipulation" nil 1)
    ("d'o'f" "degree of freedom" nil 6)
    ("d'o'fs" "degrees of freedom" nil 17)
    ("d'p" "dynamic programming" nil 12)
    ("d'p't" "dependent product type" nil 0)
    ("d'p'ts" "dependent product types" nil 0)
    ("d's" "data structure" nil 84)
    ("d's'e'l" "domain-specific embedded language" nil 0)
    ("d's'e'ls" "domain-specific embedded languages" nil 2)
    ("d's'l" "domain-specific language" nil 5)
    ("d's'ls" "domain-specific languages" nil 9)
    ("d'sm" "denotational semantics" nil 81)
    ("d'ss" "data structures" nil 61)
    ("d't" "data type" nil 101)
    ("d't'l'c" "dependent typed lambda calculus" nil 5)
    ("d'tp" "data type" nil 19)
    ("d'tps" "data types" nil 11)
    ("d'ts" "data types" nil 127)
    ("da'd" "data-driven" nil 18)
    ("da'p" "data-parallel" nil 1)
    ("dbd" "distributed" nil 22)
    ("dbn" "distribution" nil 79)
    ("dbns" "distributions" nil 54)
    ("dbt" "distribute" nil 41)
    ("dbtd" "distributed" nil 10)
    ("dbtg" "distributing" nil 10)
    ("dbts" "distributes" nil 25)
    ("dbv" "distributive" nil 29)
    ("dbvy" "distributivity" nil 14)
    ("dcb" "describe" nil 211)
    ("dcbd" "described" nil 410)
    ("dcbg" "describing" nil 98)
    ("dcbl" "decidable" nil 10)
    ("dcbs" "describes" nil 122)
    ("dcln" "declaration" nil 83)
    ("dclns" "declarations" nil 55)
    ("dcn" "declaration" nil 111)
    ("dcns" "declarations" nil 73)
    ("dcpd" "decomposed" nil 0)
    ("dcpn" "decomposition" nil 131)
    ("dcpns" "decompositions" nil 14)
    ("dcps" "decompose" nil 31)
    ("dcpsg" "decomposing" nil 4)
    ("dcpss" "decomposes" nil 2)
    ("dct" "document" nil 301)
    ("dctd" "documented" nil 17)
    ("dctg" "documenting" nil 2)
    ("dctn" "documentation" nil 140)
    ("dcts" "documents" nil 23)
    ("dcty" "discontinuity" nil 3)
    ("dctys" "discontinuities" nil 1)
    ("dcv" "declarative" nil 111)
    ("dcvy" "declaratively" nil 10)
    ("ddc" "deduce" nil 33)
    ("ddcd" "deduced" nil 0)
    ("ddcg" "deducing" nil 1)
    ("ddcs" "deduces" nil 0)
    ("ddn" "deduction" nil 35)
    ("ddns" "deductions" nil 10)
    ("ddv" "deductive" nil 9)
    ("de'd" "demand-driven" nil 18)
    ("depty" "depth" nil 4)
    ("df" "define" nil 1554)
    ("df'" "df" nil 25)
    ("dfbl" "differentiable" nil 142)
    ("dfby" "differentiability" nil 11)
    ("dfc" "difference" nil 295)
    ("dfcg" "differencing" nil 2)
    ("dfcs" "differences" nil 64)
    ("dfd" "defined" nil 920)
    ("dfg" "defining" nil 258)
    ("dfl" "differential" nil 53)
    ("dfls" "differentials" nil 0)
    ("dfly" "differentially" nil 0)
    ("dfn" "definition" nil 1906)
    ("dfnl" "definitional" nil 6)
    ("dfns" "definitions" nil 825)
    ("dfrn" "differentiation" nil 191)
    ("dfrns" "differentiations" nil 2)
    ("dfrt" "differentiate" nil 31)
    ("dfrtd" "differentiated" nil 7)
    ("dfrts" "differentiates" nil 1)
    ("dfs" "defines" nil 88)
    ("dft" "different" nil 1092)
    ("dftg" "differentiating" nil 12)
    ("dfty" "differently" nil 101)
    ("dgt" "disagreement" nil 1)
    ("di'p" "disagreement pair" nil 172)
    ("di'ps" "disagreement pairs" nil 168)
    ("di'sq" "disagreement sequence" nil 8)
    ("di'sqs" "disagreement sequences" nil 0)
    ("didnt" "didn't" nil 13)
    ("djn" "disjunction" nil 33)
    ("djns" "disjunctions" nil 9)
    ("djv" "disjunctive" nil 6)
    ("djvy" "disjunctively" nil 0)
    ("dlt" "difficult" nil 26)
    ("dlty" "difficulty" nil 20)
    ("dltys" "difficulties" nil 4)
    ("dmn" "domain" nil 254)
    ("dmns" "domains" nil 67)
    ("dn" "denotation" nil 8)
    ("dnl" "denotational" nil 176)
    ("dnly" "denotationally" nil 19)
    ("dnn" "denotation" nil 83)
    ("dnns" "denotations" nil 15)
    ("dns" "denotations")
    ("dnv" "denotative" nil 38)
    ("dnvy" "denotatively" nil 0)
    ("doesnt" "doesn't" nil 32)
    ("dont" "don't" nil 225)
    ("dpc" "dependence" nil 27)
    ("dpcn" "decomposition" nil 1)
    ("dpd" "depend" nil 141)
    ("dpdd" "depended" nil 6)
    ("dpdg" "depending" nil 87)
    ("dpds" "depends" nil 147)
    ("dpt" "dependent" nil 319)
    ("dpts" "dependents" nil 0)
    ("dpty" "dependently" nil 3)
    ("dpv" "disprove" nil 1)
    ("dpy" "dependency" nil 115)
    ("dpys" "dependencies" nil 114)
    ("drfc" "dereference" nil 0)
    ("dscn" "description" nil 285)
    ("dscns" "descriptions" nil 90)
    ("dscrn" "description" nil 1)
    ("dscv" "descriptive" nil 13)
    ("dstn" "destruction" nil 3)
    ("dstr" "destructor" nil 1)
    ("dstrs" "destructors" nil 0)
    ("dsv" "destructive" nil 29)
    ("dsvy" "destructively" nil 44)
    ("dtc" "deterministic" nil 67)
    ("dtcy" "deterministically" nil 3)
    ("dtm" "determinism" nil 11)
    ("dtt" "determinate" nil 3)
    ("dtv" "derivative" nil 608)
    ("dtvs" "derivatives" nil 419)
    ("dv" "derive" nil 137)
    ("dv'" "dv" nil 17)
    ("dvbl" "derivable" nil 1)
    ("dvd" "derived" nil 139)
    ("dvg" "deriving" nil 240)
    ("dvn" "derivation" nil 342)
    ("dvnl" "derivational" nil 7)
    ("dvns" "derivations" nil 78)
    ("dvp" "develop" nil 79)
    ("dvpd" "developed" nil 80)
    ("dvpg" "developing" nil 70)
    ("dvpr" "developer" nil 5)
    ("dvprs" "developers" nil 9)
    ("dvps" "develops" nil 13)
    ("dvs" "derives" nil 14)
    ("dvt" "development" nil 262)
    ("dvtl" "developmental" nil 0)
    ("dvts" "developments" nil 14)
    ("e'b'g" "explanation based generalization" nil 2)
    ("e'e" "eta expand" nil 19)
    ("e'ed" "eta expanded" nil 1)
    ("e'en" "eta expansion" nil 12)
    ("e'ens" "eta expansions" nil 1)
    ("e'es" "eta expands" nil 1)
    ("e'l'f" "Edinburgh Logical Framework" nil 17)
    ("e'o" "each other" nil 0)
    ("e'p" "expression procedure" nil 4)
    ("e'pmc" "explicitly polymorphic" nil 0)
    ("e'pmm" "explicit polymorphism" nil 5)
    ("e'ps" "expression procedures" nil 3)
    ("e's's" "ERGO Suport System" nil 11)
    ("e'u" "equational unification" nil 3)
    ("eft" "efficient" nil 608)
    ("efty" "efficiently" nil 151)
    ("efy" "efficiency" nil 262)
    ("eg" "e.g.," nil 1097)
    ("elmn" "elimination" nil 5)
    ("emt" "element" nil 233)
    ("emts" "elements" nil 248)
    ("eplg" "extrapolating" nil 0)
    ("epln" "extrapolation" nil 11)
    ("eplt" "extrapolate" nil 1)
    ("eqc" "equivalence" nil 64)
    ("eqcs" "equivalences" nil 5)
    ("eqn" "equation" nil 99)
    ("eqnl" "equational" nil 71)
    ("eqnly" "equationally" nil 2)
    ("eqns" "equations" nil 115)
    ("eqty" "equality" nil 63)
    ("eqtys" "equalities" nil 0)
    ("equiv'" "≡" nil 17)
    ("eqvt" "equivalent" nil 130)
    ("eqvts" "equivalents" nil 0)
    ("eqvty" "equivalently" nil 7)
    ("evetn" "event" nil 4)
    ("evetns" "events" nil 9)
    ("evt" "environment" nil 394)
    ("evtl" "environmental" nil 2)
    ("evts" "environments" nil 70)
    ("excersize" "exercise" nil 2)
    ("exists'" "∃" nil 1)
    ("f'a" "functional animation" nil 6)
    ("f'b" "frame buffer" nil 2)
    ("f'c" "first-class" nil 9)
    ("f'cb" "functor combinator" nil 1)
    ("f'cbs" "functor combinators" nil 0)
    ("f'ctn" "failure continutation" nil 5)
    ("f'ctns" "failure continutations" nil 0)
    ("f'e" "for example" nil 125)
    ("f'f'i" "foreign function interface" nil 10)
    ("f'i" "for instance" nil 1141)
    ("f'l" "formal language" nil 6)
    ("f'o" "first-order" nil 42)
    ("f'o'l" "first-order logic" nil 8)
    ("f'o'm" "first-order matching" nil 1)
    ("f'o'r" "first-order resolution" nil 3)
    ("f'o'u" "first-order unification" nil 33)
    ("f'o'v" "field of view" nil 1)
    ("f'occ" "free-occurrence" nil 2)
    ("f'occs" "free-occurrences" nil 1)
    ("f'os" "function objects" nil 5)
    ("f'p" "functional programming" nil 202)
    ("f'p'i" "fixed point induction" nil 13)
    ("f'ps" "fixed points" nil 6)
    ("f'r" "functional reactive" nil 0)
    ("f'r'a" "functional reactive animation" nil 1)
    ("f'r'p" "functional reactive programming" nil 22)
    ("f's" "formal system" nil 10)
    ("f's'm" "finite state machine" nil 2)
    ("f's'ms" "finite state machines" nil 0)
    ("f'ss" "function symbols" nil 5)
    ("f't" "future time" nil 1)
    ("f't'v" "free type variable" nil 2)
    ("f't'vs" "free type variables" nil 7)
    ("f'v" "free variable" nil 36)
    ("f'v's" "free vector space" nil 5)
    ("f'v'ss" "free vector spaces" nil 1)
    ("f'vs" "free variables" nil 141)
    ("f'x" "for example" nil 4)
    ("fbl" "flexible" nil 73)
    ("fbly" "flexibly" nil 3)
    ("fbty" "flexibility" nil 36)
    ("fby" "flexibility" nil 36)
    ("fdl" "fundamental" nil 126)
    ("fdls" "fundamentals" nil 0)
    ("fdly" "fundamentally" nil 35)
    ("fdn" "foundation" nil 85)
    ("fdnl" "foundational" nil 7)
    ("fdns" "foundations" nil 18)
    ("ffl" "flex-flex" nil 0)
    ("flase" "False" nil 1)
    ("fld" "followed" nil 69)
    ("flfl" "flexible-flexible" nil 166)
    ("flg" "following" nil 313)
    ("flrd" "flexible-rigid" nil 153)
    ("fls" "follows" nil 80)
    ("fltp" "flexible-type" nil 2)
    ("fm" "from" nil 7625)
    ("fma" "formula" nil 111)
    ("fmas" "formulas" nil 77)
    ("fml" "formal" nil 134)
    ("fmly" "formally" nil 32)
    ("fmn" "formulation" nil 286)
    ("fmns" "formulations" nil 48)
    ("fmt" "formulate" nil 97)
    ("fmtd" "formulated" nil 23)
    ("fmtg" "formulating" nil 18)
    ("fmts" "formulates" nil 6)
    ("fmy" "family" nil 215)
    ("fmys" "families" nil 67)
    ("fn" "function" nil 4361)
    ("fnl" "functional" nil 1102)
    ("fnls" "functionals" nil 17)
    ("fnly" "functionally" nil 36)
    ("fns" "functions" nil 2832)
    ("fnty" "functionality" nil 132)
    ("fo" "of" nil 439)
    ("forall'" "∀" nil 8)
    ("fqt" "frequent" nil 14)
    ("fqty" "frequently" nil 18)
    ("fqy" "frequency" nil 28)
    ("fqys" "frequencies" nil 4)
    ("frechet" "Fréchet" nil 5)
    ("frnak" "frank" nil 3)
    ("fsm" "formalism" nil 20)
    ("fsm'" "fsm" nil 5)
    ("fsms" "formalisms " nil 1)
    ("ft" "first" nil 3232)
    ("fu'v" "future value" nil 2)
    ("fu'vs" "future values" nil 15)
    ("fx'p" "fixed point" nil 8)
    ("fx'ps" "fixed points" nil 6)
    ("fz" "formalize" nil 41)
    ("fzd" "formalized" nil 8)
    ("fzg" "formalizing" nil 14)
    ("fzl" "formalizable" nil 0)
    ("fzn" "formalization" nil 16)
    ("fzns" "formalizations" nil 1)
    ("fzs" "formalizes" nil 4)
    ("g''o" "geometric-object" nil 3)
    ("g''os" "geometric-objects" nil 0)
    ("g'a'f" "graphics application framework" nil 7)
    ("g'c" "garbage collection" nil 69)
    ("g'cd" "garbage-collected" nil 2)
    ("g'cr" "garbage collector" nil 2)
    ("g'd" "geometry-dependent" nil 4)
    ("g'dc" "geometry-dependence" nil 0)
    ("g'e" "geometry expression" nil 9)
    ("g'es" "geometry expressions" nil 3)
    ("g'f" "generic function" nil 2)
    ("g'l" "geometry language" nil 27)
    ("g'o" "geometric object" nil 56)
    ("g'os" "geometric objects" nil 29)
    ("g'p" "general purpose" nil 21)
    ("g'pv" "geometric primitive" nil 0)
    ("g'pvs" "geometric primitives" nil 7)
    ("g'u'i" "graphical user interface" nil 0)
    ("g'u'is" "graphical user interfaces" nil 1)
    ("gd" "gd" nil 36)
    ("gl" "general" nil 1271)
    ("glb'" "⊓" nil 4)
    ("glty" "generality" nil 76)
    ("gltys" "generalities" nil 0)
    ("gly" "generally" nil 311)
    ("gmc" "geometric" nil 172)
    ("gmcy" "geometrically" nil 3)
    ("gmr" "grammar" nil 71)
    ("gmrs" "grammars" nil 14)
    ("gmy" "geometry" nil 1469)
    ("gmys" "geometries" nil 13)
    ("gn" "generation" nil 236)
    ("gnc" "generic" nil 62)
    ("gncs" "generics" nil 0)
    ("gncy" "generically" nil 0)
    ("gns" "generations" nil 4)
    ("gnt" "generate" nil 4)
    ("gnts" "generates" nil 0)
    ("goign" "going" nil 28)
    ("gp" "group" nil 496)
    ("gpd" "grouping" nil 0)
    ("gpg" "grouping" nil 0)
    ("gps" "groups" nil 65)
    ("grahpics" "graphics" nil 7)
    ("gt" "generate" nil 272)
    ("gtd" "generated" nil 318)
    ("gtg" "generating" nil 80)
    ("gtr" "generator" nil 72)
    ("gtrs" "generators" nil 31)
    ("gts" "generates" nil 121)
    ("gz" "generalize" nil 466)
    ("gzd" "generalized" nil 360)
    ("gzg" "generalizing" nil 121)
    ("gzn" "generalization" nil 176)
    ("gzns" "generalizations" nil 36)
    ("gzs" "generalizes" nil 87)
    ("h'e" "hyper-edge" nil 1)
    ("h'es" "hyper-edges" nil 0)
    ("h'g" "hyper-graph" nil 2)
    ("h'gs" "hyper-graphs" nil 0)
    ("h'l" "high-level" nil 117)
    ("h'n" "head normal" nil 2)
    ("h'n'f" "head normal form" nil 38)
    ("h'n'fs" "head normal forms" nil 2)
    ("h'o" "higher-order" nil 398)
    ("h'o'a's" "higher-order abstract syntax" nil 5)
    ("h'o'f" "higher-order function" nil 14)
    ("h'o'fs" "higher-order functions" nil 27)
    ("h'o'h'h" "higher-order hereditary Harrop" nil 2)
    ("h'o'l" "higher-order logic" nil 56)
    ("h'o'm" "higher-order matching" nil 19)
    ("h'o'r" "higher-order resolution" nil 4)
    ("h'o't" "higher-order type" nil 1)
    ("h'o'ts" "higher-order types" nil 9)
    ("h'o'u" "higher-order unification" nil 194)
    ("h's'r" "hidden surface removal" nil 4)
    ("h'ss" "half spaces" nil 0)
    ("hadnt" "hadn't" nil 3)
    ("hasnt" "hasn't" nil 1)
    ("havent" "haven't" nil 8)
    ("hcl" "hierarchical" nil 41)
    ("hcly" "hierarchically" nil 5)
    ("hcy" "hierarchy" nil 47)
    ("hcys" "hierarchies" nil 4)
    ("hmc" "homomorphic" nil 67)
    ("hmcy" "homomorphically" nil 9)
    ("hmm" "homomorphism" nil 252)
    ("hmms" "homomorphisms" nil 92)
    ("hr'd" "higher dimensional" nil 0)
    ("hr'l" "higher level" nil 41)
    ("hte" "the" nil 58)
    ("hvae" "have" nil 31)
    ("hvr" "however" nil 1368)
    ("hwo" "how" nil 8)
    ("hymc" "hylomorphic" nil 7)
    ("hymm" "hylomorphism" nil 6)
    ("hymms" "hylomorphisms" nil 7)
    ("hzl" "horizontal" nil 28)
    ("hzly" "horizontally" nil 9)
    ("i'a" "in addition" nil 32)
    ("i'a't" "in addition to" nil 143)
    ("i'as" "inherited attributes" nil 2)
    ("i'b" "interactive behavior" nil 3)
    ("i'bs" "interactive behaviors" nil 1)
    ("i'c" "in contrast" nil 90)
    ("i'c'o" "in case of" nil 2)
    ("i'f" "in fact" nil 132)
    ("i'f'f" "if and only if" nil 5)
    ("i'f'o" "in favor of" nil 79)
    ("i'fe" "indirection-free" nil 2)
    ("i'g" "in general" nil 237)
    ("i'h" "induction hypothesis" nil 8)
    ("i'm'e" "in my experience" nil 2)
    ("i'm'o" "in my opinion" nil 12)
    ("i'o" "in order" nil 21)
    ("i'o'f" "in order for" nil 1)
    ("i'o't" "in order to" nil 327)
    ("i'o'w" "in other words" nil 129)
    ("i'p" "in particular" nil 441)
    ("i'pmc" "implicitly polymorphic" nil 3)
    ("i'pmm" "implicit polymorphism" nil 30)
    ("i'r" "inference rule" nil 21)
    ("i'r't" "in response to" nil 1)
    ("i'rs" "inference rules" nil 38)
    ("i's" "inference system" nil 8)
    ("i's'o" "in spite of" nil 37)
    ("i'ss" "inference systems" nil 0)
    ("i't" "in that" nil 16)
    ("i't'o" "in terms of" nil 309)
    ("i'v" "improving value" nil 27)
    ("i'vb" "instance variable" nil 18)
    ("i'vbs" "instance variables" nil 40)
    ("i'vs" "improving values" nil 22)
    ("i'w" "in which" nil 448)
    ("i'w'c" "in which case" nil 55)
    ("ibvr" "i-behavior" nil 3)
    ("ibvrs" "i-behaviors" nil 1)
    ("icl" "incremental" nil 119)
    ("icly" "incrementally" nil 25)
    ("icv" "inclusive" nil 1)
    ("icvc" "inconvenience" nil 1)
    ("icvnt" "inconvenient" nil 5)
    ("idc" "introduce" nil 308)
    ("idcd" "introduced" nil 119)
    ("idcg" "introducing" nil 137)
    ("idcs" "introduces" nil 58)
    ("idfn" "identification" nil 1)
    ("idn" "introduction" nil 209)
    ("idns" "introductions" nil 10)
    ("idpc" "independence" nil 22)
    ("idpt" "independent" nil 205)
    ("idpty" "independently" nil 70)
    ("idtt" "indeterminate" nil 5)
    ("idv" "inductive" nil 10)
    ("idvy" "inductively" nil 6)
    ("idx" "index" nil 50)
    ("idxd" "indexed" nil 7)
    ("idxg" "indexing" nil 3)
    ("idxs" "indices" nil 1)
    ("ie" "i.e.," nil 1303)
    ("ieft" "inefficient" nil 55)
    ("iefty" "inefficiently" nil 2)
    ("iefy" "inefficiency" nil 27)
    ("iefys" "inefficiencies" nil 4)
    ("ieqty" "inequality" nil 3)
    ("ieqtys" "inequalities" nil 2)
    ("ifbl" "inflexible" nil 3)
    ("ifc" "inference" nil 150)
    ("ifcs" "inferences" nil 5)
    ("ifl" "informal" nil 69)
    ("ifly" "informally" nil 15)
    ("ifm" "inform" nil 22)
    ("ifml" "informal" nil 17)
    ("ifmly" "informally" nil 16)
    ("ifmy" "informally" nil 10)
    ("ifn" "information" nil 402)
    ("ifqt" "infrequent" nil 2)
    ("ifqty" "infrequently" nil 0)
    ("ift" "infinite" nil 451)
    ("ifty" "infinitely" nil 72)
    ("igl" "integral" nil 96)
    ("igls" "integrals" nil 10)
    ("ign" "integration" nil 164)
    ("igns" "integrations" nil 1)
    ("igt" "integrate" nil 33)
    ("igtd" "integrated" nil 11)
    ("igtg" "integrating" nil 5)
    ("igtr" "integrator" nil 1)
    ("igts" "integrates" nil 1)
    ("ijn" "injection" nil 11)
    ("ijns" "injections" nil 8)
    ("ijv" "injective" nil 52)
    ("ijvy" "injectivity" nil 19)
    ("imc" "isomorphic" nil 126)
    ("imc'" "≅" nil 9)
    ("imcy" "isomorphically" nil 11)
    ("imm" "isomorphism" nil 209)
    ("imms" "isomorphisms" nil 153)
    ("implies'" "⟹" nil 2)
    ("incst" "inconsistent" nil 1)
    ("intn" "interaction" nil 173)
    ("intns" "interactions" nil 17)
    ("intv" "interactive" nil 242)
    ("iot" "in order to" nil 11)
    ("iow" "in other words" nil 68)
    ("ipbl" "impossible" nil 84)
    ("ipcn" "implication" nil 72)
    ("ipcns" "implications" nil 41)
    ("ipd" "implemented" nil 297)
    ("ipg" "implementing" nil 127)
    ("iplg" "interpolating" nil 6)
    ("ipln" "interpolation" nil 74)
    ("iplns" "interpolations" nil 1)
    ("iplt" "interpolate" nil 20)
    ("ipltd" "interpolated" nil 5)
    ("iplts" "interpolates" nil 1)
    ("ipn" "implementation" nil 1840)
    ("ipns" "implementations" nil 241)
    ("ipr" "implementer" nil 6)
    ("iprc" "importance" nil 55)
    ("iprs" "implementers" nil 6)
    ("iprt" "important" nil 676)
    ("iprty" "importantly" nil 27)
    ("ipt" "implement" nil 538)
    ("iptd" "implemented" nil 44)
    ("iptg" "implementing" nil 9)
    ("iptl" "implementable" nil 4)
    ("iptr" "implementer" nil 21)
    ("iptrs" "implementers" nil 6)
    ("ipts" "implements" nil 43)
    ("iptv" "imperative" nil 381)
    ("iptvy" "imperatively" nil 11)
    ("ipv" "improve" nil 190)
    ("ipvd" "improved" nil 122)
    ("ipvg" "improving" nil 108)
    ("ipvs" "improves" nil 10)
    ("ipvt" "improvement" nil 72)
    ("ipvts" "improvements" nil 102)
    ("irl" "internal" nil 82)
    ("irls" "internals" nil 8)
    ("irly" "internally" nil 19)
    ("irz" "internalize" nil 3)
    ("irzd" "internalized" nil 1)
    ("isft" "insufficient" nil 4)
    ("isfty" "insufficiently" nil 4)
    ("isl" "intensional" nil 9)
    ("isn" "intersection" nil 33)
    ("isns" "intersections" nil 3)
    ("isnt" "isn't" nil 19)
    ("isrn" "instruction" nil 25)
    ("isrns" "instructions" nil 36)
    ("ist" "instantiate" nil 126)
    ("istd" "instantiated" nil 154)
    ("istg" "instantiating" nil 48)
    ("istn" "instantiation" nil 11)
    ("istns" "instantiations" nil 6)
    ("istr'" "I see to recall" nil 3)
    ("ists" "instantiates" nil 19)
    ("itc" "intutitionistic" nil 10)
    ("itcy" "intutitionistically" nil 0)
    ("itd" "interested" nil 330)
    ("itds" "ill-typedness" nil 29)
    ("itfc" "interface" nil 850)
    ("itfcd" "interfaced" nil 2)
    ("itfcg" "interfacing" nil 13)
    ("itfcs" "interfaces" nil 197)
    ("itg" "interesting" nil 458)
    ("itgy" "interestingly" nil 36)
    ("itm" "imitation" nil 55)
    ("itme" "item" nil 6)
    ("itms" "imitations" nil 40)
    ("itn" "itn" nil 23)
    ("itnc" "intuitionistic" nil 1)
    ("itns" "interactions" nil 14)
    ("ito'" "in terms of")
    ("itp" "interpret" nil 63)
    ("itpd" "interpreted" nil 20)
    ("itpg" "interpreting" nil 51)
    ("itpn" "interpretation" nil 295)
    ("itpns" "interpretations" nil 93)
    ("itpr" "interpreter" nil 43)
    ("itprs" "interpreters" nil 3)
    ("itps" "interprets" nil 3)
    ("itt" "iterate" nil 7)
    ("ittd" "iterated" nil 1)
    ("ittn" "iteration" nil 18)
    ("ittns" "iterations" nil 4)
    ("ittv" "iterative" nil 22)
    ("ittvy" "iteratively" nil 4)
    ("itv" "interactive" nil 10)
    ("itvty" "interactivity" nil 8)
    ("itvy" "interactively" nil 29)
    ("itz" "internalize" nil 0)
    ("itzd" "internalized" nil 0)
    ("itzg" "internalizing" nil 1)
    ("itzn" "internalization" nil 2)
    ("itzs" "internalizes" nil 0)
    ("iv'a" "interval analysis" nil 28)
    ("ivbl" "invertible" nil 46)
    ("ivby" "invertibility" nil 2)
    ("ivc" "invariance" nil 2)
    ("ive" "I've" nil 9)
    ("ivl" "interval" nil 355)
    ("ivln" "involution" nil 4)
    ("ivlns" "involutions" nil 0)
    ("ivls" "intervals" nil 161)
    ("ivn" "inversion" nil 56)
    ("ivns" "inversions" nil 5)
    ("ivt" "invariant" nil 122)
    ("ivts" "invariants" nil 13)
    ("ix" "index" nil 176)
    ("ixd" "indexed" nil 87)
    ("ixg" "indexing" nil 10)
    ("ixs" "indices" nil 8)
    ("iz" "initialize" nil 28)
    ("izd" "initialized" nil 15)
    ("izg" "initializing" nil 6)
    ("izn" "initialization" nil 40)
    ("izns" "initializations" nil 4)
    ("izr" "initializer" nil 0)
    ("izrs" "initializers" nil 0)
    ("izs" "initializes" nil 0)
    ("j'r" "John Reynolds" nil 45)
    ("jfd" "justified" nil 11)
    ("jfg" "justifying" nil 9)
    ("jfn" "justification" nil 54)
    ("jfns" "justifications" nil 0)
    ("jfy" "justify" nil 41)
    ("jfyd" "justified" nil 8)
    ("jfyg" "justifying" nil 5)
    ("jfys" "justifies" nil 8)
    ("jsut" "just" nil 25)
    ("jt" "judgment" nil 37)
    ("jtl" "judgmental" nil 9)
    ("jts" "judgments" nil 7)
    ("jxn" "juxtaposition" nil 5)
    ("knwo" "know" nil 1)
    ("konw" "know" nil 17)
    ("l'a" "linear algebra" nil 27)
    ("l'c" "lambda calculus" nil 41)
    ("l'cs" "lambda-calculi" nil 4)
    ("l'cvby" "lambda convertability" nil 2)
    ("l'd't" "algebraic data type" nil 13)
    ("l'd'ts" "algebraic data types" nil 15)
    ("l'e" "lambda expression" nil 11)
    ("l'es" "lambda expressions" nil 15)
    ("l'f" "Logical Framework" nil 4)
    ("l'f'p" "least fixed point" nil 14)
    ("l'f'ps" "least fixed points" nil 4)
    ("l'h'n'f" "long head normal form" nil 6)
    ("l'h's" "left-hand side" nil 16)
    ("l'h'ss" "left-hand sides" nil 19)
    ("l'l" "low-level" nil 50)
    ("l'ls" "lazy lists" nil 1)
    ("l'm" "linear map" nil 85)
    ("l'm't" "local modeling transform" nil 1)
    ("l'm'ts" "local modeling transforms" nil 1)
    ("l'ms" "linear maps" nil 167)
    ("l'n'f" "long normal form" nil 12)
    ("l'o'i" "level of indirection" nil 1)
    ("l'p" "logic programming" nil 59)
    ("l'p'l" "logic programming language" nil 0)
    ("l's'b" "least significant bit" nil 1)
    ("l'u'b" "least upper bound" nil 6)
    ("l'u'bs" "least upper bounds")
    ("l'v" "logical variable" nil 1)
    ("l'x" "linear transformation" nil 12)
    ("l'xs" "linear transformations" nil 23)
    ("ladn" "land" nil 2)
    ("lambda'" "λ" nil 5)
    ("lbenf" "long beta-eta normal form" nil 2)
    ("lbepnf" "long beta-eta product normal form" nil 3)
    ("lc" "logic" nil 260)
    ("lcl" "logical" nil 167)
    ("lcly" "logically" nil 16)
    ("lcn" "location" nil 132)
    ("lcns" "locations" nil 78)
    ("lcs" "logics" nil 45)
    ("lcy" "logically" nil 2)
    ("leqi'" "⊑" nil 13)
    ("lg" "language" nil 1819)
    ("lga" "algebra" nil 120)
    ("lgas" "algebras" nil 5)
    ("lgc" "algebraic" nil 126)
    ("lgcy" "algebraically" nil 2)
    ("lgs" "languages" nil 506)
    ("li'c" "linear combination" nil 2)
    ("li'cs" "linear combinations" nil 0)
    ("liek" "like" nil 17)
    ("llambda'" "Λ" nil 3)
    ("loh" "Löh" nil 1)
    ("lpg" "Lambda-Prolog" nil 131)
    ("lppg" "Lambda'pi-Prolog" nil 3)
    ("lr'l" "lower level" nil 13)
    ("lsit" "list" nil 4)
    ("ltods" "ldots" nil 6)
    ("ltt" "alternate" nil 2)
    ("ltv" "alternative" nil 513)
    ("ltvs" "alternatives" nil 188)
    ("ltvy" "alternatively" nil 312)
    ("lub'" "⊔" nil 24)
    ("m'c" "modeling coordinate" nil 3)
    ("m'c's'p" "minimal complete set of pre-unifiers" nil 9)
    ("m'c's'ps" "minimal complete sets of pre-unifiers" nil 8)
    ("m'c's'u" "minimal complete set of unifiers" nil 19)
    ("m'c's'us" "minimal complete sets of unifiers" nil 0)
    ("m'cs" "model coordinates" nil 1)
    ("m'd'p" "Markov decision process" nil 2)
    ("m'd'ps" "Markov decision processes" nil 2)
    ("m'eqn" "multiequation" nil 5)
    ("m'eqns" "multiequations" nil 4)
    ("m'g'u" "most general unifier" nil 12)
    ("m'i" "multiple inheritance" nil 8)
    ("m'l" "meta-language" nil 79)
    ("m'ls" "meta-languages" nil 6)
    ("m'm" "multimedia" nil 15)
    ("m's'b" "most significant bit" nil 0)
    ("m't" "multi-threaded" nil 2)
    ("m'x" "modeling transform" nil 29)
    ("m'xs" "modeling transforms" nil 12)
    ("ma'l" "machine learning" nil 92)
    ("mabye" "maybe" nil 22)
    ("mch" "match" nil 86)
    ("mchd" "matched" nil 5)
    ("mchg" "matching" nil 172)
    ("mchr" "matcher" nil 5)
    ("mchs" "matches" nil 28)
    ("mcn" "mechanism" nil 58)
    ("mcns" "mechanisms" nil 27)
    ("mfd" "modified" nil 6)
    ("mfn" "modification" nil 54)
    ("mfns" "modifications" nil 23)
    ("mfo" "MediaFlow" nil 34)
    ("mfy" "modify" nil 65)
    ("mfyd" "modified" nil 157)
    ("mfyg" "modifying" nil 29)
    ("mfyl" "modifiable" nil 13)
    ("mfyr" "modifier" nil 4)
    ("mfyrs" "modifiers" nil 0)
    ("mfys" "modifies" nil 9)
    ("mgmt" "management" nil 46)
    ("mgr" "manager" nil 4)
    ("mgt" "management" nil 1)
    ("mlc" "meta-logic" nil 16)
    ("mlcl" "meta-logical" nil 1)
    ("mlpn" "multiplication" nil 6)
    ("mmz" "memoize" nil 37)
    ("mmzd" "memoized" nil 18)
    ("mmzg" "memoizing" nil 15)
    ("mmzn" "memoization" nil 110)
    ("mmzs" "memoizes" nil 0)
    ("mna" "minima")
    ("mng" "meaning" nil 398)
    ("mngs" "meanings" nil 107)
    ("mnm" "minimum")
    ("mpc" "monomorphic" nil 57)
    ("mpln" "multiplication" nil 96)
    ("mpm" "monomorphism" nil 14)
    ("mpv" "multiplicative" nil 4)
    ("mpy" "multiply" nil 6)
    ("mpyd" "multiplied" nil 1)
    ("mpyg" "multiplying" nil 1)
    ("mpys" "multiplies " nil 2)
    ("mpz" "monomorphize" nil 6)
    ("mpzd" "monomorphized" nil 2)
    ("mpzg" "monomorphizing" nil 1)
    ("mpzn" "monomorphization" nil 14)
    ("mroe" "more" nil 55)
    ("mtc" "monotonic" nil 87)
    ("mtcly" "monotonically" nil 17)
    ("mtcy" "monotonicity" nil 86)
    ("mtd" "method" nil 779)
    ("mtds" "methods" nil 452)
    ("mtdy" "methodology" nil 64)
    ("mtdys" "methodologies" nil 9)
    ("mtg" "meeting" nil 465)
    ("mtgs" "meetings" nil 43)
    ("mtn" "maintain" nil 1)
    ("mustnt" "mustn't" nil 2)
    ("mvbl" "meta-variable" nil 8)
    ("mvbls" "meta-variables" nil 5)
    ("mvl" "motivational" nil 5)
    ("mvn" "motivation" nil 130)
    ("mvns" "motivations" nil 12)
    ("mvr" "moreover" nil 261)
    ("mvt" "motivate" nil 56)
    ("mvtd" "motivated" nil 84)
    ("mvtg" "motivating" nil 29)
    ("mvts" "motivates" nil 18)
    ("mxa" "maxima" nil 2)
    ("mxm" "maximum")
    ("mxz" "maximize" nil 5)
    ("mxzd" "maximized" nil 0)
    ("mxzs" "maximizes" nil 1)
    ("mz" "minimize" nil 50)
    ("mzd" "minimized" nil 6)
    ("mzg" "minimizing" nil 7)
    ("mzn" "minimization" nil 18)
    ("mzs" "minimizes" nil 5)
    ("n'a's'c" "necessary and sufficient condition" nil 4)
    ("n'c" "necessary condition" nil 5)
    ("n'cs" "necessary conditions" nil 0)
    ("n'd" "natural deduction" nil 10)
    ("n'f" "normal form" nil 140)
    ("n'fs" "normal forms" nil 62)
    ("n'n" "natural number" nil 1)
    ("n'ns" "natural numbers" nil 6)
    ("n's" "non-strict" nil 8)
    ("n'x" "natural transformation" nil 9)
    ("n'xs" "natural transformations" nil 2)
    ("naive'" "naïve" nil 15)
    ("naively'" "naïvely" nil 4)
    ("naivite" "naïvité" nil 1)
    ("nbd" "neighborhood" nil 6)
    ("nbds" "neighborhoods" nil 1)
    ("nbr" "neighbor" nil 2)
    ("nbrs" "neighbors" nil 1)
    ("ncly" "necessarily" nil 101)
    ("ncpnl" "noncomputational" nil 0)
    ("ncts" "noncontinuous" nil 1)
    ("ncvby" "nonconvertability" nil 1)
    ("ncy" "necessary" nil 268)
    ("ndc" "nondeterministic" nil 34)
    ("ndcy" "nondeterministically" nil 6)
    ("ndm" "nondeterminism" nil 25)
    ("ndsv" "non-destructive" nil 0)
    ("ndtc" "nondeterministic" nil 50)
    ("ndtm" "nondeterminism" nil 28)
    ("neednt" "needn't" nil 11)
    ("nfn" "notification" nil 2)
    ("nfnl" "non-functional" nil 0)
    ("nfns" "notifications" nil 1)
    ("ngv" "negative" nil 2)
    ("nintv" "non-interactive" nil 4)
    ("nitv" "non-interactive" nil 20)
    ("nkow" "know" nil 4)
    ("nleqi'" "⋢" nil 1)
    ("nmtc" "nonmonotonic" nil 3)
    ("noteq'" "≠" nil 3)
    ("ntl" "natural" nil 365)
    ("ntls" "naturalness" nil 11)
    ("ntly" "naturally" nil 122)
    ("ntmn" "non-termination" nil 9)
    ("ntmtg" "nonterminating" nil 0)
    ("ntn" "notation" nil 249)
    ("ntnl" "notational" nil 27)
    ("ntns" "notations" nil 11)
    ("ntny" "notationally" nil 4)
    ("nufby" "nonunifiablity" nil 14)
    ("nufl" "nonunifiable" nil 19)
    ("nufm" "nonuniform" nil 2)
    ("nv'c" "Nonviolent Communication" nil 4)
    ("nz" "normalize" nil 104)
    ("nzd" "normalized" nil 30)
    ("nzg" "normalizing" nil 27)
    ("nzl" "normalizable" nil 4)
    ("nzn" "normalization" nil 112)
    ("nzns" "normalizations" nil 1)
    ("nzs" "normalizes" nil 2)
    ("nzy" "normalizability" nil 26)
    ("o'c" "of course" nil 223)
    ("o'd'e" "ordinary differential equation" nil 1)
    ("o'd'es" "ordinary differential equations" nil 3)
    ("o'f" "objective function" nil 0)
    ("o'fs" "objective functions" nil 0)
    ("o'l" "object language" nil 105)
    ("o'lc" "object logic" nil 1)
    ("o'lcs" "object logics" nil 1)
    ("o'ls" "object languages" nil 16)
    ("o'm" "object model" nil 3)
    ("o'ms" "object models" nil 0)
    ("o'o" "object-oriented" nil 68)
    ("o'o'p" "object-oriented programming" nil 0)
    ("o'on" "object-orientation" nil 5)
    ("o'p'l'c" "omega-order polymorphic lambda-calculus" nil 1)
    ("o's" "object system" nil 35)
    ("o's't" "on second thought" nil 8)
    ("o'sm" "operational semantics" nil 2)
    ("o'ss" "object systems" nil 2)
    ("o't" "overloading tool" nil 0)
    ("o't'f" "of the form" nil 91)
    ("o'tp" "object type" nil 17)
    ("o'tps" "object types" nil 10)
    ("o'u't" "once upon a time" nil 1)
    ("o'w" "of which" nil 9)
    ("ocn" "occurrence" nil 217)
    ("ocns" "occurrences" nil 180)
    ("ocsn" "occlusion" nil 13)
    ("ofr" "for" nil 24)
    ("ojn" "objection" nil 28)
    ("ojns" "objections" nil 21)
    ("ojt" "object" nil 786)
    ("ojtd" "objected" nil 3)
    ("ojts" "objects" nil 560)
    ("ojv" "objective" nil 39)
    ("ojvs" "objectives" nil 7)
    ("ojvy" "objectively" nil 9)
    ("olc" "object-logic" nil 7)
    ("olcs" "object-logics" nil 3)
    ("olg" "object-language" nil 62)
    ("olgs" "object-languages" nil 14)
    ("omer" "Ömer" nil 8)
    ("opl" "optional" nil 146)
    ("oply" "optionally" nil 13)
    ("opn" "operation" nil 462)
    ("opnl" "operational" nil 7)
    ("opns" "operations" nil 741)
    ("opr" "operator" nil 254)
    ("oprl" "operational" nil 104)
    ("oprly" "operationally" nil 15)
    ("oprs" "operators" nil 168)
    ("optg" "operating" nil 14)
    ("ordg" "ordering" nil 20)
    ("ot" "to" nil 117)
    ("otoh" "on the other hand" nil 443)
    ("otp" "object-type" nil 16)
    ("otps" "object-types" nil 9)
    ("otu" "out" nil 4)
    ("ovn" "observation" nil 2)
    ("ovns" "observations" nil 4)
    ("ovw" "overview" nil 23)
    ("owrk" "work" nil 5)
    ("ows" "otherwise" nil 459)
    ("oz" "optimize" nil 150)
    ("ozby" "optimizability" nil 4)
    ("ozd" "optimized" nil 144)
    ("ozg" "optimizing" nil 65)
    ("ozn" "optimization" nil 486)
    ("ozns" "optimizations" nil 135)
    ("ozr" "optimizer" nil 4)
    ("ozs" "optimizes" nil 8)
    ("p'a" "partial application" nil 1)
    ("p'a'p" "proofs as programs" nil 3)
    ("p'a't" "propositions as types" nil 1)
    ("p'as" "partial applications" nil 0)
    ("p'b" "pattern binder" nil 0)
    ("p'c" "predicate calculus" nil 6)
    ("p'd" "program derivation" nil 12)
    ("p'ds" "program derivations" nil 0)
    ("p'e" "partial evaluation" nil 53)
    ("p'ed" "partial evaluated" nil 1)
    ("p'f" "partial function" nil 19)
    ("p'fs" "partial functions" nil 19)
    ("p'l" "programming language" nil 133)
    ("p'l'c" "polymorphic lambda calculus" nil 13)
    ("p'lc" "programmable logic" nil 1)
    ("p'ls" "programming languages" nil 77)
    ("p'm" "pattern matching" nil 53)
    ("p'o" "partial order" nil 31)
    ("p'o'v" "point of view" nil 34)
    ("p'o'vs" "points of view" nil 0)
    ("p'og" "partial ordering" nil 0)
    ("p'os" "partial orders")
    ("p'p" "parametric polymorphism" nil 2)
    ("p'p't" "pair-producing type" nil 7)
    ("p'p'ts" "pair-producing types" nil 5)
    ("p'p'v" "pair-producing variable" nil 7)
    ("p'p'vs" "pair-producing variables" nil 6)
    ("p'ps" "progressive pairs" nil 1)
    ("p'r" "primitive recursion" nil 16)
    ("p's" "program synthesis" nil 30)
    ("p'ss" "program syntheses" nil 1)
    ("p'st" "proper subterm" nil 1)
    ("p'v" "program verification" nil 11)
    ("p'x" "program transformation" nil 90)
    ("p'xs" "program transformations" nil 4)
    ("p-eg" "partially evaluating" nil 0)
    ("pagm" "pre-algorithm" nil 38)
    ("pagms" "pre-algorithms" nil 12)
    ("pari" "pair" nil 9)
    ("pbl" "possible" nil 875)
    ("pbm" "problem" nil 1599)
    ("pbmc" "problematic" nil 79)
    ("pbms" "problems" nil 377)
    ("pbty" "possibility" nil 206)
    ("pbtys" "possibilities" nil 216)
    ("pbvr" "proto-behavior" nil 1)
    ("pbvrs" "proto-behaviors" nil 2)
    ("pby" "possibly" nil 343)
    ("pcdn" "precondition" nil 5)
    ("pcdns" "preconditions" nil 2)
    ("pcls" "protocols" nil 1)
    ("pcr" "processor" nil 3)
    ("pdfd" "predefined" nil 7)
    ("pdn" "predomain" nil 12)
    ("pdns" "predomains" nil 16)
    ("pdt" "predicate" nil 237)
    ("pdts" "predicates" nil 56)
    ("perhpas" "perhaps" nil 32)
    ("pf" "proof" nil 145)
    ("pfc" "preference" nil 79)
    ("pfcs" "preferences" nil 41)
    ("pfmc" "performance" nil 2)
    ("pfs" "proofs" nil 202)
    ("pgm" "program" nil 956)
    ("pgmc" "programmatic" nil 12)
    ("pgmcy" "programmatically" nil 6)
    ("pgmd" "programmed" nil 21)
    ("pgmg" "programming" nil 902)
    ("pgml" "programmable" nil 5)
    ("pgmr" "programmer" nil 141)
    ("pgmrs" "programmers" nil 119)
    ("pgms" "programs" nil 533)
    ("pha" "polyhedra" nil 1)
    ("phn" "polyhedron" nil 20)
    ("phns" "polyhedra" nil 6)
    ("pjn" "projection" nil 73)
    ("pjns" "projections" nil 99)
    ("pjr" "projector" nil 2)
    ("pjrs" "projectors" nil 0)
    ("pjt" "project" nil 466)
    ("pjtd" "projected" nil 2)
    ("pjtg" "projecting" nil 7)
    ("pjtr" "projector" nil 2)
    ("pjtrs" "projectors" nil 1)
    ("pjts" "projects" nil 103)
    ("pjv" "projective" nil 4)
    ("pll" "parallel" nil 325)
    ("pllm" "parallelism" nil 88)
    ("plln" "parallelization" nil 6)
    ("pllz" "parallelize" nil 11)
    ("pmc" "polymorphic" nil 207)
    ("pmcy" "polymorphically" nil 4)
    ("pmgr" "programmer" nil 1)
    ("pml" "polynomial" nil 7)
    ("pmls" "polynomials" nil 8)
    ("pmm" "polymorphism" nil 310)
    ("pmn" "permutation" nil 24)
    ("pmns" "permutations" nil 10)
    ("pmr" "parameter" nil 221)
    ("pmrs" "parameters" nil 266)
    ("pnc" "permanence" nil 14)
    ("pns" "polyhedra" nil 25)
    ("pnt" "permanent" nil 21)
    ("pnty" "permanently" nil 2)
    ("poitn" "point" nil 2)
    ("poitns" "points" nil 4)
    ("pordg" "preordering" nil 2)
    ("ppn" "proposition" nil 115)
    ("ppns" "propositions" nil 20)
    ("pptys" "properties" nil 4)
    ("pr" "pair" nil 138)
    ("pr'd" "probability distribution" nil 0)
    ("pr'ds" "probability distributions" nil 1)
    ("prby" "probably" nil 1476)
    ("prpr" "pair-pair" nil 2)
    ("prs" "pairs" nil 94)
    ("prtc" "probabilistic" nil 37)
    ("prtcy" "probabilistically" nil 0)
    ("prty" "probability" nil 66)
    ("prtys" "probabilities" nil 15)
    ("psn" "position" nil 294)
    ("psnl" "positional" nil 3)
    ("psns" "positions" nil 31)
    ("psv" "positive" nil 92)
    ("psvs" "positives" nil 3)
    ("psvy" "positively" nil 6)
    ("pt" "point" nil 937)
    ("pt'f" "point-free" nil 2)
    ("ptc" "parametric" nil 52)
    ("ptcr" "particular" nil 1)
    ("ptcy" "parametrically" nil 25)
    ("ptd" "pointed" nil 224)
    ("ptg" "pointing" nil 53)
    ("ptl" "partial" nil 155)
    ("ptly" "partially" nil 44)
    ("ptn" "pattern" nil 462)
    ("ptns" "patterns" nil 320)
    ("ptr" "pointer" nil 186)
    ("ptrs" "pointers" nil 96)
    ("pts" "points" nil 276)
    ("ptv" "primitive" nil 266)
    ("ptvs" "primitives" nil 248)
    ("ptvy" "primitively" nil 2)
    ("pty" "property" nil 513)
    ("ptys" "properties" nil 403)
    ("pufby" "pre-unifiability" nil 2)
    ("pufl" "pre-unifiable" nil 1)
    ("pufn" "pre-unification" nil 69)
    ("pufr" "pre-unifier" nil 22)
    ("pufrs" "pre-unifiers" nil 27)
    ("pufy" "pre-unify" nil 1)
    ("pv" "prove" nil 252)
    ("pvbl" "provable" nil 5)
    ("pvbty" "provability" nil 4)
    ("pvby" "provably" nil 4)
    ("pvd" "proved" nil 84)
    ("pvg" "proving" nil 65)
    ("pvr" "prover" nil 17)
    ("pvrs" "provers" nil 6)
    ("pvs" "previous" nil 502)
    ("pvsy" "previously" nil 84)
    ("pvt" "private" nil 0)
    ("pvw" "preview" nil 5)
    ("pz" "parametrize" nil 42)
    ("pzd" "parametrized" nil 141)
    ("pzg" "parametrizing" nil 11)
    ("pzn" "parametrization" nil 52)
    ("pzns" "parametrizations" nil 0)
    ("pzs" "parametrizes" nil 1)
    ("q'c" "equivalence class" nil 12)
    ("q'cs" "equivalence classes" nil 4)
    ("q'r" "equivalence relation" nil 7)
    ("q'rs" "equivalence relations" nil 4)
    ("qbl" "questionable" nil 9)
    ("qfd" "quantified" nil 56)
    ("qfg" "quantifying" nil 3)
    ("qfn" "quantification" nil 49)
    ("qfns" "quantifications" nil 0)
    ("qfr" "quantifier" nil 41)
    ("qfrs" "quantifiers" nil 71)
    ("qfs" "quantifies" nil 1)
    ("qfy" "quantify" nil 11)
    ("qfyd" "quantified" nil 2)
    ("qlfn" "qualification" nil 2)
    ("qlfns" "qualifications" nil 0)
    ("qlfr" "qualifier" nil 2)
    ("qlfrs" "qualifiers" nil 0)
    ("qlty" "quality" nil 6)
    ("qltys" "qualities" nil 0)
    ("qn" "question" nil 789)
    ("qnd" "questioned" nil 2)
    ("qng" "questioning" nil 0)
    ("qns" "questions" nil 365)
    ("qt" "quote" nil 10)
    ("qtn" "quaternion" nil 4)
    ("qtns" "quaternions" nil 1)
    ("qts" "quotes" nil 2)
    ("qty" "quantity" nil 4)
    ("qtys" "quantities" nil 3)
    ("qvc" "equivalence" nil 39)
    ("qvcs" "equivalences" nil 6)
    ("qvt" "equivalent" nil 179)
    ("qvty" "equivalently" nil 118)
    ("r'a'p" "reasoning about programs" nil 2)
    ("r'b" "reactive behavior" nil 17)
    ("r'bs" "reactive behaviors" nil 29)
    ("r'd'd't" "recursively defined data type" nil 2)
    ("r'd'd'ts" "recursively defined data types" nil 2)
    ("r'e" "regular expression" nil 3)
    ("r'es" "regular expressions" nil 25)
    ("r'f" "representable functor" nil 9)
    ("r'fs" "representable functors" nil 11)
    ("r'h's" "right-hand side" nil 24)
    ("r'h'ss" "right-hand sides" nil 21)
    ("r'l" "reinforcement learning")
    ("r'n'f" "reactive normal form" nil 3)
    ("r'o" "rigid object" nil 0)
    ("r'os" "rigid objects" nil 0)
    ("r'p'c" "rigid-path-check" nil 2)
    ("r'r" "rewrite rule" nil 89)
    ("r'rs" "rewrite rules" nil 133)
    ("r't" "referentially transparent" nil 10)
    ("r't's" "run-time system" nil 6)
    ("r'ty" "referential transparency" nil 10)
    ("r'v" "reactive value" nil 24)
    ("r'vs" "reactive values" nil 56)
    ("r'w" "roughly well-typed" nil 2)
    ("rarrow'" "→" nil 13)
    ("rbly" "arbitrarily" nil 34)
    ("rbml" "RBML" nil 85)
    ("rby" "arbitrary" nil 265)
    ("rcbn" "recombination" nil 1)
    ("rcd" "recommended" nil 2)
    ("rcn" "recursion" nil 205)
    ("rcns" "recursions" nil 25)
    ("rcptn" "recomputation" nil 3)
    ("rcst" "reconstruct" nil 0)
    ("rcsts" "reconstructs" nil 0)
    ("rcv" "recursive" nil 430)
    ("rcvy" "recursively" nil 125)
    ("rd" "rigid" nil 125)
    ("rdby" "reducibility" nil 1)
    ("rdc" "reduce" nil 146)
    ("rdcd" "reduced" nil 37)
    ("rdcg" "reducing" nil 55)
    ("rdcl" "reducible" nil 1)
    ("rdcs" "reduces" nil 24)
    ("rdf" "redefine" nil 22)
    ("rdfd" "redefined" nil 7)
    ("rdfl" "rigid-flexible" nil 54)
    ("rdfn" "redefinition" nil 3)
    ("rdfs" "redefines" nil 0)
    ("rdn" "reduction" nil 187)
    ("rdns" "reductions" nil 38)
    ("rdrd" "rigid-rigid" nil 150)
    ("rfc" "reference" nil 257)
    ("rfcd" "referenced" nil 10)
    ("rfcs" "references" nil 226)
    ("rfd" "reified" nil 9)
    ("rfg" "reifying" nil 12)
    ("rfl" "referential" nil 13)
    ("rfmn" "reformulation" nil 9)
    ("rfmns" "reformulations" nil 1)
    ("rfmt" "reformulate" nil 11)
    ("rfmtg" "reformulating" nil 2)
    ("rfn" "reification" nil 95)
    ("rfns" "reifications" nil 2)
    ("rfr" "reifier" nil 1)
    ("rfs" "reifies" nil 3)
    ("rfy" "reify" nil 24)
    ("rgt" "right" nil 3)
    ("rgz" "recognize" nil 2)
    ("rjn" "rejection" nil 1)
    ("rl" "rule" nil 302)
    ("rl'" "rl" nil 4)
    ("rlcn" "relocation" nil 31)
    ("rlcns" "relocations" nil 1)
    ("rln" "relation" nil 267)
    ("rlnl" "relational" nil 19)
    ("rlns" "relations" nil 90)
    ("rlp" "relationship" nil 209)
    ("rlps" "relationships" nil 66)
    ("rls" "rules" nil 321)
    ("rpbl" "representable" nil 126)
    ("rpc" "replace" nil 638)
    ("rpcd" "replaced" nil 185)
    ("rpcg" "replacing" nil 199)
    ("rpcs" "replaces" nil 33)
    ("rpct" "replacement" nil 64)
    ("rpcts" "replacements" nil 7)
    ("rpn" "representation" nil 1241)
    ("rpnl" "representational" nil 18)
    ("rpns" "representations" nil 396)
    ("rpny" "representationally" nil 2)
    ("rpt" "represent" nil 384)
    ("rptbl" "representable" nil 1)
    ("rptd" "represented" nil 245)
    ("rptg" "representing" nil 158)
    ("rpts" "represents" nil 66)
    ("rptv" "representative" nil 6)
    ("rptvs" "representatives" nil 0)
    ("rpv" "respective" nil 5)
    ("rpvy" "respectively" nil 35)
    ("rpzn" "reparametrization" nil 3)
    ("rqd" "required" nil 219)
    ("rqg" "requiring" nil 24)
    ("rqr" "require" nil 314)
    ("rqrd" "required" nil 20)
    ("rqrg" "requiring" nil 53)
    ("rqrs" "requires" nil 296)
    ("rqt" "requirement" nil 125)
    ("rqts" "requirements" nil 99)
    ("rsn" "resolution" nil 149)
    ("rsns" "resolutions" nil 6)
    ("rtn" "rotation" nil 83)
    ("rtnl" "rotational" nil 3)
    ("rtns" "rotations" nil 19)
    ("rvlt" "re-evaluate" nil 2)
    ("rvltd" "re-evaluated" nil 0)
    ("rvn" "revolution" nil 2)
    ("rvns" "revolutions" nil 0)
    ("rvy" "respectively" nil 87)
    ("s'a" "such as" nil 320)
    ("s'c" "sufficient condition" nil 24)
    ("s'cs" "sufficient conditions" nil 0)
    ("s'ctn" "success continuation" nil 62)
    ("s'ctns" "success continuations" nil 22)
    ("s'e" "side-effect" nil 12)
    ("s'e'c" "semantic editor combinator" nil 7)
    ("s'e'cs" "semantic editor combinators" nil 6)
    ("s'ec" "syntactic equivalence" nil 4)
    ("s'eg" "software engineering" nil 8)
    ("s'es" "side-effects" nil 17)
    ("s'f" "solved form" nil 31)
    ("s'i" "structural induction" nil 16)
    ("s'j" "syntactic judgment" nil 4)
    ("s'js" "syntactic judgments" nil 1)
    ("s'm" "state machine" nil 0)
    ("s'ms" "state machines" nil 0)
    ("s'n" "strong normalization" nil 26)
    ("s'ng" "strongly normalizing" nil 7)
    ("s'nz" "strongly normalize" nil 4)
    ("s'nzs" "strongly normalizes" nil 0)
    ("s'o" "second-order" nil 56)
    ("s'o'm" "second-order matching" nil 10)
    ("s'o'u" "second-order unification" nil 3)
    ("s'p" "special purpose" nil 11)
    ("s'p'o" "strict partial order" nil 8)
    ("s'p'os" "strict partial orders" nil 0)
    ("s'ps" "special predicates" nil 1)
    ("s'r" "simplification rule" nil 3)
    ("s'rs" "simplification rules" nil 2)
    ("s't" "such that" nil 297)
    ("s't'c" "simply typed calculus" nil 4)
    ("s't'l'c" "simply typed lambda-calculus" nil 26)
    ("s't'l's" "same top level structure" nil 2)
    ("s't'm" "space-time model" nil 6)
    ("s't'ms" "space-time models" nil 10)
    ("s'td" "simply typed" nil 25)
    ("s'tp" "simple type" nil 1)
    ("s'tps" "simple types" nil 1)
    ("s'v" "scientific visualization" nil 1)
    ("s'x" "specification transformation" nil 5)
    ("s'xs" "specification transformations" nil 0)
    ("sb'i" "substitution instance" nil 0)
    ("sb'is" "substitution instances" nil 1)
    ("sbn" "substitution" nil 665)
    ("sbns" "substitutions" nil 310)
    ("sbt" "substitute" nil 92)
    ("sbtd" "substituted" nil 29)
    ("sbtg" "substituting" nil 33)
    ("sbtn" "subtraction" nil 1)
    ("sbts" "substitutes" nil 7)
    ("sbty" "substitutivity" nil 1)
    ("sbv" "substitutive" nil 22)
    ("sbvy" "substitutivity" nil 9)
    ("scn" "section" nil 812)
    ("scns" "sections" nil 92)
    ("scs" "synchronous" nil 43)
    ("scsy" "synchronously" nil 4)
    ("scz" "synchronize" nil 5)
    ("sczd" "synchronized" nil 7)
    ("sczg" "synchronizing" nil 0)
    ("sczn" "synchronization" nil 59)
    ("sczs" "synchronizes" nil 0)
    ("sd" "second" nil 1103)
    ("sds" "seconds" nil 26)
    ("sdvn" "subderivation" nil 1)
    ("sdy" "secondly" nil 3)
    ("sfc" "specific" nil 319)
    ("sfcs" "specifics" nil 38)
    ("sfcy" "specifically" nil 180)
    ("sfn" "specification" nil 691)
    ("sfns" "specifications" nil 228)
    ("sft" "sufficient" nil 88)
    ("sfty" "sufficiently" nil 35)
    ("sfy" "specify" nil 220)
    ("sfyd" "specified" nil 170)
    ("sfyg" "specifying" nil 74)
    ("sfyr" "specifier" nil 4)
    ("sfyrs" "specifiers" nil 0)
    ("sfys" "specifies" nil 21)
    ("sg" "something" nil 1445)
    ("sgr" "signature" nil 153)
    ("sgrs" "signatures" nil 81)
    ("shouldnt" "shouldn't" nil 4)
    ("siad" "said" nil 12)
    ("sicne" "since" nil 50)
    ("simeq'" "≃" nil 1)
    ("simlify" "simplify" nil 1)
    ("sivl" "subinterval" nil 1)
    ("sivls" "subintervals" nil 2)
    ("sjt" "subject" nil 35)
    ("sjtd" "subjected" nil 4)
    ("sjts" "subjects" nil 1)
    ("sjv" "subjective" nil 19)
    ("sjvy" "subjectively" nil 9)
    ("slcn" "selection" nil 10)
    ("sln" "solution" nil 573)
    ("slns" "solutions" nil 153)
    ("smc" "semantic" nil 434)
    ("smcs" "semantics" nil 850)
    ("smcy" "semantically" nil 113)
    ("smn" "simplification" nil 252)
    ("smns" "simplifications" nil 59)
    ("smy" "simplify" nil 380)
    ("smyd" "simplified" nil 138)
    ("smyg" "simplifying" nil 104)
    ("smyr" "simplifier" nil 39)
    ("smyrs" "simplifiers" nil 1)
    ("smys" "simplifies" nil 72)
    ("snc" "synthetic" nil 72)
    ("sncy" "synthetically" nil 2)
    ("sns" "synthesis" nil 132)
    ("snss" "syntheses" nil 6)
    ("snz" "synthesize" nil 62)
    ("snzd" "synthesized" nil 22)
    ("snzg" "synthesizing" nil 21)
    ("snzs" "synthesizes" nil 0)
    ("soem" "some" nil 48)
    ("spbm" "subproblem" nil 1)
    ("spbms" "subproblems" nil 4)
    ("spl" "special" nil 397)
    ("spls" "specials" nil 5)
    ("sply" "specially" nil 24)
    ("spt" "separate" nil 3)
    ("sql" "sequential" nil 210)
    ("sqly" "sequentially" nil 14)
    ("sqn" "sequence" nil 408)
    ("sqns" "sequences" nil 170)
    ("sqty" "sequentiality" nil 91)
    ("srv" "surjective" nil 7)
    ("srvy" "surjectively" nil 1)
    ("ssg" "structure-sharing" nil 25)
    ("stc" "syntactic" nil 121)
    ("stcly" "syntactically" nil 0)
    ("stcy" "syntactically" nil 15)
    ("std" "standard" nil 507)
    ("stds" "standards" nil 6)
    ("stdz" "standardize" nil 6)
    ("stdzn" "standardization" nil 2)
    ("stfd" "satisfied" nil 28)
    ("stfg" "satisfying" nil 41)
    ("stfl" "satisfiable" nil 6)
    ("stfn" "satisfaction" nil 32)
    ("stfs" "satisfies" nil 20)
    ("stfy" "satisfy" nil 76)
    ("stm" "system" nil 497)
    ("stmc" "systematic" nil 25)
    ("stmcy" "systematically" nil 21)
    ("stms" "systems" nil 292)
    ("stmt" "statement" nil 94)
    ("stmts" "statements" nil 43)
    ("sty" "satisfy" nil 104)
    ("styd" "satisfied" nil 46)
    ("styg" "satisfying" nil 32)
    ("stys" "satisfies" nil 29)
    ("svl" "several" nil 502)
    ("sx" "syntax" nil 442)
    ("sxn" "subexpression" nil 3)
    ("sxns" "subexpressions" nil 0)
    ("sxpn" "s-expression" nil 3)
    ("sz" "specialize" nil 192)
    ("szd" "specialized" nil 180)
    ("szg" "specializing" nil 44)
    ("szn" "specialization" nil 127)
    ("szns" "specializations" nil 49)
    ("szr" "specializer" nil 9)
    ("szs" "specializes" nil 122)
    ("t'b" "tangent bundle" nil 0)
    ("t'bs" "tangent bundles" nil 0)
    ("t'c" "type-check" nil 3)
    ("t'c'm" "type class morphism" nil 16)
    ("t'c'ms" "type class morphisms" nil 22)
    ("t'cg" "type checking" nil 81)
    ("t'cr" "type checker" nil 1)
    ("t'd" "temporal deviation" nil 3)
    ("t'f" "the following" nil 1326)
    ("t'f'p" "tangible functional programming" nil 4)
    ("t'i" "type inference" nil 183)
    ("t'id" "type-instantiated" nil 9)
    ("t'in" "type-instantiation" nil 4)
    ("t'itd" "tolerably ill-typed" nil 5)
    ("t'itds" "tolerable ill-typedness" nil 0)
    ("t'l" "term language" nil 73)
    ("t'l'c" "typed lambda calculus" nil 66)
    ("t'l'cs" "typed lambda-calculi" nil 4)
    ("t'l'i" "term language interface" nil 2)
    ("t'l's" "top level structure" nil 28)
    ("t'ls" "term languages" nil 4)
    ("t'o" "third-order" nil 13)
    ("t'ocn" "term-occurence" nil 2)
    ("t'ocns" "term-occurrences" nil 1)
    ("t'p" "theorem proving" nil 94)
    ("t'pr" "theorem prover" nil 3)
    ("t'r" "tail recursive" nil 3)
    ("t't" "time transform" nil 25)
    ("t'td" "time transformed" nil 0)
    ("t'tn" "time transformation" nil 22)
    ("t'tns" "time transformations" nil 3)
    ("t'ts" "time transforms" nil 9)
    ("t'v" "type variable" nil 53)
    ("t'vs" "type variables" nil 122)
    ("t'w" "to which")
    ("ta'v" "tangible value" nil 5)
    ("ta'vs" "tangible values" nil 8)
    ("taht" "that" nil 38)
    ("tcl" "technical" nil 192)
    ("tcly" "technically" nil 12)
    ("tcy" "technology" nil 98)
    ("tcys" "technologies" nil 5)
    ("td" "third" nil 126)
    ("teh" "the" nil 821)
    ("tfr" "therefore" nil 147)
    ("thats" "that's" nil 1)
    ("theres" "there's")
    ("theri" "their" nil 4)
    ("thm" "theorem" nil 117)
    ("thms" "theorems" nil 42)
    ("thsi" "this" nil 104)
    ("thta" "that" nil 21)
    ("thy" "theory" nil 194)
    ("thys" "theories" nil 21)
    ("tiem" "time" nil 69)
    ("tiems" "times" nil 9)
    ("times'" "×" nil 11)
    ("tm" "term" nil 1232)
    ("tm'i" "term inference" nil 25)
    ("tmgy" "terminology" nil 12)
    ("tml" "terminal" nil 8)
    ("tmn" "termination" nil 74)
    ("tms" "terms" nil 1207)
    ("tmt" "terminate" nil 39)
    ("tmtd" "terminated" nil 13)
    ("tmtg" "terminating" nil 12)
    ("tmts" "terminates" nil 12)
    ("tmv" "term-variable" nil 1)
    ("tnq" "technique" nil 223)
    ("tnqs" "techniques" nil 169)
    ("top'" "⊤" nil 1)
    ("tp" "type" nil 6169)
    ("tp'f" "type family" nil 7)
    ("tp'fs" "type families" nil 2)
    ("tpbl" "typable" nil 1)
    ("tpd" "typed" nil 353)
    ("tpg" "typing" nil 318)
    ("tpgs" "typings" nil 17)
    ("tpl" "tuple" nil 11)
    ("tps" "types" nil 2533)
    ("tptp" "type-type" nil 4)
    ("tr'c" "transitive closure" nil 2)
    ("ty'c" "type class" nil 7)
    ("ty'cs" "type classes" nil 1)
    ("u'c" "unification context" nil 36)
    ("u'cs" "unification contexts" nil 3)
    ("u'e" "unification equivalent" nil 5)
    ("u'i" "user interface" nil 21)
    ("u'in" "user interaction" nil 1)
    ("u'is" "user interfaces" nil 4)
    ("u'l" "unification logic" nil 5)
    ("u'p" "unification problem" nil 151)
    ("u'ps" "unification problems" nil 142)
    ("u'q" "universal quantification" nil 5)
    ("u'qd" "universally quantified" nil 0)
    ("ucvtl" "unconventional" nil 4)
    ("udcbl" "undecidable" nil 7)
    ("udfd" "undefined" nil 810)
    ("ufby" "unifiability" nil 104)
    ("ufd" "unified" nil 66)
    ("ufg" "unifying" nil 87)
    ("ufl" "unifiable" nil 63)
    ("ufm" "uniform" nil 86)
    ("ufms" "uniforms" nil 1)
    ("ufmy" "uniformly" nil 8)
    ("ufn" "unification" nil 684)
    ("ufns" "unifications" nil 13)
    ("ufr" "unifier" nil 222)
    ("ufrs" "unifiers" nil 190)
    ("ufs" "unifies" nil 54)
    ("ufy" "unify" nil 116)
    ("ufys" "unifies" nil 3)
    ("uiprt" "unimportant" nil 12)
    ("uitg" "uninteresting" nil 6)
    ("uizd" "uninitialized" nil 2)
    ("uncly" "unnecessarily" nil 26)
    ("uncy" "unnecessary" nil 114)
    ("unq" "unique" nil 1)
    ("untl" "unnatural" nil 9)
    ("untly" "unnaturally" nil 0)
    ("uozd" "unoptimized" nil 5)
    ("usfbl" "unsatisfiable" nil 3)
    ("ustyd" "unsatisfied" nil 2)
    ("ustyg" "unsatisfying" nil 1)
    ("utpd" "untyped" nil 18)
    ("uvl" "universal" nil 165)
    ("uvls" "universals" nil 19)
    ("uvltd" "unevaluated" nil 3)
    ("uvly" "universally" nil 17)
    ("uvy" "universally" nil 13)
    ("v'b" "variable binding" nil 0)
    ("v'd" "virtual device" nil 8)
    ("v'ds" "virtual devices" nil 1)
    ("v'm" "virtual machine" nil 7)
    ("v'p" "view point" nil 5)
    ("v'r" "virtual reality" nil 5)
    ("v's" "vector space" nil 46)
    ("v'ss" "vector spaces" nil 58)
    ("v't" "virtual trackball" nil 9)
    ("v'w" "virtual world" nil 14)
    ("v'ws" "virtual worlds" nil 9)
    ("v'x" "viewing transform" nil 18)
    ("v'xs" "viewing transforms" nil 2)
    ("vbl" "variable" nil 885)
    ("vbls" "variables" nil 819)
    ("vfcn" "verification" nil 2)
    ("vfd" "verified" nil 14)
    ("vfg" "verifying" nil 4)
    ("vfl" "verifiable" nil 0)
    ("vfn" "verification" nil 36)
    ("vfy" "verify" nil 45)
    ("vfyd" "verified" nil 8)
    ("vfyg" "verifying" nil 0)
    ("vfys" "verifies" nil 3)
    ("vln" "evaluation" nil 306)
    ("vlns" "evaluations" nil 24)
    ("vlt" "evaluate" nil 86)
    ("vltd" "evaluated" nil 63)
    ("vltg" "evaluating" nil 40)
    ("vlts" "evaluates" nil 17)
    ("vpt" "viewpoint" nil 13)
    ("vpts" "viewpoints" nil 0)
    ("vrml" "VRML" nil 23)
    ("vsl" "visual" nil 3)
    ("vsn" "version" nil 1180)
    ("vsns" "versions" nil 261)
    ("vtm" "variable-term" nil 39)
    ("vtp" "variable-type" nil 3)
    ("vvtm" "virtual-variable-term" nil 0)
    ("vz" "visualize" nil 14)
    ("vzd" "visualized" nil 5)
    ("vzg" "visualizing" nil 11)
    ("vzn" "visualization" nil 34)
    ("vzns" "visualizations" nil 19)
    ("vzr" "visualizer" nil 1)
    ("vzrs" "visualizers" nil 2)
    ("vzs" "visualizes" nil 0)
    ("w'c" "world coordinate" nil 3)
    ("w'cs" "world coordinates" nil 1)
    ("w'd" "well-defined" nil 0)
    ("w'f" "well formed" nil 12)
    ("w'f'o" "well founded ordering" nil 7)
    ("w'f'os" "well founded orderings" nil 1)
    ("w'fs" "well formedness" nil 3)
    ("w'h'n'f" "weak head normal form" nil 10)
    ("w'h'r" "weak head reduction" nil 1)
    ("w'l'g" "without loss of generality" nil 6)
    ("w'p" "word processing" nil 3)
    ("w'r't" "with respect to" nil 109)
    ("w'v" "weakly valid" nil 2)
    ("w'w" "with which" nil 3)
    ("waht" "what" nil 23)
    ("wasnt" "wasn't" nil 7)
    ("wch" "which" nil 5153)
    ("wdfd" "well-defined" nil 20)
    ("werent" "weren't" nil 3)
    ("weve" "we've" nil 7)
    ("wh" "with" nil 14082)
    ("whehter" "whether" nil 12)
    ("whn" "within" nil 7)
    ("wiht" "with" nil 2)
    ("wkdd" "well-kinded" nil 7)
    ("wnat" "want" nil 12)
    ("wo" "without" nil 1299)
    ("wont" "won't" nil 12)
    ("wont'" "wont" nil 3)
    ("woudl" "would" nil 19)
    ("wouldnt" "wouldn't" nil 10)
    ("wrok" "work" nil 12)
    ("wroking" "working" nil 2)
    ("wtbl" "well-typable" nil 1)
    ("wtd" "well-typed" nil 295)
    ("wtds" "well-typedness" nil 31)
    ("x'p" "transformation path" nil 3)
    ("x'ps" "transformation paths" nil 1)
    ("x'r" "transformation rule" nil 29)
    ("x'rs" "transformation rules" nil 72)
    ("x's" "transformation system" nil 7)
    ("xcv" "exclusive" nil 3)
    ("xfbl" "transformable" nil 3)
    ("xfd" "transformed" nil 61)
    ("xfg" "transforming" nil 60)
    ("xfl" "transformational" nil 12)
    ("xfm" "transform" nil 476)
    ("xfmd" "transformed" nil 10)
    ("xfmg" "transforming" nil 11)
    ("xfmr" "transformer" nil 2)
    ("xfms" "transforms" nil 144)
    ("xfn" "transformation" nil 813)
    ("xfnl" "transformational" nil 4)
    ("xfns" "transformations" nil 352)
    ("xfr" "transformer" nil 44)
    ("xfrs" "transformers" nil 21)
    ("xln" "translation" nil 379)
    ("xlns" "translations" nil 36)
    ("xlt" "translate" nil 166)
    ("xltd" "translated" nil 37)
    ("xltg" "translating" nil 44)
    ("xltn" "translation" nil 2)
    ("xltr" "translator" nil 12)
    ("xlts" "translates" nil 10)
    ("xn" "transition" nil 150)
    ("xnl" "transitional" nil 2)
    ("xns" "transitions" nil 44)
    ("xpl" "example" nil 1285)
    ("xpln" "explanation" nil 189)
    ("xplns" "explanations" nil 25)
    ("xpls" "examples" nil 818)
    ("xpn" "expression" nil 699)
    ("xpnl" "exponential" nil 0)
    ("xpns" "expressions" nil 571)
    ("xps" "express" nil 210)
    ("xpsd" "expressed" nil 144)
    ("xpsg" "expressing" nil 49)
    ("xpsl" "expressible" nil 0)
    ("xpss" "expresses" nil 2)
    ("xpsv" "expressive" nil 12)
    ("xpv" "expressive" nil 41)
    ("xpvs" "expressiveness" nil 21)
    ("xrl" "external" nil 94)
    ("xrly" "externally" nil 9)
    ("xrz" "externalize" nil 7)
    ("xrzd" "externalized" nil 1)
    ("xrzg" "externalizing" nil 0)
    ("xrzn" "externalization" nil 8)
    ("xrzs" "externalizes" nil 0)
    ("xsl" "extensional" nil 9)
    ("xsly" "extensionally" nil 0)
    ("xtbl" "extensible" nil 49)
    ("xtby" "extensibility" nil 24)
    ("xtc" "existence" nil 25)
    ("xtd" "extend" nil 208)
    ("xtdd" "extended" nil 128)
    ("xtdg" "extending" nil 76)
    ("xtds" "extends" nil 56)
    ("xtg" "existing" nil 167)
    ("xtl" "existential" nil 34)
    ("xtls" "existentials" nil 6)
    ("xtly" "existentially" nil 24)
    ("xtn" "extension" nil 225)
    ("xtns" "extensions" nil 142)
    ("xtv" "extensive" nil 7)
    ("xtvy" "extensively" nil 2)
    ("youd" "you'd" nil 1)
    ("youve" "you've" nil 3)
   ))

(define-abbrev-table 'glsl-mode-abbrev-table '())

(define-abbrev-table 'graphviz-dot-mode-abbrev-table '())

(define-abbrev-table 'grep-mode-abbrev-table '())

(define-abbrev-table 'haskell-cabal-mode-abbrev-table '())

(define-abbrev-table 'haskell-compilation-mode-abbrev-table '())

(define-abbrev-table 'haskell-debug-mode-abbrev-table '())

(define-abbrev-table 'haskell-error-mode-abbrev-table '())

(define-abbrev-table 'haskell-interactive-mode-abbrev-table '())

(define-abbrev-table 'haskell-menu-mode-abbrev-table '())

(define-abbrev-table 'haskell-mode-abbrev-table
  '(
    ("alt" "Alt" nil 2)
    ("df" "df" nil 12)
    ("fo" "fo" nil 7)
   ))

(define-abbrev-table 'haskell-presentation-mode-abbrev-table '())

(define-abbrev-table 'haskell-yesod-parse-routes-mode-abbrev-table '())

(define-abbrev-table 'help-mode-abbrev-table '())

(define-abbrev-table 'hs-lint-mode-abbrev-table '())

(define-abbrev-table 'html-mode-abbrev-table
  '(
    ("td" "td" nil 21)
   ))

(define-abbrev-table 'idl-mode-abbrev-table '())

(define-abbrev-table 'inferior-haskell-mode-abbrev-table '())

(define-abbrev-table 'inferior-python-mode-abbrev-table '())

(define-abbrev-table 'java-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("finally" "finally" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'javascript-mode-abbrev-table '())

(define-abbrev-table 'js-jsx-mode-abbrev-table '())

(define-abbrev-table 'js-mode-abbrev-table '())

(define-abbrev-table 'latex-mode-abbrev-table '())

(define-abbrev-table 'lisp-mode-abbrev-table
  '(
    ("mvb" "multiple-value-bind" nil 119)
    ("mvs" "multiple-value-setq" nil 3)
   ))

(define-abbrev-table 'literate-haskell-mode-abbrev-table '())

(define-abbrev-table 'log-view-mode-abbrev-table '())

(define-abbrev-table 'makefile-automake-mode-abbrev-table '())

(define-abbrev-table 'makefile-bsdmake-mode-abbrev-table '())

(define-abbrev-table 'makefile-gmake-mode-abbrev-table '())

(define-abbrev-table 'makefile-imake-mode-abbrev-table '())

(define-abbrev-table 'makefile-makepp-mode-abbrev-table '())

(define-abbrev-table 'makefile-mode-abbrev-table '())

(define-abbrev-table 'markdown-mode-abbrev-table
  '(
    ("b'r" "$\\beta$ reduce" nil 15)
    ("b'rd" "$\\beta$ reduced" nil 4)
    ("b'rg" "$\\beta$ reducing" nil 5)
    ("b'rn" "$\\beta$ reduction" nil 47)
    ("b'rns" "$\\beta$ reductions" nil 35)
    ("b'rx" "$\\beta$ redex" nil 51)
    ("b'rxs" "$\\beta$ redexes" nil 45)
    ("e'e" "$\\eta$ expand" nil 19)
    ("e'ed" "$\\eta$ expanded" nil 3)
    ("e'eg" "$\\eta$ expanding" nil 2)
    ("e'en" "$\\eta$ expansion" nil 22)
    ("e'ens" "$\\eta$ expansions" nil 18)
    ("e'r" "$\\eta$ reduce" nil 21)
    ("e'rd" "$\\eta$ reduced" nil 2)
    ("e'rg" "$\\eta$ reducing" nil 2)
    ("e'rn" "$\\eta$ reduction" nil 26)
    ("e'rns" "$\\eta$ reductions" nil 20)
    ("e'rx" "$\\eta$ redex" nil 31)
    ("e'rxs" "$\\eta$ redexes" nil 33)
    ("l'c" "$\\lambda$ calculus" nil 64)
    ("l'cs" "$\\lambda$ calculi" nil 11)
    ("t'l'c" "typed $\\lambda$ calculus" nil 38)
    ("t'l'cs" "typed $\\lambda$ calculi" nil 34)
   ))

(define-abbrev-table 'message-mode-abbrev-table '())

(define-abbrev-table 'messages-buffer-mode-abbrev-table '())

(define-abbrev-table 'network-connection-mode-abbrev-table '())

(define-abbrev-table 'nslookup-mode-abbrev-table '())

(define-abbrev-table 'nxml-mode-abbrev-table '())

(define-abbrev-table 'objc-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 1)
   ))

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'org-mode-abbrev-table '())

(define-abbrev-table 'outline-mode-abbrev-table '())

(define-abbrev-table 'package-menu-mode-abbrev-table '())

(define-abbrev-table 'perl-mode-abbrev-table '())

(define-abbrev-table 'pike-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'plain-tex-mode-abbrev-table '())

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'ps-mode-abbrev-table '())

(define-abbrev-table 'ps-run-mode-abbrev-table '())

(define-abbrev-table 'python-mode-abbrev-table '())

(define-abbrev-table 'python-mode-skeleton-abbrev-table '())

(define-abbrev-table 'ruby-mode-abbrev-table '())

(define-abbrev-table 'scss-mode-abbrev-table '())

(define-abbrev-table 'select-tags-table-mode-abbrev-table '())

(define-abbrev-table 'sgml-mode-abbrev-table '())

(define-abbrev-table 'sh-mode-abbrev-table '())

(define-abbrev-table 'shell-mode-abbrev-table '())

(define-abbrev-table 'slitex-mode-abbrev-table '())

(define-abbrev-table 'smbclient-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'speedbar-mode-abbrev-table '())

(define-abbrev-table 'tabulated-list-mode-abbrev-table '())

(define-abbrev-table 'tar-mode-abbrev-table '())

(define-abbrev-table 'tex-mode-abbrev-table
  '(
    ("a'cn" "$\\alpha$ conversion" nil 52)
    ("a'ec" "$\\alpha$ equivalence" nil 13)
    ("a'et" "$\\alpha$ equivalent" nil 5)
    ("b'cn" "$\\beta$ conversion" nil 3)
    ("b'nf" "$\\beta$ normal form" nil 31)
    ("b'r" "$\\beta$ reduce" nil 9)
    ("b'rd" "$\\beta$ reduced" nil 3)
    ("b'rn" "$\\beta$ reduction" nil 32)
    ("be'nf" "$\\beta\\eta$ normal form" nil 8)
    ("benf" "$\\beta\\eta$ normal form" nil 27)
    ("benfs" "$\\beta\\eta$ normal forms" nil 4)
    ("d't'l'c" "dependent typed $\\lambda$ calculus" nil 1)
    ("e'e" "$\\eta$ expand" nil 14)
    ("e'ed" "$\\eta$ expanded" nil 3)
    ("e'en" "$\\eta$ expansion" nil 21)
    ("e'rn" "$\\eta$ reduction" nil 10)
    ("gd" "gd" nil 15)
    ("ith'" "$i$th" nil 19)
    ("l'c" "$\\lambda$ calculus" nil 43)
    ("l'cs" "$\\lambda$ calculi" nil 9)
    ("l'cvby" "$\\lambda$ convertability" nil 4)
    ("l'ec" "$\\lambda$ equivalence" nil 2)
    ("l'mm" "$\\lambda$ morphism" nil 3)
    ("l'mms" "$\\lambda$ morphisms" nil 5)
    ("lbehnf" "long $\\beta\\eta$ normal form" nil 8)
    ("lbenf" "long $\\beta\\eta$ normal form" nil 18)
    ("lbepnf" "long $\\beta\\eta$ product normal form" nil 3)
    ("lcvn" "$\\lambda$ conversion" nil 1)
    ("lfhnf" "$\\lambda$-free head normal form" nil 6)
    ("lpg" "$\\lambda$Prolog" nil 34)
    ("lppg" "$\\Lpi$Prolog" nil 1)
    ("ltm" "$\\lambda$ term" nil 1)
    ("ltms" "$\\lambda$ terms" nil 1)
    ("o'p'l'c" "$\\omega$-order polymorphic $\\lambda$ calculus" nil 7)
    ("p'l'c" "polymorphic $\\lambda$ calculus" nil 19)
    ("s't'l'c" "simply typed $\\lambda$ calculus" nil 45)
    ("t'l'c" "typed $\\lambda$ calculus" nil 35)
    ("t'l'cs" "typed $\\lambda$ calculi" nil 8)
   ))

(define-abbrev-table 'tex-shell-abbrev-table '())

(define-abbrev-table 'texinfo-mode-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'url-cookie-mode-abbrev-table '())

(define-abbrev-table 'use-package-statistics-mode-abbrev-table '())

(define-abbrev-table 'vc-annotate-mode-abbrev-table '())

(define-abbrev-table 'vc-dired-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-edit-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-view-mode-abbrev-table '())

(define-abbrev-table 'vc-git-region-history-mode-abbrev-table '())

(define-abbrev-table 'vc-svn-log-view-mode-abbrev-table '())

(define-abbrev-table 'verilog-mode-abbrev-table '())

(define-abbrev-table 'xref--xref-buffer-mode-abbrev-table '())

(define-abbrev-table 'yaml-mode-abbrev-table '())

