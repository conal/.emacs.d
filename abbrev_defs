;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'Custom-mode-abbrev-table '())

(define-abbrev-table 'Info-edit-mode-abbrev-table '())

(define-abbrev-table 'Man-mode-abbrev-table '())

(define-abbrev-table 'antlr-mode-abbrev-table '())

(define-abbrev-table 'apropos-mode-abbrev-table '())

(define-abbrev-table 'asm-mode-abbrev-table '())

(define-abbrev-table 'awk-mode-abbrev-table '())

(define-abbrev-table 'bibtex-mode-abbrev-table '())

(define-abbrev-table 'bookmark-bmenu-mode-abbrev-table '())

(define-abbrev-table 'bookmark-edit-annotation-mode-abbrev-table '())

(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'c-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'cabal-mode-abbrev-table '())

(define-abbrev-table 'calendar-mode-abbrev-table '())

(define-abbrev-table 'change-log-mode-abbrev-table '())

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'conf-colon-mode-abbrev-table '())

(define-abbrev-table 'conf-javaprop-mode-abbrev-table '())

(define-abbrev-table 'conf-ppd-mode-abbrev-table '())

(define-abbrev-table 'conf-space-mode-abbrev-table '())

(define-abbrev-table 'conf-unix-mode-abbrev-table '())

(define-abbrev-table 'conf-windows-mode-abbrev-table '())

(define-abbrev-table 'conf-xdefaults-mode-abbrev-table '())

(define-abbrev-table 'csharp-mode-abbrev-table '())

(define-abbrev-table 'css-mode-abbrev-table '())

(define-abbrev-table 'debugger-mode-abbrev-table '())

(define-abbrev-table 'delphi-mode-abbrev-table '())

(define-abbrev-table 'diff-mode-abbrev-table '())

(define-abbrev-table 'display-time-world-mode-abbrev-table '())

(define-abbrev-table 'doc-view-mode-abbrev-table '())

(define-abbrev-table 'doctex-mode-abbrev-table '())

(define-abbrev-table 'doctor-mode-abbrev-table '())

(define-abbrev-table 'edit-abbrevs-mode-abbrev-table '())

(define-abbrev-table 'elisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'epa-info-mode-abbrev-table '())

(define-abbrev-table 'epa-key-list-mode-abbrev-table '())

(define-abbrev-table 'epa-key-mode-abbrev-table '())

(define-abbrev-table 'erc-chanlist-mode-abbrev-table '())

(define-abbrev-table 'erc-list-menu-mode-abbrev-table '())

(define-abbrev-table 'erc-mode-abbrev-table '())

(define-abbrev-table 'eshell-mode-abbrev-table '())

(define-abbrev-table 'finder-mode-abbrev-table '())

(define-abbrev-table 'flycheck-error-list-mode-abbrev-table '())

(define-abbrev-table 'ftp-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'gfm-mode-abbrev-table '())

(define-abbrev-table 'ghc-core-mode-abbrev-table '())

(define-abbrev-table 'ghci-script-mode-abbrev-table '())

(define-abbrev-table 'git-log-view-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table
  '(
    ("a'a" "axis-aligned" nil 5)
    ("a'b" "assign-behavior" nil 4)
    ("a'cn" "alpha-conversion" nil 17)
    ("a'ct" "$\\alpha$-convert" nil 4)
    ("a'd" "automatic differentiation" nil 80)
    ("a'd't" "abstract data type" nil 21)
    ("a'd'ts" "abstract data types" nil 22)
    ("a'ect" "alpha-equivalence" nil 1)
    ("a'ett" "alpha-equivalent" nil 1)
    ("a'f" "as follows" nil 290)
    ("a'fr" "applicative functor" nil 0)
    ("a'g" "attribute grammar" nil 2)
    ("a'k'o" "a kind of" nil 1)
    ("a'l" "at least" nil 432)
    ("a'o't" "as opposed to" nil 54)
    ("a's" "abstract syntax" nil 137)
    ("a's't" "abstract syntax tree" nil 4)
    ("a's'ts" "abstract syntax trees" nil 10)
    ("a'st" "attribute state" nil 2)
    ("a't" "abstract type" nil 7)
    ("a't'p" "automated theorem proving" nil 3)
    ("a'v" "assign-value" nil 3)
    ("a'w" "at which" nil 17)
    ("a'w'a" "as well as" nil 4)
    ("a'w't" "at which time" nil 2)
    ("a'wk" "approximately well-kinded" nil 1)
    ("a'ws" "approximate well-typedness" nil 21)
    ("aa'bb" "axis-aligned bounding box" nil 1)
    ("aa'bbs" "axis-aligned bounding boxes" nil 2)
    ("abd" "abstracted" nil 22)
    ("abn" "abstraction" nil 334)
    ("abns" "abstractions" nil 147)
    ("abotu" "about" nil 9)
    ("abt" "abstract" nil 418)
    ("abtd" "abstracted" nil 4)
    ("abtg" "abstracting" nil 16)
    ("abts" "abstracts" nil 12)
    ("abty" "abstractly" nil 17)
    ("acl" "acceptable" nil 72)
    ("actg" "accounting" nil 3)
    ("actgs" "accountings" nil 0)
    ("acy" "acceptability" nil 37)
    ("addn" "addition" nil 80)
    ("addns" "additions" nil 32)
    ("addny" "additionally" nil 6)
    ("adl" "additional" nil 2)
    ("adly" "additionally" nil 2)
    ("adn" "and" nil 371)
    ("adnl" "additional" nil 221)
    ("adnly" "additionally" nil 14)
    ("adny" "additionally" nil 3)
    ("agm" "algorithm" nil 808)
    ("agmc" "algorithmic" nil 23)
    ("agmcy" "algorithmically" nil 5)
    ("agms" "algorithms" nil 301)
    ("agt" "argument" nil 1094)
    ("agts" "arguments" nil 725)
    ("ahve" "have" nil 43)
    ("ajn" "adjunction" nil 7)
    ("ajns" "adjunctions" nil 2)
    ("ala" "à la" nil 2)
    ("alc" "algebraic" nil 37)
    ("alcy" "algebraically" nil 1)
    ("alhpa" "alpha" nil 2)
    ("alt" "absolute" nil 92)
    ("altg" "alternating" nil 2)
    ("altt" "alternate" nil 69)
    ("altts" "alternates" nil 1)
    ("alty" "absolutely" nil 8)
    ("amn" "animation" nil 64)
    ("amns" "animations" nil 17)
    ("ap'f" "applicative functor" nil 10)
    ("ap'fs" "applicative functors" nil 9)
    ("apbl" "applicable" nil 63)
    ("apby" "applicability" nil 28)
    ("apg" "applying" nil 341)
    ("aph" "approach" nil 1047)
    ("aphd" "approached" nil 3)
    ("aphg" "approaching" nil 8)
    ("aphs" "approaches" nil 100)
    ("apn" "application" nil 1063)
    ("apns" "applications" nil 481)
    ("appt" "appropriate" nil 4)
    ("appty" "appropriately" nil 0)
    ("aps" "applies" nil 85)
    ("apv" "applicative" nil 692)
    ("apvl" "approval" nil 2)
    ("apvs" "applicatives" nil 21)
    ("apvy" "applicatively" nil 4)
    ("apy" "apply" nil 847)
    ("apyd" "applied" nil 347)
    ("apys" "applies" nil 98)
    ("arent" "aren't" nil 3)
    ("asap'" "as soon as possible" nil 2)
    ("asct" "associate" nil 4)
    ("asg" "assigning" nil 27)
    ("asgd" "assigned" nil 16)
    ("asgt" "assignment" nil 87)
    ("asgts" "assignments" nil 25)
    ("asmn" "assumption" nil 116)
    ("asmns" "assumptions" nil 36)
    ("asn" "association" nil 50)
    ("asns" "associations" nil 8)
    ("asrn" "assertion" nil 3)
    ("asrns" "assertions" nil 0)
    ("ast" "associate" nil 71)
    ("astd" "associated" nil 278)
    ("astg" "associating" nil 20)
    ("astn" "association" nil 2)
    ("asts" "associates" nil 19)
    ("asty" "associativity" nil 16)
    ("asv" "associative" nil 74)
    ("asvy" "associativity" nil 66)
    ("at's" "attribute state" nil 0)
    ("ata" "automata" nil 52)
    ("atc" "automatic" nil 100)
    ("atcy" "automatically" nil 196)
    ("atn" "automaton" nil 80)
    ("atr" "architecture" nil 122)
    ("atrl" "architectural" nil 3)
    ("atrs" "architectures" nil 24)
    ("att" "attribute" nil 246)
    ("attd" "attributed" nil 13)
    ("attr" "attr" nil 85)
    ("atts" "attributes" nil 220)
    ("aufn" "anti-unification" nil 4)
    ("aufr" "anti-unifier" nil 1)
    ("aufrs" "anti-unifiers" nil 0)
    ("avl" "ActiveVRML" nil 78)
    ("avn" "abbreviation" nil 44)
    ("avns" "abbreviations" nil 19)
    ("avt" "abbreviate" nil 11)
    ("avtd" "abbreviated" nil 6)
    ("avtg" "abbreviating" nil 0)
    ("avts" "abbreviates" nil 3)
    ("axg" "approximating" nil 25)
    ("axm" "axiom" nil 4)
    ("axms" "axioms" nil 22)
    ("axn" "approximation" nil 192)
    ("axns" "approximations" nil 88)
    ("axt" "approximate" nil 92)
    ("axtd" "approximated" nil 11)
    ("axtg" "approximating" nil 4)
    ("axts" "approximates" nil 11)
    ("axty" "approximately" nil 3)
    ("axy" "approximately" nil 11)
    ("b'b" "bounding box" nil 10)
    ("b'bs" "bounding boxes" nil 11)
    ("b'cn" "beta-conversion" nil 3)
    ("b'f" "breadth-first" nil 7)
    ("b'f's" "breadth-first search" nil 8)
    ("b'l" "behavior language" nil 32)
    ("b'm'o" "by means of" nil 2)
    ("b'rc" "beta-reduce" nil 4)
    ("b'rcd" "beta-reduced" nil 0)
    ("b'rdt" "beta-reduced" nil 1)
    ("b'rn" "beta-reduction" nil 36)
    ("b'rns" "beta-reductions" nil 6)
    ("b'rnt" "beta-reduction" nil 22)
    ("b'rt" "beta-reduce" nil 1)
    ("b'rx" "beta-redex" nil 7)
    ("b'rxs" "beta-redexes" nil 5)
    ("b't" "behavior thread" nil 12)
    ("b't'w" "by the way" nil 31)
    ("b'ts" "behavior threads" nil 8)
    ("b'v" "bound variable" nil 45)
    ("b'v'h" "bounding volume hierarchy" nil 0)
    ("b'v'hs" "bounding volume hierarchies" nil 0)
    ("b'vm" "bounding volume" nil 4)
    ("b'vms" "bounding volumes" nil 9)
    ("b'vs" "bound variables" nil 82)
    ("bc'c'c" "bicartesian closed category" nil 1)
    ("bd" "bound" nil 108)
    ("bdd" "bounded" nil 19)
    ("bdg" "binding" nil 187)
    ("bdgs" "bindings" nil 84)
    ("bds" "bounds" nil 23)
    ("becasue" "because" nil 26)
    ("becuase" "because" nil 64)
    ("bjn" "bijection" nil 26)
    ("bjns" "bijections" nil 3)
    ("bjv" "bijective" nil 9)
    ("bot'" "⊥" nil 73)
    ("btm" "bottom" nil 1)
    ("btms" "bottoms" nil 1)
    ("bv" "behave" nil 1)
    ("bvd" "behaved" nil 0)
    ("bvl" "behavioral" nil 3)
    ("bvr" "behavior" nil 1667)
    ("bvrl" "behavioral" nil 4)
    ("bvrr" "Bvr" nil 3)
    ("bvrs" "behaviors" nil 895)
    ("bvs" "behaves" nil 0)
    ("c'b'v" "call-by-value" nil 27)
    ("c'b'x" "continuation-based transformation" nil 1)
    ("c'c'c" "cartesian closed category" nil 5)
    ("c'c'cs" "cartesian closed categories" nil 15)
    ("c'cs" "chain-completeness" nil 1)
    ("c'ctn" "collision continuation" nil 3)
    ("c'd" "collision detection" nil 19)
    ("c'e" "constraint expression" nil 2)
    ("c'es" "constraint expressions" nil 2)
    ("c'f" "continuous function" nil 6)
    ("c'fs" "continuous functions" nil 1)
    ("c'g" "computer graphics" nil 11)
    ("c'l'p" "constraint logic programming" nil 23)
    ("c'o'c" "Calculus of Constructions" nil 9)
    ("c'o'm" "calculus on manifolds" nil 5)
    ("c'p" "collision prediction" nil 47)
    ("c'p's" "continuation-passing style" nil 2)
    ("c'r" "collision response" nil 5)
    ("c'rs" "conversion rules" nil 6)
    ("c's" "concrete syntax" nil 9)
    ("c's'e" "common subexpression elimination" nil 9)
    ("c's'g" "constructive solid geometry" nil 2)
    ("c's'p" "complete set of pre-unifiers" nil 0)
    ("c's'u" "complete set of unifiers" nil 13)
    ("c's'us" "complete sets of unifiers" nil 4)
    ("c't" "category theory" nil 46)
    ("c't'c" "compiling to categories" nil 11)
    ("c'tc" "category theoretic" nil 1)
    ("c'v" "concrete value" nil 12)
    ("c'vs" "concrete values" nil 18)
    ("c-tc" "category theoretic" nil 0)
    ("cant" "can't" nil 7)
    ("cbl" "constrainable" nil 93)
    ("cbls" "constrainables" nil 52)
    ("cbn" "combination" nil 122)
    ("cbnl" "combinational" nil 18)
    ("cbns" "combinations" nil 30)
    ("cbr" "combinator" nil 67)
    ("cbrs" "combinators" nil 193)
    ("cci" "calculi" nil 25)
    ("ccln" "conclusion" nil 110)
    ("cclns" "conclusions" nil 53)
    ("ccn" "calculation" nil 5)
    ("ccns" "calculations" nil 7)
    ("ccs" "calculus" nil 166)
    ("cct" "calculate" nil 2)
    ("ccts" "calculates" nil 1)
    ("cdl" "conditional" nil 69)
    ("cdls" "conditionals" nil 0)
    ("cdly" "conditionally" nil 3)
    ("cdn" "condition" nil 224)
    ("cdnl" "conditional" nil 35)
    ("cdnls" "conditionals" nil 44)
    ("cdnly" "conditionally" nil 0)
    ("cdns" "conditions" nil 99)
    ("cdots'" "⋯" nil 4)
    ("cdt" "coordinate" nil 45)
    ("cdtd" "coordinated" nil 5)
    ("cdtg" "coordinating" nil 3)
    ("cdts" "coordinates" nil 36)
    ("cfc" "conference" nil 65)
    ("cfcs" "conferences" nil 10)
    ("cft" "coefficient" nil 7)
    ("cfts" "coefficients" nil 11)
    ("cgl" "categorical" nil 4)
    ("cgly" "categorically" nil 1)
    ("cgn" "conjugation" nil 11)
    ("cgt" "conjugate" nil 1)
    ("cgy" "category" nil 3)
    ("cgys" "categories" nil 1)
    ("ch'r" "Church-Rosser" nil 32)
    ("circ'" "∘" nil 8)
    ("cjn" "conjunction" nil 88)
    ("cjns" "conjunctions" nil 14)
    ("cjr" "conjecture" nil 22)
    ("cjrd" "conjectured" nil 0)
    ("cjv" "conjunctive" nil 4)
    ("cjvy" "conjunctively" nil 0)
    ("ck" "check" nil 420)
    ("ckd" "checked" nil 71)
    ("ckg" "checking" nil 153)
    ("cks" "checks" nil 15)
    ("cln" "collection" nil 346)
    ("clns" "collections" nil 46)
    ("cmpn" "composition" nil 7)
    ("cmx" "complex" nil 6)
    ("cn" "connection" nil 190)
    ("cnqy" "consequently" nil 0)
    ("cns" "connections" nil 65)
    ("cnt" "constant" nil 749)
    ("cnts" "constants" nil 335)
    ("cnty" "constantly" nil 0)
    ("cojt" "cobject" nil 2)
    ("cojts" "cobjects" nil 3)
    ("commetn" "comment" nil 1)
    ("cpbl" "composable" nil 6)
    ("cpby" "composability" nil 8)
    ("cpd" "composed" nil 10)
    ("cpl" "compositional" nil 99)
    ("cply" "compositionally" nil 18)
    ("cpn" "composition" nil 902)
    ("cpnl" "compositional" nil 20)
    ("cpns" "compositions" nil 109)
    ("cps" "compose" nil 17)
    ("cpsd" "composed" nil 4)
    ("cpsg" "composing" nil 12)
    ("cpss" "composes" nil 0)
    ("cpt" "component" nil 240)
    ("cptl" "computational" nil 31)
    ("cptly" "computationally" nil 3)
    ("cptn" "computation" nil 422)
    ("cptns" "computations" nil 150)
    ("cpts" "components" nil 231)
    ("cpty" "compositionality" nil 5)
    ("cqn" "consequence" nil 62)
    ("cqns" "consequences" nil 36)
    ("cqny" "consequently" nil 9)
    ("cqt" "consequent" nil 6)
    ("cqty" "consequently" nil 25)
    ("crd" "correspond" nil 133)
    ("crdc" "correspondence" nil 143)
    ("crdd" "corresponded" nil 27)
    ("crdg" "corresponding" nil 392)
    ("crdgy" "correspondingly" nil 33)
    ("crdn" "coordination" nil 2)
    ("crds" "corresponds" nil 94)
    ("crln" "correlation" nil 1)
    ("crlns" "correlations" nil 0)
    ("csn" "collision" nil 115)
    ("csns" "collisions" nil 33)
    ("cst" "construct" nil 399)
    ("cstd" "constructed" nil 138)
    ("cstg" "constructing" nil 162)
    ("cstn" "construction" nil 425)
    ("cstns" "constructions" nil 26)
    ("csts" "constructs" nil 86)
    ("cstv" "constructive" nil 11)
    ("cstvy" "constructively" nil 4)
    ("csv" "conservative" nil 21)
    ("csvy" "conservatively" nil 2)
    ("ct" "constraint" nil 320)
    ("ct'" "CT" nil 2)
    ("ctc'" "compiling to categories" nil 10)
    ("ctc''" "compiling-to-categories" nil 2)
    ("ctg" "containing" nil 30)
    ("ctgs" "contiguous" nil 1)
    ("ctn" "continuation" nil 127)
    ("ctns" "continuations" nil 64)
    ("ctods" "cdots" nil 6)
    ("ctr" "constructor" nil 443)
    ("ctrs" "constructors" nil 255)
    ("cts" "constraints" nil 267)
    ("ctsy" "continuously" nil 12)
    ("ctus" "continuous" nil 409)
    ("ctusy" "continuously" nil 40)
    ("ctuy" "continuity" nil 14)
    ("ctv" "commutative" nil 22)
    ("ctvy" "commutativity" nil 18)
    ("cty" "continuity" nil 39)
    ("cvbl" "ConstraintVariable" nil 2)
    ("cvby" "convertibility" nil 42)
    ("cvc" "convenience" nil 5)
    ("cvl" "convertible" nil 62)
    ("cvln" "convolution" nil 64)
    ("cvlns" "convolutions" nil 0)
    ("cvn" "conversion" nil 351)
    ("cvnc" "convenience" nil 124)
    ("cvns" "conversions" nil 67)
    ("cvnt" "convenient" nil 223)
    ("cvnty" "conveniently" nil 16)
    ("cvt" "convert" nil 249)
    ("cvtd" "converted" nil 57)
    ("cvtg" "converting" nil 86)
    ("cvtl" "conventional" nil 118)
    ("cvtly" "conventionally" nil 4)
    ("cvtn" "convention" nil 61)
    ("cvtns" "conventions" nil 13)
    ("cvtr" "converter" nil 5)
    ("cvtrs" "converters" nil 0)
    ("cvts" "converts" nil 25)
    ("cx" "context" nil 286)
    ("cx'" "cx" nil 5)
    ("cxs" "contexts" nil 113)
    ("cz" "characterize" nil 2)
    ("d'b" "double buffer" nil 1)
    ("d'bd" "double-buffered" nil 0)
    ("d'bg" "double buffering" nil 4)
    ("d'c" "dependent calculus" nil 30)
    ("d'd" "denotational design" nil 14)
    ("d'e" "differential equation" nil 9)
    ("d'es" "differential equations" nil 28)
    ("d'f" "depth-first" nil 11)
    ("d'f'p" "differentiable functional programming" nil 4)
    ("d'f's" "depth-first search" nil 8)
    ("d'f't" "dependent function type" nil 1)
    ("d'f'ts" "dependent function types" nil 9)
    ("d'i" "de Bruijn index" nil 15)
    ("d'is" "de Bruijn indices" nil 28)
    ("d'l" "deep learning" nil 27)
    ("d'm" "direct manipulation" nil 1)
    ("d'o'f" "degree of freedom" nil 6)
    ("d'o'fs" "degrees of freedom" nil 17)
    ("d'p" "dynamic programming" nil 11)
    ("d'p't" "dependent product type" nil 0)
    ("d'p'ts" "dependent product types" nil 0)
    ("d's" "data structure" nil 80)
    ("d's'e'l" "domain-specific embedded language" nil 0)
    ("d's'e'ls" "domain-specific embedded languages" nil 2)
    ("d's'l" "domain-specific language" nil 5)
    ("d's'ls" "domain-specific languages" nil 8)
    ("d'sm" "denotational semantics" nil 80)
    ("d'ss" "data structures" nil 57)
    ("d't" "data type" nil 96)
    ("d't'l'c" "dependent typed lambda calculus" nil 5)
    ("d'tp" "data type" nil 19)
    ("d'tps" "data types" nil 11)
    ("d'ts" "data types" nil 122)
    ("da'd" "data-driven" nil 18)
    ("da'p" "data-parallel" nil 1)
    ("dbd" "distributed" nil 20)
    ("dbn" "distribution" nil 50)
    ("dbns" "distributions" nil 14)
    ("dbt" "distribute" nil 41)
    ("dbtd" "distributed" nil 9)
    ("dbtg" "distributing" nil 9)
    ("dbts" "distributes" nil 21)
    ("dbv" "distributive" nil 27)
    ("dbvy" "distributivity" nil 8)
    ("dcb" "describe" nil 201)
    ("dcbd" "described" nil 396)
    ("dcbg" "describing" nil 93)
    ("dcbl" "decidable" nil 10)
    ("dcbs" "describes" nil 120)
    ("dcln" "declaration" nil 83)
    ("dclns" "declarations" nil 55)
    ("dcn" "declaration" nil 111)
    ("dcns" "declarations" nil 73)
    ("dcpd" "decomposed" nil 0)
    ("dcpn" "decomposition" nil 110)
    ("dcpns" "decompositions" nil 12)
    ("dcps" "decompose" nil 26)
    ("dcpsg" "decomposing" nil 2)
    ("dcpss" "decomposes" nil 2)
    ("dct" "document" nil 300)
    ("dctd" "documented" nil 17)
    ("dctg" "documenting" nil 2)
    ("dctn" "documentation" nil 140)
    ("dcts" "documents" nil 23)
    ("dcty" "discontinuity" nil 3)
    ("dctys" "discontinuities" nil 1)
    ("dcv" "declarative" nil 111)
    ("dcvy" "declaratively" nil 9)
    ("ddc" "deduce" nil 30)
    ("ddcg" "deducing" nil 1)
    ("ddcs" "deduces" nil 0)
    ("ddn" "deduction" nil 35)
    ("ddns" "deductions" nil 10)
    ("ddv" "deductive" nil 9)
    ("de'd" "demand-driven" nil 18)
    ("depty" "depth" nil 4)
    ("df" "define" nil 1495)
    ("df'" "df" nil 25)
    ("dfbl" "differentiable" nil 137)
    ("dfby" "differentiability" nil 11)
    ("dfc" "difference" nil 282)
    ("dfcg" "differencing" nil 2)
    ("dfcs" "differences" nil 62)
    ("dfd" "defined" nil 881)
    ("dfg" "defining" nil 243)
    ("dfl" "differential" nil 53)
    ("dfls" "differentials" nil 0)
    ("dfly" "differentially" nil 0)
    ("dfn" "definition" nil 1785)
    ("dfnl" "definitional" nil 6)
    ("dfns" "definitions" nil 794)
    ("dfrn" "differentiation" nil 179)
    ("dfrns" "differentiations" nil 2)
    ("dfrt" "differentiate" nil 29)
    ("dfrtd" "differentiated" nil 6)
    ("dfrts" "differentiates" nil 1)
    ("dfs" "defines" nil 86)
    ("dft" "different" nil 1054)
    ("dftg" "differentiating" nil 11)
    ("dfty" "differently" nil 100)
    ("dgt" "disagreement" nil 1)
    ("di'p" "disagreement pair" nil 172)
    ("di'ps" "disagreement pairs" nil 168)
    ("di'sq" "disagreement sequence" nil 8)
    ("di'sqs" "disagreement sequences" nil 0)
    ("didnt" "didn't" nil 10)
    ("djn" "disjunction" nil 23)
    ("djns" "disjunctions" nil 9)
    ("djv" "disjunctive" nil 6)
    ("djvy" "disjunctively" nil 0)
    ("dlt" "difficult" nil 26)
    ("dlty" "difficulty" nil 20)
    ("dltys" "difficulties" nil 4)
    ("dmn" "domain" nil 243)
    ("dmns" "domains" nil 61)
    ("dn" "denotation" nil 2)
    ("dnl" "denotational" nil 160)
    ("dnly" "denotationally" nil 19)
    ("dnn" "denotation" nil 66)
    ("dnns" "denotations" nil 11)
    ("dnv" "denotative" nil 36)
    ("dnvy" "denotatively" nil 0)
    ("doesnt" "doesn't" nil 15)
    ("dont" "don't" nil 128)
    ("dpc" "dependence" nil 25)
    ("dpcn" "decomposition" nil 1)
    ("dpd" "depend" nil 139)
    ("dpdd" "depended" nil 6)
    ("dpdg" "depending" nil 85)
    ("dpds" "depends" nil 144)
    ("dpt" "dependent" nil 311)
    ("dpts" "dependents" nil 0)
    ("dpty" "dependently" nil 2)
    ("dpv" "disprove" nil 1)
    ("dpy" "dependency" nil 115)
    ("dpys" "dependencies" nil 112)
    ("drfc" "dereference" nil 0)
    ("dscn" "description" nil 278)
    ("dscns" "descriptions" nil 88)
    ("dscrn" "description" nil 1)
    ("dscv" "descriptive" nil 13)
    ("dstn" "destruction" nil 3)
    ("dstr" "destructor" nil 1)
    ("dstrs" "destructors" nil 0)
    ("dsv" "destructive" nil 29)
    ("dsvy" "destructively" nil 44)
    ("dtc" "deterministic" nil 64)
    ("dtcy" "deterministically" nil 3)
    ("dtm" "determinism" nil 11)
    ("dtt" "determinate" nil 3)
    ("dtv" "derivative" nil 585)
    ("dtvs" "derivatives" nil 380)
    ("dv" "derive" nil 118)
    ("dv'" "dv" nil 17)
    ("dvbl" "derivable" nil 1)
    ("dvd" "derived" nil 128)
    ("dvg" "deriving" nil 210)
    ("dvn" "derivation" nil 339)
    ("dvnl" "derivational" nil 7)
    ("dvns" "derivations" nil 74)
    ("dvp" "develop" nil 78)
    ("dvpd" "developed" nil 79)
    ("dvpg" "developing" nil 67)
    ("dvpr" "developer" nil 5)
    ("dvprs" "developers" nil 9)
    ("dvps" "develops" nil 12)
    ("dvs" "derives" nil 14)
    ("dvt" "development" nil 260)
    ("dvts" "developments" nil 13)
    ("e'b'g" "explanation based generalization" nil 2)
    ("e'e" "eta-expand" nil 19)
    ("e'ed" "eta-expanded" nil 1)
    ("e'en" "eta-expansion" nil 12)
    ("e'ens" "eta-expansions" nil 1)
    ("e'es" "$\\eta$-expands" nil 1)
    ("e'l'f" "Edinburgh Logical Framework" nil 17)
    ("e'o" "each other" nil 0)
    ("e'p" "expression procedure" nil 4)
    ("e'pmc" "explicitly polymorphic" nil 0)
    ("e'pmm" "explicit polymorphism" nil 5)
    ("e'ps" "expression procedures" nil 3)
    ("e'r" "equivalence relation" nil 7)
    ("e'rs" "equivalence relations" nil 2)
    ("e's's" "ERGO Suport System" nil 11)
    ("e'u" "equational unification" nil 3)
    ("eft" "efficient" nil 557)
    ("efty" "efficiently" nil 141)
    ("efy" "efficiency" nil 250)
    ("eg" "e.g.," nil 1058)
    ("elmn" "elimination" nil 5)
    ("emt" "element" nil 232)
    ("emts" "elements" nil 235)
    ("eplg" "extrapolating" nil 0)
    ("epln" "extrapolation" nil 11)
    ("eplt" "extrapolate" nil 1)
    ("eqc" "equivalence" nil 64)
    ("eqcs" "equivalences" nil 5)
    ("eqn" "equation" nil 91)
    ("eqnl" "equational" nil 69)
    ("eqnly" "equationally" nil 2)
    ("eqns" "equations" nil 98)
    ("eqty" "equality" nil 63)
    ("eqtys" "equalities" nil 0)
    ("equiv'" "≡" nil 17)
    ("eqvt" "equivalent" nil 130)
    ("eqvts" "equivalents" nil 0)
    ("eqvty" "equivalently" nil 7)
    ("evetn" "event" nil 4)
    ("evetns" "events" nil 9)
    ("evt" "environment" nil 389)
    ("evtl" "environmental" nil 2)
    ("evts" "environments" nil 70)
    ("excersize" "exercise" nil 2)
    ("exists'" "∃" nil 1)
    ("f'a" "functional animation" nil 6)
    ("f'b" "frame buffer" nil 2)
    ("f'c" "first-class" nil 9)
    ("f'cb" "functor combinator" nil 1)
    ("f'cbs" "functor combinators" nil 0)
    ("f'ctn" "failure continutation" nil 5)
    ("f'ctns" "failure continutations" nil 0)
    ("f'e" "for example" nil 125)
    ("f'f'i" "foreign function interface" nil 10)
    ("f'i" "for instance" nil 1115)
    ("f'l" "formal language" nil 6)
    ("f'o" "first-order" nil 42)
    ("f'o'l" "first-order logic" nil 8)
    ("f'o'm" "first-order matching" nil 1)
    ("f'o'r" "first-order resolution" nil 3)
    ("f'o'u" "first-order unification" nil 33)
    ("f'o'v" "field of view" nil 1)
    ("f'occ" "free-occurrence" nil 2)
    ("f'occs" "free-occurrences" nil 1)
    ("f'os" "function objects" nil 5)
    ("f'p" "functional programming" nil 193)
    ("f'p'i" "fixed point induction" nil 13)
    ("f'ps" "fixed points" nil 6)
    ("f'r" "functional reactive" nil 0)
    ("f'r'a" "functional reactive animation" nil 1)
    ("f'r'p" "functional reactive programming" nil 22)
    ("f's" "formal system" nil 10)
    ("f'ss" "function symbols" nil 5)
    ("f't" "future time" nil 1)
    ("f't'v" "free type variable" nil 2)
    ("f't'vs" "free type variables" nil 7)
    ("f'v" "free variable" nil 36)
    ("f'v's" "free vector space" nil 0)
    ("f'v'ss" "free vector spaces" nil 0)
    ("f'vs" "free variables" nil 141)
    ("f'x" "for example" nil 4)
    ("fbl" "flexible" nil 69)
    ("fbly" "flexibly" nil 3)
    ("fbty" "flexibility" nil 33)
    ("fby" "flexibility" nil 36)
    ("fdl" "fundamental" nil 109)
    ("fdls" "fundamentals" nil 0)
    ("fdly" "fundamentally" nil 30)
    ("fdn" "foundation" nil 77)
    ("fdnl" "foundational" nil 7)
    ("fdns" "foundations" nil 10)
    ("ffl" "flex-flex" nil 0)
    ("fld" "followed" nil 66)
    ("flfl" "flexible-flexible" nil 166)
    ("flg" "following" nil 306)
    ("flrd" "flexible-rigid" nil 153)
    ("fls" "follows" nil 78)
    ("fltp" "flexible-type" nil 2)
    ("fm" "from" nil 7202)
    ("fma" "formula" nil 108)
    ("fmas" "formulas" nil 76)
    ("fml" "formal" nil 133)
    ("fmly" "formally" nil 31)
    ("fmn" "formulation" nil 271)
    ("fmns" "formulations" nil 44)
    ("fmt" "formulate" nil 84)
    ("fmtd" "formulated" nil 19)
    ("fmtg" "formulating" nil 17)
    ("fmts" "formulates" nil 6)
    ("fmy" "family" nil 210)
    ("fmys" "families" nil 65)
    ("fn" "function" nil 4197)
    ("fnl" "functional" nil 1077)
    ("fnls" "functionals" nil 17)
    ("fnly" "functionally" nil 36)
    ("fns" "functions" nil 2610)
    ("fnty" "functionality" nil 130)
    ("fo" "of" nil 428)
    ("forall'" "∀" nil 8)
    ("fqt" "frequent" nil 14)
    ("fqty" "frequently" nil 18)
    ("fqy" "frequency" nil 28)
    ("fqys" "frequencies" nil 4)
    ("frechet" "Fréchet" nil 5)
    ("frnak" "frank" nil 3)
    ("fsm" "formalism" nil 19)
    ("fsm'" "fsm" nil 4)
    ("fsms" "formalisms " nil 1)
    ("ft" "first" nil 3165)
    ("fu'v" "future value" nil 2)
    ("fu'vs" "future values" nil 15)
    ("fx'p" "fixed point" nil 1)
    ("fx'ps" "fixed points" nil 0)
    ("fz" "formalize" nil 39)
    ("fzd" "formalized" nil 8)
    ("fzg" "formalizing" nil 14)
    ("fzl" "formalizable" nil 0)
    ("fzn" "formalization" nil 16)
    ("fzns" "formalizations" nil 1)
    ("fzs" "formalizes" nil 4)
    ("g''o" "geometric-object" nil 3)
    ("g''os" "geometric-objects" nil 0)
    ("g'a'f" "graphics application framework" nil 7)
    ("g'c" "garbage collection" nil 69)
    ("g'cd" "garbage-collected" nil 2)
    ("g'cr" "garbage collector" nil 2)
    ("g'd" "geometry-dependent" nil 4)
    ("g'dc" "geometry-dependence" nil 0)
    ("g'e" "geometry expression" nil 9)
    ("g'es" "geometry expressions" nil 3)
    ("g'f" "generic function" nil 2)
    ("g'l" "geometry language" nil 27)
    ("g'o" "geometric object" nil 56)
    ("g'os" "geometric objects" nil 29)
    ("g'p" "general purpose" nil 21)
    ("g'pv" "geometric primitive" nil 0)
    ("g'pvs" "geometric primitives" nil 7)
    ("g'u'i" "graphical user interface" nil 0)
    ("g'u'is" "graphical user interfaces" nil 1)
    ("gd" "gd" nil 35)
    ("gl" "general" nil 1195)
    ("glb'" "⊓" nil 4)
    ("glty" "generality" nil 70)
    ("gltys" "generalities" nil 0)
    ("gly" "generally" nil 289)
    ("gmc" "geometric" nil 169)
    ("gmcy" "geometrically" nil 3)
    ("gmr" "grammar" nil 71)
    ("gmrs" "grammars" nil 14)
    ("gmy" "geometry" nil 1466)
    ("gmys" "geometries" nil 13)
    ("gn" "generation" nil 234)
    ("gnc" "generic" nil 49)
    ("gncy" "generically" nil 0)
    ("gns" "generations" nil 4)
    ("gnt" "generate" nil 4)
    ("gnts" "generates" nil 0)
    ("goign" "going" nil 28)
    ("gp" "group" nil 483)
    ("gpd" "grouping" nil 0)
    ("gpg" "grouping" nil 0)
    ("gps" "groups" nil 63)
    ("grahpics" "graphics" nil 7)
    ("gt" "generate" nil 252)
    ("gtd" "generated" nil 310)
    ("gtg" "generating" nil 72)
    ("gtr" "generator" nil 72)
    ("gtrs" "generators" nil 30)
    ("gts" "generates" nil 120)
    ("gz" "generalize" nil 397)
    ("gzd" "generalized" nil 302)
    ("gzg" "generalizing" nil 108)
    ("gzn" "generalization" nil 148)
    ("gzns" "generalizations" nil 28)
    ("gzs" "generalizes" nil 60)
    ("h'e" "hyper-edge" nil 1)
    ("h'es" "hyper-edges" nil 0)
    ("h'g" "hyper-graph" nil 2)
    ("h'gs" "hyper-graphs" nil 0)
    ("h'l" "high-level" nil 115)
    ("h'n" "head normal" nil 2)
    ("h'n'f" "head normal form" nil 38)
    ("h'n'fs" "head normal forms" nil 2)
    ("h'o" "higher-order" nil 398)
    ("h'o'a's" "higher-order abstract syntax" nil 5)
    ("h'o'f" "higher-order function" nil 14)
    ("h'o'fs" "higher-order functions" nil 26)
    ("h'o'h'h" "higher-order hereditary Harrop" nil 2)
    ("h'o'l" "higher-order logic" nil 56)
    ("h'o'm" "higher-order matching" nil 19)
    ("h'o'r" "higher-order resolution" nil 4)
    ("h'o't" "higher-order type" nil 1)
    ("h'o'ts" "higher-order types" nil 9)
    ("h'o'u" "higher-order unification" nil 194)
    ("h's'r" "hidden surface removal" nil 4)
    ("h'ss" "half spaces" nil 0)
    ("havent" "haven't" nil 6)
    ("hcl" "hierarchical" nil 41)
    ("hcly" "hierarchically" nil 4)
    ("hcy" "hierarchy" nil 47)
    ("hcys" "hierarchies" nil 4)
    ("hmc" "homomorphic" nil 60)
    ("hmcy" "homomorphically" nil 5)
    ("hmm" "homomorphism" nil 181)
    ("hmms" "homomorphisms" nil 66)
    ("hr'l" "higher level" nil 39)
    ("hte" "the" nil 55)
    ("hvae" "have" nil 29)
    ("hvr" "however" nil 1348)
    ("hwo" "how" nil 8)
    ("hymc" "hylomorphic" nil 7)
    ("hymm" "hylomorphism" nil 6)
    ("hymms" "hylomorphisms" nil 7)
    ("hzl" "horizontal" nil 28)
    ("hzly" "horizontally" nil 9)
    ("i'a" "in addition" nil 30)
    ("i'a't" "in addition to" nil 137)
    ("i'as" "inherited attributes" nil 2)
    ("i'b" "interactive behavior" nil 3)
    ("i'bs" "interactive behaviors" nil 1)
    ("i'c" "in contrast" nil 84)
    ("i'c'o" "in case of" nil 2)
    ("i'f" "in fact" nil 128)
    ("i'f'f" "if and only if" nil 5)
    ("i'f'o" "in favor of" nil 76)
    ("i'fe" "indirection-free" nil 2)
    ("i'g" "in general" nil 228)
    ("i'h" "induction hypothesis" nil 8)
    ("i'm'e" "in my experience" nil 0)
    ("i'm'o" "in my opinion" nil 12)
    ("i'o" "in order" nil 21)
    ("i'o'f" "in order for" nil 1)
    ("i'o't" "in order to" nil 327)
    ("i'o'w" "in other words" nil 125)
    ("i'p" "in particular" nil 426)
    ("i'pmc" "implicitly polymorphic" nil 3)
    ("i'pmm" "implicit polymorphism" nil 30)
    ("i'r" "inference rule" nil 21)
    ("i'r't" "in response to" nil 1)
    ("i'rs" "inference rules" nil 38)
    ("i's" "inference system" nil 8)
    ("i's'o" "in spite of" nil 37)
    ("i'ss" "inference systems" nil 0)
    ("i't" "in that" nil 15)
    ("i't'o" "in terms of" nil 275)
    ("i'v" "improving value" nil 24)
    ("i'vb" "instance variable" nil 18)
    ("i'vbs" "instance variables" nil 40)
    ("i'vs" "improving values" nil 22)
    ("i'w" "in which" nil 439)
    ("i'w'c" "in which case" nil 52)
    ("ibvr" "i-behavior" nil 3)
    ("ibvrs" "i-behaviors" nil 1)
    ("icl" "incremental" nil 118)
    ("icly" "incrementally" nil 25)
    ("icvc" "inconvenience" nil 1)
    ("icvnt" "inconvenient" nil 5)
    ("idc" "introduce" nil 292)
    ("idcd" "introduced" nil 116)
    ("idcg" "introducing" nil 127)
    ("idcs" "introduces" nil 58)
    ("idfn" "identification" nil 1)
    ("idn" "introduction" nil 200)
    ("idns" "introductions" nil 9)
    ("idpc" "independence" nil 21)
    ("idpt" "independent" nil 202)
    ("idpty" "independently" nil 65)
    ("idtt" "indeterminate" nil 5)
    ("idv" "inductive" nil 10)
    ("idvy" "inductively" nil 6)
    ("idx" "index" nil 50)
    ("idxd" "indexed" nil 7)
    ("idxg" "indexing" nil 3)
    ("idxs" "indices" nil 1)
    ("ie" "i.e.," nil 1212)
    ("ieft" "inefficient" nil 53)
    ("iefty" "inefficiently" nil 0)
    ("iefy" "inefficiency" nil 25)
    ("iefys" "inefficiencies" nil 4)
    ("ieqty" "inequality" nil 2)
    ("ieqtys" "inequalities" nil 2)
    ("ifbl" "inflexible" nil 2)
    ("ifc" "inference" nil 146)
    ("ifcs" "inferences" nil 5)
    ("ifl" "informal" nil 68)
    ("ifly" "informally" nil 13)
    ("ifm" "inform" nil 22)
    ("ifml" "informal" nil 17)
    ("ifmly" "informally" nil 16)
    ("ifmy" "informally" nil 10)
    ("ifn" "information" nil 372)
    ("ifqt" "infrequent" nil 2)
    ("ifqty" "infrequently" nil 0)
    ("ift" "infinite" nil 405)
    ("ifty" "infinitely" nil 67)
    ("igl" "integral" nil 94)
    ("igls" "integrals" nil 10)
    ("ign" "integration" nil 160)
    ("igt" "integrate" nil 33)
    ("igtd" "integrated" nil 9)
    ("igtg" "integrating" nil 3)
    ("igtr" "integrator" nil 1)
    ("igts" "integrates" nil 1)
    ("ijn" "injection" nil 11)
    ("ijns" "injections" nil 7)
    ("ijv" "injective" nil 46)
    ("ijvy" "injectivity" nil 18)
    ("imc" "isomorphic" nil 114)
    ("imc'" "≅" nil 9)
    ("imcy" "isomorphically" nil 11)
    ("imm" "isomorphism" nil 190)
    ("imms" "isomorphisms" nil 147)
    ("implies'" "⟹" nil 2)
    ("incst" "inconsistent" nil 1)
    ("intn" "interaction" nil 173)
    ("intns" "interactions" nil 16)
    ("intv" "interactive" nil 240)
    ("iot" "in order to" nil 10)
    ("iow" "in other words" nil 54)
    ("ipbl" "impossible" nil 84)
    ("ipcn" "implication" nil 72)
    ("ipcns" "implications" nil 39)
    ("ipd" "implemented" nil 288)
    ("ipg" "implementing" nil 126)
    ("iplg" "interpolating" nil 6)
    ("ipln" "interpolation" nil 74)
    ("iplns" "interpolations" nil 1)
    ("iplt" "interpolate" nil 20)
    ("ipltd" "interpolated" nil 5)
    ("iplts" "interpolates" nil 1)
    ("ipn" "implementation" nil 1783)
    ("ipns" "implementations" nil 217)
    ("ipr" "implementer" nil 6)
    ("iprc" "importance" nil 55)
    ("iprs" "implementers" nil 6)
    ("iprt" "important" nil 643)
    ("iprty" "importantly" nil 27)
    ("ipt" "implement" nil 526)
    ("iptd" "implemented" nil 44)
    ("iptg" "implementing" nil 8)
    ("iptl" "implementable" nil 4)
    ("iptr" "implementer" nil 21)
    ("iptrs" "implementers" nil 6)
    ("ipts" "implements" nil 43)
    ("iptv" "imperative" nil 375)
    ("iptvy" "imperatively" nil 11)
    ("ipv" "improve" nil 177)
    ("ipvd" "improved" nil 116)
    ("ipvg" "improving" nil 103)
    ("ipvs" "improves" nil 10)
    ("ipvt" "improvement" nil 71)
    ("ipvts" "improvements" nil 99)
    ("irl" "internal" nil 77)
    ("irls" "internals" nil 7)
    ("irly" "internally" nil 17)
    ("irz" "internalize" nil 3)
    ("irzd" "internalized" nil 1)
    ("isft" "insufficient" nil 3)
    ("isfty" "insufficiently" nil 4)
    ("isl" "intensional" nil 9)
    ("isn" "intersection" nil 30)
    ("isns" "intersections" nil 2)
    ("isnt" "isn't" nil 9)
    ("isrn" "instruction" nil 21)
    ("isrns" "instructions" nil 35)
    ("ist" "instantiate" nil 125)
    ("istd" "instantiated" nil 154)
    ("istg" "instantiating" nil 48)
    ("istn" "instantiation" nil 11)
    ("istns" "instantiations" nil 6)
    ("istr'" "I see to recall" nil 3)
    ("ists" "instantiates" nil 19)
    ("itc" "intutitionistic" nil 10)
    ("itcy" "intutitionistically" nil 0)
    ("itd" "interested" nil 312)
    ("itds" "ill-typedness" nil 29)
    ("itfc" "interface" nil 838)
    ("itfcd" "interfaced" nil 2)
    ("itfcg" "interfacing" nil 13)
    ("itfcs" "interfaces" nil 195)
    ("itg" "interesting" nil 441)
    ("itgy" "interestingly" nil 34)
    ("itm" "imitation" nil 55)
    ("itme" "item" nil 6)
    ("itms" "imitations" nil 40)
    ("itn" "itn" nil 23)
    ("itnc" "intuitionistic" nil 1)
    ("itns" "interactions" nil 13)
    ("itp" "interpret" nil 58)
    ("itpd" "interpreted" nil 19)
    ("itpg" "interpreting" nil 49)
    ("itpn" "interpretation" nil 290)
    ("itpns" "interpretations" nil 87)
    ("itpr" "interpreter" nil 43)
    ("itprs" "interpreters" nil 3)
    ("itps" "interprets" nil 3)
    ("itt" "iterate" nil 7)
    ("ittd" "iterated" nil 1)
    ("ittn" "iteration" nil 18)
    ("ittns" "iterations" nil 4)
    ("ittv" "iterative" nil 22)
    ("ittvy" "iteratively" nil 4)
    ("itv" "interactive" nil 10)
    ("itvty" "interactivity" nil 8)
    ("itvy" "interactively" nil 29)
    ("itz" "internalize" nil 0)
    ("itzd" "internalized" nil 0)
    ("itzg" "internalizing" nil 1)
    ("itzn" "internalization" nil 2)
    ("itzs" "internalizes" nil 0)
    ("iv'a" "interval analysis" nil 27)
    ("ivbl" "invertible" nil 32)
    ("ivc" "invariance" nil 2)
    ("ive" "I've" nil 3)
    ("ivl" "interval" nil 345)
    ("ivln" "involution" nil 4)
    ("ivlns" "involutions" nil 0)
    ("ivls" "intervals" nil 150)
    ("ivn" "inversion" nil 45)
    ("ivns" "inversions" nil 5)
    ("ivt" "invariant" nil 119)
    ("ivts" "invariants" nil 13)
    ("ix" "index" nil 170)
    ("ixd" "indexed" nil 82)
    ("ixg" "indexing" nil 2)
    ("ixs" "indices" nil 6)
    ("iz" "initialize" nil 26)
    ("izd" "initialized" nil 15)
    ("izg" "initializing" nil 6)
    ("izn" "initialization" nil 40)
    ("izns" "initializations" nil 4)
    ("izr" "initializer" nil 0)
    ("izrs" "initializers" nil 0)
    ("izs" "initializes" nil 0)
    ("j'r" "John Reynolds" nil 45)
    ("jfd" "justified" nil 11)
    ("jfg" "justifying" nil 9)
    ("jfn" "justification" nil 53)
    ("jfns" "justifications" nil 0)
    ("jfy" "justify" nil 41)
    ("jfyd" "justified" nil 7)
    ("jfyg" "justifying" nil 5)
    ("jfys" "justifies" nil 8)
    ("jsut" "just" nil 25)
    ("jt" "judgment" nil 37)
    ("jtl" "judgmental" nil 9)
    ("jts" "judgments" nil 7)
    ("jxn" "juxtaposition" nil 5)
    ("knwo" "know" nil 1)
    ("konw" "know" nil 17)
    ("l'a" "linear algebra" nil 24)
    ("l'c" "lambda calculus" nil 41)
    ("l'cs" "lambda-calculi" nil 4)
    ("l'cvby" "lambda convertability" nil 2)
    ("l'd't" "algebraic data type" nil 12)
    ("l'd'ts" "algebraic data types" nil 11)
    ("l'e" "lambda expression" nil 9)
    ("l'es" "lambda expressions" nil 15)
    ("l'f" "Logical Framework" nil 4)
    ("l'f'p" "least fixed point" nil 12)
    ("l'f'ps" "least fixed points" nil 1)
    ("l'h'n'f" "long head normal form" nil 6)
    ("l'h's" "left-hand side" nil 16)
    ("l'h'ss" "left-hand sides" nil 19)
    ("l'l" "low-level" nil 49)
    ("l'ls" "lazy lists" nil 1)
    ("l'm" "linear map" nil 82)
    ("l'm't" "local modeling transform" nil 1)
    ("l'm'ts" "local modeling transforms" nil 1)
    ("l'ms" "linear maps" nil 153)
    ("l'n'f" "long normal form" nil 12)
    ("l'o'i" "level of indirection" nil 1)
    ("l'p" "logic programming" nil 59)
    ("l'p'l" "logic programming language" nil 0)
    ("l's'b" "least significant bit" nil 1)
    ("l'u'b" "least upper bound" nil 5)
    ("l'v" "logical variable" nil 1)
    ("l'x" "linear transformation" nil 11)
    ("l'xs" "linear transformations" nil 17)
    ("ladn" "land" nil 2)
    ("lambda'" "λ" nil 5)
    ("lbenf" "long beta-eta normal form" nil 2)
    ("lbepnf" "long beta-eta product normal form" nil 3)
    ("lc" "logic" nil 250)
    ("lcl" "logical" nil 167)
    ("lcly" "logically" nil 15)
    ("lcn" "location" nil 126)
    ("lcns" "locations" nil 76)
    ("lcs" "logics" nil 45)
    ("lcy" "logically" nil 2)
    ("leqi'" "⊑" nil 13)
    ("lg" "language" nil 1722)
    ("lga" "algebra" nil 100)
    ("lgas" "algebras" nil 4)
    ("lgc" "algebraic" nil 113)
    ("lgcy" "algebraically" nil 2)
    ("lgs" "languages" nil 418)
    ("li'c" #("linear combination" 0 7 (fontified t) 7 18 (fontified t)) nil 1)
    ("li'cs" #("linear combinations" 0 7 (fontified t) 7 19 (fontified t)) nil 0)
    ("liek" "like" nil 16)
    ("llambda'" "Λ" nil 3)
    ("loh" "Löh" nil 1)
    ("lpg" "Lambda-Prolog" nil 131)
    ("lppg" "Lambda'pi-Prolog" nil 3)
    ("lr'l" "lower level" nil 12)
    ("lsit" "list" nil 4)
    ("ltods" "ldots" nil 6)
    ("ltt" "alternate" nil 2)
    ("ltv" "alternative" nil 501)
    ("ltvs" "alternatives" nil 177)
    ("ltvy" "alternatively" nil 294)
    ("lub'" "⊔" nil 24)
    ("m'c" "modeling coordinate" nil 3)
    ("m'c's'p" "minimal complete set of pre-unifiers" nil 9)
    ("m'c's'ps" "minimal complete sets of pre-unifiers" nil 8)
    ("m'c's'u" "minimal complete set of unifiers" nil 19)
    ("m'c's'us" "minimal complete sets of unifiers" nil 0)
    ("m'cs" "model coordinates" nil 1)
    ("m'd'p" "Markov decision process" nil 2)
    ("m'd'ps" "Markov decision processes" nil 2)
    ("m'eqn" "multiequation" nil 5)
    ("m'eqns" "multiequations" nil 4)
    ("m'g'u" "most general unifier" nil 12)
    ("m'i" "multiple inheritance" nil 8)
    ("m'l" "meta-language" nil 79)
    ("m'ls" "meta-languages" nil 6)
    ("m'm" "multimedia" nil 15)
    ("m's'b" "most significant bit" nil 0)
    ("m't" "multi-threaded" nil 2)
    ("m'x" "modeling transform" nil 29)
    ("m'xs" "modeling transforms" nil 12)
    ("ma'l" "machine learning" nil 51)
    ("mabye" "maybe" nil 21)
    ("mch" "match" nil 85)
    ("mchd" "matched" nil 5)
    ("mchg" "matching" nil 171)
    ("mchr" "matcher" nil 5)
    ("mchs" "matches" nil 27)
    ("mcn" "mechanism" nil 55)
    ("mcns" "mechanisms" nil 25)
    ("mfd" "modified" nil 6)
    ("mfn" "modification" nil 54)
    ("mfns" "modifications" nil 23)
    ("mfo" "MediaFlow" nil 34)
    ("mfy" "modify" nil 65)
    ("mfyd" "modified" nil 154)
    ("mfyg" "modifying" nil 29)
    ("mfyl" "modifiable" nil 13)
    ("mfyr" "modifier" nil 4)
    ("mfyrs" "modifiers" nil 0)
    ("mfys" "modifies" nil 9)
    ("mgmt" "management" nil 38)
    ("mgr" "manager" nil 4)
    ("mgt" "management" nil 1)
    ("mlc" "meta-logic" nil 16)
    ("mlcl" "meta-logical" nil 1)
    ("mlpn" "multiplication" nil 6)
    ("mmz" "memoize" nil 28)
    ("mmzd" "memoized" nil 15)
    ("mmzg" "memoizing" nil 14)
    ("mmzn" "memoization" nil 98)
    ("mmzs" "memoizes" nil 0)
    ("mng" "meaning" nil 389)
    ("mngs" "meanings" nil 107)
    ("mpc" "monomorphic" nil 56)
    ("mpln" "multiplication" nil 40)
    ("mpm" "monomorphism" nil 14)
    ("mpz" "monomorphize" nil 6)
    ("mpzd" "monomorphized" nil 2)
    ("mpzg" "monomorphizing" nil 1)
    ("mpzn" "monomorphization" nil 14)
    ("mroe" "more" nil 53)
    ("mtc" "monotonic" nil 85)
    ("mtcly" "monotonically" nil 17)
    ("mtcy" "monotonicity" nil 84)
    ("mtd" "method" nil 760)
    ("mtds" "methods" nil 445)
    ("mtdy" "methodology" nil 63)
    ("mtdys" "methodologies" nil 9)
    ("mtg" "meeting" nil 464)
    ("mtgs" "meetings" nil 43)
    ("mtn" "maintain" nil 1)
    ("mvbl" "meta-variable" nil 8)
    ("mvbls" "meta-variables" nil 5)
    ("mvl" "motivational" nil 4)
    ("mvn" "motivation" nil 127)
    ("mvns" "motivations" nil 11)
    ("mvr" "moreover" nil 243)
    ("mvt" "motivate" nil 50)
    ("mvtd" "motivated" nil 79)
    ("mvtg" "motivating" nil 29)
    ("mvts" "motivates" nil 17)
    ("mxz" "maximize" nil 4)
    ("mxzd" "maximized" nil 0)
    ("mxzs" "maximizes" nil 0)
    ("mz" "minimize" nil 44)
    ("mzd" "minimized" nil 6)
    ("mzg" "minimizing" nil 6)
    ("mzn" "minimization" nil 13)
    ("mzs" "minimizes" nil 4)
    ("n'a's'c" "necessary and sufficient condition" nil 4)
    ("n'c" "necessary condition" nil 5)
    ("n'cs" "necessary conditions" nil 0)
    ("n'd" "natural deduction" nil 10)
    ("n'f" "normal form" nil 140)
    ("n'fs" "normal forms" nil 62)
    ("n's" "non-strict" nil 8)
    ("n'x" "natural transformation" nil 8)
    ("n'xs" "natural transformations" nil 2)
    ("naive'" "naïve" nil 13)
    ("naively'" "naïvely" nil 4)
    ("naivite" "naïvité" nil 1)
    ("nbd" "neighborhood" nil 5)
    ("nbds" "neighborhoods" nil 1)
    ("nbr" "neighbor" nil 1)
    ("nbrs" "neighbors" nil 1)
    ("ncly" "necessarily" nil 94)
    ("ncpnl" "noncomputational" nil 0)
    ("ncts" "noncontinuous" nil 1)
    ("ncvby" "nonconvertability" nil 1)
    ("ncy" "necessary" nil 260)
    ("ndc" "nondeterministic" nil 32)
    ("ndcy" "nondeterministically" nil 6)
    ("ndm" "nondeterminism" nil 25)
    ("ndsv" "non-destructive" nil 0)
    ("ndtc" "nondeterministic" nil 50)
    ("ndtm" "nondeterminism" nil 28)
    ("nfn" "notification" nil 2)
    ("nfnl" "non-functional" nil 0)
    ("nfns" "notifications" nil 1)
    ("ngv" "negative" nil 2)
    ("nintv" "non-interactive" nil 4)
    ("nitv" "non-interactive" nil 20)
    ("nkow" "know" nil 4)
    ("nleqi'" "⋢" nil 1)
    ("nmtc" "nonmonotonic" nil 2)
    ("noteq'" "≠" nil 3)
    ("ntl" "natural" nil 306)
    ("ntls" "naturalness" nil 10)
    ("ntly" "naturally" nil 110)
    ("ntmn" "non-termination" nil 9)
    ("ntmtg" "nonterminating" nil 0)
    ("ntn" "notation" nil 232)
    ("ntnl" "notational" nil 25)
    ("ntns" "notations" nil 10)
    ("ntny" "notationally" nil 4)
    ("nufby" "nonunifiablity" nil 14)
    ("nufl" "nonunifiable" nil 19)
    ("nufm" "nonuniform" nil 2)
    ("nv'c" "Nonviolent Communication" nil 4)
    ("nz" "normalize" nil 102)
    ("nzd" "normalized" nil 30)
    ("nzg" "normalizing" nil 27)
    ("nzl" "normalizable" nil 4)
    ("nzn" "normalization" nil 111)
    ("nzns" "normalizations" nil 1)
    ("nzs" "normalizes" nil 2)
    ("nzy" "normalizability" nil 26)
    ("o'c" "of course" nil 221)
    ("o'd'e" "ordinary differential equation" nil 1)
    ("o'd'es" "ordinary differential equations" nil 3)
    ("o'f" "objective function" nil 0)
    ("o'fs" "objective functions" nil 0)
    ("o'l" "object language" nil 105)
    ("o'lc" "object logic" nil 1)
    ("o'lcs" "object logics" nil 1)
    ("o'ls" "object languages" nil 16)
    ("o'm" "object model" nil 2)
    ("o'ms" "object models" nil 0)
    ("o'o" "object-oriented" nil 68)
    ("o'o'p" "object-oriented programming" nil 0)
    ("o'on" "object-orientation" nil 5)
    ("o'p'l'c" "omega-order polymorphic lambda-calculus" nil 1)
    ("o's" "object system" nil 35)
    ("o's't" "on second thought" nil 6)
    ("o'sm" "operational semantics" nil 2)
    ("o'ss" "object systems" nil 2)
    ("o't" "overloading tool" nil 0)
    ("o't'f" "of the form" nil 91)
    ("o'tp" "object type" nil 17)
    ("o'tps" "object types" nil 10)
    ("o'u't" "once upon a time" nil 1)
    ("o'w" "of which" nil 9)
    ("ocn" "occurrence" nil 216)
    ("ocns" "occurrences" nil 176)
    ("ocsn" "occlusion" nil 10)
    ("ofr" "for" nil 23)
    ("ojn" "objection" nil 28)
    ("ojns" "objections" nil 20)
    ("ojt" "object" nil 780)
    ("ojtd" "objected" nil 3)
    ("ojts" "objects" nil 556)
    ("ojv" "objective" nil 38)
    ("ojvs" "objectives" nil 5)
    ("ojvy" "objectively" nil 9)
    ("olc" "object-logic" nil 7)
    ("olcs" "object-logics" nil 3)
    ("olg" "object-language" nil 62)
    ("olgs" "object-languages" nil 14)
    ("omer" "Ömer" nil 8)
    ("opl" "optional" nil 144)
    ("oply" "optionally" nil 13)
    ("opn" "operation" nil 417)
    ("opnl" "operational" nil 7)
    ("opns" "operations" nil 704)
    ("opr" "operator" nil 251)
    ("oprl" "operational" nil 94)
    ("oprly" "operationally" nil 14)
    ("oprs" "operators" nil 167)
    ("optg" "operating" nil 14)
    ("ordg" "ordering" nil 20)
    ("ot" "to" nil 114)
    ("otoh" "on the other hand" nil 425)
    ("otp" "object-type" nil 16)
    ("otps" "object-types" nil 9)
    ("otu" "out" nil 4)
    ("ovn" "observation" nil 1)
    ("ovns" "observations" nil 0)
    ("ovw" "overview" nil 23)
    ("owrk" "work" nil 5)
    ("ows" "otherwise" nil 437)
    ("oz" "optimize" nil 144)
    ("ozby" "optimizability" nil 4)
    ("ozd" "optimized" nil 141)
    ("ozg" "optimizing" nil 61)
    ("ozn" "optimization" nil 466)
    ("ozns" "optimizations" nil 132)
    ("ozr" "optimizer" nil 4)
    ("ozs" "optimizes" nil 8)
    ("p'a" "partial application" nil 1)
    ("p'a'p" "proofs as programs" nil 3)
    ("p'a't" "propositions as types" nil 1)
    ("p'as" "partial applications" nil 0)
    ("p'b" "pattern binder" nil 0)
    ("p'c" "predicate calculus" nil 6)
    ("p'd" "program derivation" nil 12)
    ("p'ds" "program derivations" nil 0)
    ("p'e" "partial evaluation" nil 53)
    ("p'ed" "partial evaluated" nil 1)
    ("p'f" "partial function" nil 19)
    ("p'fs" "partial functions" nil 19)
    ("p'l" "programming language" nil 128)
    ("p'l'c" "polymorphic lambda calculus" nil 13)
    ("p'lc" "programmable logic" nil 1)
    ("p'ls" "programming languages" nil 74)
    ("p'm" "pattern matching" nil 52)
    ("p'o" "partial order" nil 27)
    ("p'o'v" "point of view" nil 34)
    ("p'o'vs" "points of view" nil 0)
    ("p'og" "partial ordering" nil 0)
    ("p'p" "parametric polymorphism" nil 2)
    ("p'p't" "pair-producing type" nil 7)
    ("p'p'ts" "pair-producing types" nil 5)
    ("p'p'v" "pair-producing variable" nil 7)
    ("p'p'vs" "pair-producing variables" nil 6)
    ("p'ps" "progressive pairs" nil 1)
    ("p'r" "primitive recursion" nil 16)
    ("p's" "program synthesis" nil 30)
    ("p'ss" "program syntheses" nil 1)
    ("p'st" "proper subterm" nil 1)
    ("p'v" "program verification" nil 11)
    ("p'x" "program transformation" nil 90)
    ("p'xs" "program transformations" nil 4)
    ("p-eg" "partially evaluating" nil 0)
    ("pagm" "pre-algorithm" nil 38)
    ("pagms" "pre-algorithms" nil 12)
    ("pari" "pair" nil 9)
    ("pbl" "possible" nil 844)
    ("pbm" "problem" nil 1542)
    ("pbmc" "problematic" nil 74)
    ("pbms" "problems" nil 351)
    ("pbty" "possibility" nil 203)
    ("pbtys" "possibilities" nil 205)
    ("pbvr" "proto-behavior" nil 1)
    ("pbvrs" "proto-behaviors" nil 2)
    ("pby" "possibly" nil 333)
    ("pcdn" "precondition" nil 5)
    ("pcdns" "preconditions" nil 2)
    ("pcls" "protocols" nil 1)
    ("pcr" "processor" nil 3)
    ("pdfd" "predefined" nil 7)
    ("pdn" "predomain" nil 12)
    ("pdns" "predomains" nil 16)
    ("pdt" "predicate" nil 234)
    ("pdts" "predicates" nil 48)
    ("perhpas" "perhaps" nil 27)
    ("pf" "proof" nil 124)
    ("pfc" "preference" nil 78)
    ("pfcs" "preferences" nil 41)
    ("pfmc" "performance" nil 2)
    ("pfs" "proofs" nil 183)
    ("pgm" "program" nil 948)
    ("pgmc" "programmatic" nil 10)
    ("pgmcy" "programmatically" nil 6)
    ("pgmd" "programmed" nil 21)
    ("pgmg" "programming" nil 875)
    ("pgml" "programmable" nil 5)
    ("pgmr" "programmer" nil 141)
    ("pgmrs" "programmers" nil 110)
    ("pgms" "programs" nil 515)
    ("pha" "polyhedra" nil 1)
    ("phn" "polyhedron" nil 20)
    ("phns" "polyhedra" nil 6)
    ("pjn" "projection" nil 73)
    ("pjns" "projections" nil 99)
    ("pjr" "projector" nil 2)
    ("pjrs" "projectors" nil 0)
    ("pjt" "project" nil 458)
    ("pjtd" "projected" nil 2)
    ("pjtg" "projecting" nil 6)
    ("pjtr" "projector" nil 2)
    ("pjtrs" "projectors" nil 1)
    ("pjts" "projects" nil 96)
    ("pjv" "projective" nil 3)
    ("pll" "parallel" nil 300)
    ("pllm" "parallelism" nil 86)
    ("plln" "parallelization" nil 6)
    ("pllz" "parallelize" nil 11)
    ("pmc" "polymorphic" nil 204)
    ("pmcy" "polymorphically" nil 4)
    ("pmgr" "programmer" nil 1)
    ("pmm" "polymorphism" nil 310)
    ("pmn" "permutation" nil 19)
    ("pmns" "permutations" nil 8)
    ("pmr" "parameter" nil 210)
    ("pmrs" "parameters" nil 262)
    ("pnc" "permanence" nil 14)
    ("pns" "polyhedra" nil 25)
    ("pnt" "permanent" nil 21)
    ("pnty" "permanently" nil 2)
    ("poitn" "point" nil 2)
    ("poitns" "points" nil 4)
    ("pordg" "preordering" nil 2)
    ("ppn" "proposition" nil 115)
    ("ppns" "propositions" nil 20)
    ("pptys" "properties" nil 4)
    ("pr" "pair" nil 136)
    ("pr'd" "probability distribution" nil 0)
    ("pr'ds" "probability distributions" nil 1)
    ("prby" "probably" nil 1408)
    ("prpr" "pair-pair" nil 2)
    ("prs" "pairs" nil 94)
    ("prtc" "probabilistic" nil 15)
    ("prtcy" "probabilistically" nil 0)
    ("prty" "probability" nil 33)
    ("prtys" "probabilities" nil 5)
    ("psn" "position" nil 273)
    ("psnl" "positional" nil 3)
    ("psns" "positions" nil 31)
    ("psv" "positive" nil 82)
    ("psvs" "positives" nil 3)
    ("psvy" "positively" nil 5)
    ("pt" "point" nil 916)
    ("pt'f" "point-free" nil 2)
    ("ptc" "parametric" nil 51)
    ("ptcr" "particular" nil 1)
    ("ptcy" "parametrically" nil 24)
    ("ptd" "pointed" nil 221)
    ("ptg" "pointing" nil 51)
    ("ptl" "partial" nil 145)
    ("ptly" "partially" nil 40)
    ("ptn" "pattern" nil 445)
    ("ptns" "patterns" nil 315)
    ("ptr" "pointer" nil 185)
    ("ptrs" "pointers" nil 95)
    ("pts" "points" nil 273)
    ("ptv" "primitive" nil 262)
    ("ptvs" "primitives" nil 246)
    ("ptvy" "primitively" nil 2)
    ("pty" "property" nil 480)
    ("ptys" "properties" nil 384)
    ("pufby" "pre-unifiability" nil 2)
    ("pufl" "pre-unifiable" nil 1)
    ("pufn" "pre-unification" nil 69)
    ("pufr" "pre-unifier" nil 22)
    ("pufrs" "pre-unifiers" nil 27)
    ("pufy" "pre-unify" nil 1)
    ("pv" "prove" nil 238)
    ("pvbl" "provable" nil 5)
    ("pvbty" "provability" nil 4)
    ("pvby" "provably" nil 4)
    ("pvd" "proved" nil 83)
    ("pvg" "proving" nil 62)
    ("pvr" "prover" nil 17)
    ("pvrs" "provers" nil 6)
    ("pvs" "previous" nil 495)
    ("pvsy" "previously" nil 82)
    ("pvt" "private" nil 0)
    ("pvw" "preview" nil 5)
    ("pz" "parametrize" nil 42)
    ("pzd" "parametrized" nil 135)
    ("pzg" "parametrizing" nil 11)
    ("pzn" "parametrization" nil 51)
    ("pzns" "parametrizations" nil 0)
    ("pzs" "parametrizes" nil 1)
    ("qbl" "questionable" nil 8)
    ("qfd" "quantified" nil 55)
    ("qfg" "quantifying" nil 3)
    ("qfn" "quantification" nil 49)
    ("qfns" "quantifications" nil 0)
    ("qfr" "quantifier" nil 41)
    ("qfrs" "quantifiers" nil 71)
    ("qfs" "quantifies" nil 1)
    ("qfy" "quantify" nil 11)
    ("qfyd" "quantified" nil 2)
    ("qlfn" "qualification" nil 2)
    ("qlfns" "qualifications" nil 0)
    ("qlfr" "qualifier" nil 2)
    ("qlfrs" "qualifiers" nil 0)
    ("qlty" "quality" nil 6)
    ("qltys" "qualities" nil 0)
    ("qn" "question" nil 762)
    ("qnd" "questioned" nil 2)
    ("qng" "questioning" nil 0)
    ("qns" "questions" nil 354)
    ("qt" "quote" nil 10)
    ("qtn" "quaternion" nil 4)
    ("qtns" "quaternions" nil 1)
    ("qts" "quotes" nil 2)
    ("qty" "quantity" nil 4)
    ("qtys" "quantities" nil 3)
    ("qvc" "equivalence" nil 38)
    ("qvcs" "equivalences" nil 6)
    ("qvt" "equivalent" nil 170)
    ("qvty" "equivalently" nil 102)
    ("r'a'p" "reasoning about programs" nil 2)
    ("r'b" "reactive behavior" nil 17)
    ("r'bs" "reactive behaviors" nil 29)
    ("r'd'd't" "recursively defined data type" nil 2)
    ("r'd'd'ts" "recursively defined data types" nil 2)
    ("r'e" "regular expression" nil 2)
    ("r'es" "regular expressions" nil 3)
    ("r'f" "representable functor" nil 7)
    ("r'fs" "representable functors" nil 11)
    ("r'h's" "right-hand side" nil 24)
    ("r'h'ss" "right-hand sides" nil 21)
    ("r'n'f" "reactive normal form" nil 3)
    ("r'o" "rigid object" nil 0)
    ("r'os" "rigid objects" nil 0)
    ("r'p'c" "rigid-path-check" nil 2)
    ("r'r" "rewrite rule" nil 86)
    ("r'rs" "rewrite rules" nil 132)
    ("r't" "referentially transparent" nil 10)
    ("r't's" "run-time system" nil 6)
    ("r'ty" "referential transparency" nil 10)
    ("r'v" "reactive value" nil 24)
    ("r'vs" "reactive values" nil 56)
    ("r'w" "roughly well-typed" nil 2)
    ("rarrow'" "→" nil 13)
    ("rbly" "arbitrarily" nil 33)
    ("rbml" "RBML" nil 85)
    ("rby" "arbitrary" nil 244)
    ("rcbn" "recombination" nil 1)
    ("rcd" "recommended" nil 2)
    ("rcn" "recursion" nil 192)
    ("rcns" "recursions" nil 24)
    ("rcptn" "recomputation" nil 3)
    ("rcst" "reconstruct" nil 0)
    ("rcsts" "reconstructs" nil 0)
    ("rcv" "recursive" nil 408)
    ("rcvy" "recursively" nil 116)
    ("rd" "rigid" nil 125)
    ("rdby" "reducibility" nil 1)
    ("rdc" "reduce" nil 144)
    ("rdcd" "reduced" nil 37)
    ("rdcg" "reducing" nil 54)
    ("rdcl" "reducible" nil 1)
    ("rdcs" "reduces" nil 24)
    ("rdf" "redefine" nil 21)
    ("rdfd" "redefined" nil 7)
    ("rdfl" "rigid-flexible" nil 54)
    ("rdfn" "redefinition" nil 3)
    ("rdfs" "redefines" nil 0)
    ("rdn" "reduction" nil 187)
    ("rdns" "reductions" nil 38)
    ("rdrd" "rigid-rigid" nil 150)
    ("rfc" "reference" nil 252)
    ("rfcd" "referenced" nil 10)
    ("rfcs" "references" nil 220)
    ("rfd" "reified" nil 9)
    ("rfg" "reifying" nil 12)
    ("rfl" "referential" nil 13)
    ("rfmn" "reformulation" nil 7)
    ("rfmns" "reformulations" nil 1)
    ("rfmt" "reformulate" nil 6)
    ("rfmtg" "reformulating" nil 1)
    ("rfn" "reification" nil 94)
    ("rfns" "reifications" nil 2)
    ("rfr" "reifier" nil 1)
    ("rfs" "reifies" nil 3)
    ("rfy" "reify" nil 24)
    ("rgt" "right" nil 3)
    ("rgz" "recognize" nil 2)
    ("rjn" "rejection" nil 1)
    ("rl" "rule" nil 294)
    ("rlcn" "relocation" nil 31)
    ("rlcns" "relocations" nil 1)
    ("rln" "relation" nil 263)
    ("rlnl" "relational" nil 19)
    ("rlns" "relations" nil 90)
    ("rlp" "relationship" nil 200)
    ("rlps" "relationships" nil 62)
    ("rls" "rules" nil 320)
    ("rpbl" "representable" nil 121)
    ("rpc" "replace" nil 620)
    ("rpcd" "replaced" nil 183)
    ("rpcg" "replacing" nil 189)
    ("rpcs" "replaces" nil 31)
    ("rpct" "replacement" nil 64)
    ("rpcts" "replacements" nil 7)
    ("rpn" "representation" nil 1196)
    ("rpnl" "representational" nil 18)
    ("rpns" "representations" nil 357)
    ("rpny" "representationally" nil 2)
    ("rpt" "represent" nil 360)
    ("rptbl" "representable" nil 1)
    ("rptd" "represented" nil 232)
    ("rptg" "representing" nil 152)
    ("rpts" "represents" nil 59)
    ("rptv" "representative" nil 3)
    ("rpv" "respective" nil 2)
    ("rpvy" "respectively" nil 35)
    ("rpzn" "reparametrization" nil 3)
    ("rqd" "required" nil 215)
    ("rqg" "requiring" nil 24)
    ("rqr" "require" nil 303)
    ("rqrd" "required" nil 20)
    ("rqrg" "requiring" nil 49)
    ("rqrs" "requires" nil 289)
    ("rqt" "requirement" nil 121)
    ("rqts" "requirements" nil 98)
    ("rsn" "resolution" nil 144)
    ("rsns" "resolutions" nil 5)
    ("rtn" "rotation" nil 79)
    ("rtnl" "rotational" nil 3)
    ("rtns" "rotations" nil 18)
    ("rvlt" "re-evaluate" nil 2)
    ("rvltd" "re-evaluated" nil 0)
    ("rvn" "revolution" nil 2)
    ("rvns" "revolutions" nil 0)
    ("rvy" "respectively" nil 82)
    ("s'a" "such as" nil 307)
    ("s'c" "sufficient condition" nil 24)
    ("s'cs" "sufficient conditions" nil 0)
    ("s'ctn" "success continuation" nil 62)
    ("s'ctns" "success continuations" nil 22)
    ("s'e" "side-effect" nil 12)
    ("s'e'c" "semantic editor combinator" nil 7)
    ("s'e'cs" "semantic editor combinators" nil 6)
    ("s'ec" "syntactic equivalence" nil 4)
    ("s'eg" "software engineering" nil 8)
    ("s'es" "side-effects" nil 16)
    ("s'f" "solved form" nil 31)
    ("s'i" "structural induction" nil 16)
    ("s'j" "syntactic judgment" nil 4)
    ("s'js" "syntactic judgments" nil 1)
    ("s'm" "state machine" nil 0)
    ("s'ms" "state machines" nil 0)
    ("s'n" "strong normalization" nil 26)
    ("s'ng" "strongly normalizing" nil 7)
    ("s'nz" "strongly normalize" nil 4)
    ("s'nzs" "strongly normalizes" nil 0)
    ("s'o" "second-order" nil 56)
    ("s'o'm" "second-order matching" nil 10)
    ("s'o'u" "second-order unification" nil 3)
    ("s'p" "special purpose" nil 11)
    ("s'p'o" "strict partial order" nil 8)
    ("s'p'os" "strict partial orders" nil 0)
    ("s'ps" "special predicates" nil 1)
    ("s'r" "simplification rule" nil 3)
    ("s'rs" "simplification rules" nil 2)
    ("s't" "such that" nil 282)
    ("s't'c" "simply typed calculus" nil 4)
    ("s't'l'c" "simply typed lambda-calculus" nil 26)
    ("s't'l's" "same top level structure" nil 2)
    ("s't'm" "space-time model" nil 6)
    ("s't'ms" "space-time models" nil 10)
    ("s'td" "simply typed" nil 25)
    ("s'tp" "simple type" nil 1)
    ("s'tps" "simple types" nil 1)
    ("s'v" "scientific visualization" nil 1)
    ("s'x" "specification transformation" nil 5)
    ("s'xs" "specification transformations" nil 0)
    ("sb'i" "substitution instance" nil 0)
    ("sb'is" "substitution instances" nil 1)
    ("sbn" "substitution" nil 659)
    ("sbns" "substitutions" nil 310)
    ("sbt" "substitute" nil 89)
    ("sbtd" "substituted" nil 29)
    ("sbtg" "substituting" nil 33)
    ("sbtn" "subtraction" nil 1)
    ("sbts" "substitutes" nil 5)
    ("sbty" "substitutivity" nil 1)
    ("sbv" "substitutive" nil 22)
    ("sbvy" "substitutivity" nil 9)
    ("scn" "section" nil 796)
    ("scns" "sections" nil 92)
    ("scs" "synchronous" nil 37)
    ("scsy" "synchronously" nil 4)
    ("scz" "synchronize" nil 5)
    ("sczd" "synchronized" nil 7)
    ("sczg" "synchronizing" nil 0)
    ("sczn" "synchronization" nil 59)
    ("sczs" "synchronizes" nil 0)
    ("sd" "second" nil 1079)
    ("sds" "seconds" nil 26)
    ("sdvn" "subderivation" nil 1)
    ("sdy" "secondly" nil 3)
    ("sfc" "specific" nil 312)
    ("sfcs" "specifics" nil 36)
    ("sfcy" "specifically" nil 161)
    ("sfn" "specification" nil 661)
    ("sfns" "specifications" nil 216)
    ("sft" "sufficient" nil 82)
    ("sfty" "sufficiently" nil 34)
    ("sfy" "specify" nil 212)
    ("sfyd" "specified" nil 165)
    ("sfyg" "specifying" nil 71)
    ("sfyr" "specifier" nil 4)
    ("sfyrs" "specifiers" nil 0)
    ("sfys" "specifies" nil 21)
    ("sg" "something" nil 1404)
    ("sgr" "signature" nil 152)
    ("sgrs" "signatures" nil 79)
    ("siad" "said" nil 12)
    ("sicne" "since" nil 47)
    ("simeq'" "≃" nil 1)
    ("simlify" "simplify" nil 1)
    ("sivl" "subinterval" nil 1)
    ("sivls" "subintervals" nil 2)
    ("sjt" "subject" nil 35)
    ("sjtd" "subjected" nil 4)
    ("sjts" "subjects" nil 1)
    ("sjv" "subjective" nil 19)
    ("sjvy" "subjectively" nil 9)
    ("slcn" "selection" nil 10)
    ("sln" "solution" nil 542)
    ("slns" "solutions" nil 144)
    ("smc" "semantic" nil 416)
    ("smcs" "semantics" nil 839)
    ("smcy" "semantically" nil 109)
    ("smn" "simplification" nil 249)
    ("smns" "simplifications" nil 58)
    ("smy" "simplify" nil 361)
    ("smyd" "simplified" nil 135)
    ("smyg" "simplifying" nil 100)
    ("smyr" "simplifier" nil 37)
    ("smyrs" "simplifiers" nil 1)
    ("smys" "simplifies" nil 71)
    ("snc" "synthetic" nil 72)
    ("sncy" "synthetically" nil 2)
    ("sns" "synthesis" nil 128)
    ("snss" "syntheses" nil 6)
    ("snz" "synthesize" nil 62)
    ("snzd" "synthesized" nil 22)
    ("snzg" "synthesizing" nil 20)
    ("snzs" "synthesizes" nil 0)
    ("soem" "some" nil 46)
    ("spbm" "subproblem" nil 1)
    ("spbms" "subproblems" nil 4)
    ("spl" "special" nil 383)
    ("spls" "specials" nil 5)
    ("sply" "specially" nil 24)
    ("spt" "separate" nil 3)
    ("sql" "sequential" nil 193)
    ("sqly" "sequentially" nil 13)
    ("sqn" "sequence" nil 390)
    ("sqns" "sequences" nil 153)
    ("sqty" "sequentiality" nil 91)
    ("srv" "surjective" nil 7)
    ("srvy" "surjectively" nil 1)
    ("ssg" "structure-sharing" nil 25)
    ("stc" "syntactic" nil 120)
    ("stcly" "syntactically" nil 0)
    ("stcy" "syntactically" nil 15)
    ("std" "standard" nil 489)
    ("stds" "standards" nil 6)
    ("stdz" "standardize" nil 6)
    ("stdzn" "standardization" nil 2)
    ("stfd" "satisfied" nil 28)
    ("stfg" "satisfying" nil 41)
    ("stfl" "satisfiable" nil 6)
    ("stfn" "satisfaction" nil 31)
    ("stfs" "satisfies" nil 20)
    ("stfy" "satisfy" nil 76)
    ("stm" "system" nil 493)
    ("stmc" "systematic" nil 25)
    ("stmcy" "systematically" nil 19)
    ("stms" "systems" nil 286)
    ("stmt" "statement" nil 94)
    ("stmts" "statements" nil 43)
    ("sty" "satisfy" nil 94)
    ("styd" "satisfied" nil 46)
    ("styg" "satisfying" nil 32)
    ("stys" "satisfies" nil 25)
    ("svl" "several" nil 489)
    ("sx" "syntax" nil 442)
    ("sxn" "subexpression" nil 3)
    ("sxns" "subexpressions" nil 0)
    ("sxpn" "s-expression" nil 3)
    ("sz" "specialize" nil 176)
    ("szd" "specialized" nil 175)
    ("szg" "specializing" nil 37)
    ("szn" "specialization" nil 123)
    ("szns" "specializations" nil 47)
    ("szr" "specializer" nil 9)
    ("szs" "specializes" nil 119)
    ("t'b" "tangent bundle" nil 0)
    ("t'bs" "tangent bundles" nil 0)
    ("t'c" "type-check" nil 1)
    ("t'c'm" "type class morphism" nil 16)
    ("t'c'ms" "type class morphisms" nil 22)
    ("t'cg" "type checking" nil 81)
    ("t'cr" "type checker" nil 1)
    ("t'd" "temporal deviation" nil 3)
    ("t'f" "the following" nil 1297)
    ("t'f'p" "tangible functional programming" nil 4)
    ("t'i" "type inference" nil 183)
    ("t'id" "type-instantiated" nil 9)
    ("t'in" "type-instantiation" nil 4)
    ("t'itd" "tolerably ill-typed" nil 5)
    ("t'itds" "tolerable ill-typedness" nil 0)
    ("t'l" "term language" nil 73)
    ("t'l'c" "typed lambda calculus" nil 66)
    ("t'l'cs" "typed lambda-calculi" nil 4)
    ("t'l'i" "term language interface" nil 2)
    ("t'l's" "top level structure" nil 28)
    ("t'ls" "term languages" nil 4)
    ("t'o" "third-order" nil 13)
    ("t'ocn" "term-occurence" nil 2)
    ("t'ocns" "term-occurrences" nil 1)
    ("t'p" "theorem proving" nil 94)
    ("t'pr" "theorem prover" nil 3)
    ("t'r" "tail recursive" nil 3)
    ("t't" "time transform" nil 25)
    ("t'td" "time transformed" nil 0)
    ("t'tn" "time transformation" nil 22)
    ("t'tns" "time transformations" nil 3)
    ("t'ts" "time transforms" nil 9)
    ("t'v" "type variable" nil 53)
    ("t'vs" "type variables" nil 122)
    ("ta'v" "tangible value" nil 5)
    ("ta'vs" "tangible values" nil 8)
    ("taht" "that" nil 38)
    ("tcl" "technical" nil 189)
    ("tcly" "technically" nil 11)
    ("tcy" "technology" nil 95)
    ("tcys" "technologies" nil 5)
    ("td" "third" nil 120)
    ("teh" "the" nil 794)
    ("tfr" "therefore" nil 144)
    ("theri" "their" nil 4)
    ("thm" "theorem" nil 99)
    ("thms" "theorems" nil 41)
    ("thsi" "this" nil 104)
    ("thta" "that" nil 21)
    ("thy" "theory" nil 181)
    ("thys" "theories" nil 21)
    ("tiem" "time" nil 67)
    ("tiems" "times" nil 8)
    ("times'" "×" nil 11)
    ("tm" "term" nil 1222)
    ("tm'i" "term inference" nil 25)
    ("tmgy" "terminology" nil 12)
    ("tml" "terminal" nil 8)
    ("tmn" "termination" nil 69)
    ("tms" "terms" nil 1197)
    ("tmt" "terminate" nil 39)
    ("tmtd" "terminated" nil 13)
    ("tmtg" "terminating" nil 12)
    ("tmts" "terminates" nil 12)
    ("tmv" "term-variable" nil 1)
    ("tnq" "technique" nil 208)
    ("tnqs" "techniques" nil 162)
    ("top'" "⊤" nil 1)
    ("tp" "type" nil 6033)
    ("tp'f" "type family" nil 7)
    ("tp'fs" "type families" nil 1)
    ("tpbl" "typable" nil 1)
    ("tpd" "typed" nil 349)
    ("tpg" "typing" nil 317)
    ("tpgs" "typings" nil 17)
    ("tpl" "tuple" nil 11)
    ("tps" "types" nil 2490)
    ("tptp" "type-type" nil 4)
    ("tr'c" "transitive closure" nil 2)
    ("ty'c" "type class" nil 6)
    ("ty'cs" "type classes" nil 1)
    ("u'c" "unification context" nil 36)
    ("u'cs" "unification contexts" nil 3)
    ("u'e" "unification equivalent" nil 5)
    ("u'i" "user interface" nil 21)
    ("u'in" "user interaction" nil 1)
    ("u'is" "user interfaces" nil 4)
    ("u'l" "unification logic" nil 5)
    ("u'p" "unification problem" nil 151)
    ("u'ps" "unification problems" nil 142)
    ("u'q" "universal quantification" nil 5)
    ("u'qd" "universally quantified" nil 0)
    ("ucvtl" "unconventional" nil 4)
    ("udcbl" "undecidable" nil 6)
    ("udfd" "undefined" nil 795)
    ("ufby" "unifiability" nil 104)
    ("ufd" "unified" nil 65)
    ("ufg" "unifying" nil 87)
    ("ufl" "unifiable" nil 63)
    ("ufm" "uniform" nil 85)
    ("ufms" "uniforms" nil 1)
    ("ufmy" "uniformly" nil 8)
    ("ufn" "unification" nil 684)
    ("ufns" "unifications" nil 13)
    ("ufr" "unifier" nil 222)
    ("ufrs" "unifiers" nil 190)
    ("ufs" "unifies" nil 54)
    ("ufy" "unify" nil 112)
    ("ufys" "unifies" nil 3)
    ("uiprt" "unimportant" nil 12)
    ("uitg" "uninteresting" nil 6)
    ("uizd" "uninitialized" nil 2)
    ("uncly" "unnecessarily" nil 25)
    ("uncy" "unnecessary" nil 109)
    ("unq" "unique" nil 1)
    ("untl" "unnatural" nil 7)
    ("untly" "unnaturally" nil 0)
    ("uozd" "unoptimized" nil 4)
    ("usfbl" "unsatisfiable" nil 3)
    ("ustyd" "unsatisfied" nil 2)
    ("ustyg" "unsatisfying" nil 1)
    ("utpd" "untyped" nil 17)
    ("uvl" "universal" nil 162)
    ("uvls" "universals" nil 19)
    ("uvltd" "unevaluated" nil 3)
    ("uvly" "universally" nil 17)
    ("uvy" "universally" nil 13)
    ("v'b" "variable binding" nil 0)
    ("v'd" "virtual device" nil 8)
    ("v'ds" "virtual devices" nil 1)
    ("v'm" "virtual machine" nil 7)
    ("v'p" "view point" nil 5)
    ("v'r" "virtual reality" nil 5)
    ("v's" "vector space" nil 38)
    ("v'ss" "vector spaces" nil 49)
    ("v't" "virtual trackball" nil 9)
    ("v'w" "virtual world" nil 14)
    ("v'ws" "virtual worlds" nil 9)
    ("v'x" "viewing transform" nil 18)
    ("v'xs" "viewing transforms" nil 2)
    ("vbl" "variable" nil 881)
    ("vbls" "variables" nil 818)
    ("vfcn" "verification" nil 2)
    ("vfd" "verified" nil 14)
    ("vfg" "verifying" nil 4)
    ("vfl" "verifiable" nil 0)
    ("vfn" "verification" nil 35)
    ("vfy" "verify" nil 41)
    ("vfyd" "verified" nil 8)
    ("vfyg" "verifying" nil 0)
    ("vfys" "verifies" nil 3)
    ("vln" "evaluation" nil 305)
    ("vlns" "evaluations" nil 24)
    ("vlt" "evaluate" nil 84)
    ("vltd" "evaluated" nil 62)
    ("vltg" "evaluating" nil 38)
    ("vlts" "evaluates" nil 17)
    ("vpt" "viewpoint" nil 11)
    ("vpts" "viewpoints" nil 0)
    ("vrml" "VRML" nil 23)
    ("vsl" "visual" nil 3)
    ("vsn" "version" nil 1133)
    ("vsns" "versions" nil 251)
    ("vtm" "variable-term" nil 39)
    ("vtp" "variable-type" nil 3)
    ("vvtm" "virtual-variable-term" nil 0)
    ("vz" "visualize" nil 14)
    ("vzd" "visualized" nil 5)
    ("vzg" "visualizing" nil 11)
    ("vzn" "visualization" nil 34)
    ("vzns" "visualizations" nil 19)
    ("vzr" "visualizer" nil 1)
    ("vzrs" "visualizers" nil 2)
    ("vzs" "visualizes" nil 0)
    ("w'c" "world coordinate" nil 3)
    ("w'cs" "world coordinates" nil 1)
    ("w'd" "well-defined" nil 0)
    ("w'f" "well formed" nil 12)
    ("w'f'o" "well founded ordering" nil 7)
    ("w'f'os" "well founded orderings" nil 1)
    ("w'fs" "well formedness" nil 3)
    ("w'h'n'f" "weak head normal form" nil 10)
    ("w'h'r" "weak head reduction" nil 1)
    ("w'l'g" "without loss of generality" nil 6)
    ("w'p" "word processing" nil 3)
    ("w'r't" "with respect to" nil 108)
    ("w'v" "weakly valid" nil 2)
    ("w'w" "with which" nil 3)
    ("waht" "what" nil 21)
    ("wasnt" "wasn't" nil 5)
    ("wch" "which" nil 4973)
    ("wdfd" "well-defined" nil 20)
    ("weve" "we've" nil 3)
    ("wh" "with" nil 13530)
    ("whehter" "whether" nil 8)
    ("whn" "within" nil 6)
    ("wiht" "with" nil 2)
    ("wkdd" "well-kinded" nil 7)
    ("wnat" "want" nil 11)
    ("wo" "without" nil 1264)
    ("woudl" "would" nil 18)
    ("wouldnt" "wouldn't" nil 2)
    ("wrok" "work" nil 12)
    ("wroking" "working" nil 2)
    ("wtbl" "well-typable" nil 1)
    ("wtd" "well-typed" nil 295)
    ("wtds" "well-typedness" nil 31)
    ("x'p" "transformation path" nil 3)
    ("x'ps" "transformation paths" nil 1)
    ("x'r" "transformation rule" nil 29)
    ("x'rs" "transformation rules" nil 72)
    ("x's" "transformation system" nil 7)
    ("xcv" "exclusive" nil 2)
    ("xfbl" "transformable" nil 3)
    ("xfd" "transformed" nil 60)
    ("xfg" "transforming" nil 60)
    ("xfl" "transformational" nil 12)
    ("xfm" "transform" nil 474)
    ("xfmd" "transformed" nil 10)
    ("xfmg" "transforming" nil 11)
    ("xfmr" "transformer" nil 2)
    ("xfms" "transforms" nil 144)
    ("xfn" "transformation" nil 806)
    ("xfnl" "transformational" nil 4)
    ("xfns" "transformations" nil 342)
    ("xfr" "transformer" nil 43)
    ("xfrs" "transformers" nil 21)
    ("xln" "translation" nil 364)
    ("xlns" "translations" nil 32)
    ("xlt" "translate" nil 164)
    ("xltd" "translated" nil 37)
    ("xltg" "translating" nil 42)
    ("xltn" "translation" nil 2)
    ("xltr" "translator" nil 12)
    ("xlts" "translates" nil 10)
    ("xn" "transition" nil 137)
    ("xnl" "transitional" nil 2)
    ("xns" "transitions" nil 36)
    ("xpl" "example" nil 1219)
    ("xpln" "explanation" nil 177)
    ("xplns" "explanations" nil 15)
    ("xpls" "examples" nil 766)
    ("xpn" "expression" nil 695)
    ("xpnl" "exponential" nil 0)
    ("xpns" "expressions" nil 569)
    ("xps" "express" nil 199)
    ("xpsd" "expressed" nil 135)
    ("xpsg" "expressing" nil 47)
    ("xpsl" "expressible" nil 0)
    ("xpss" "expresses" nil 2)
    ("xpsv" "expressive" nil 12)
    ("xpv" "expressive" nil 41)
    ("xpvs" "expressiveness" nil 19)
    ("xrl" "external" nil 93)
    ("xrly" "externally" nil 9)
    ("xrz" "externalize" nil 7)
    ("xrzd" "externalized" nil 1)
    ("xrzg" "externalizing" nil 0)
    ("xrzn" "externalization" nil 8)
    ("xrzs" "externalizes" nil 0)
    ("xsl" "extensional" nil 9)
    ("xsly" "extensionally" nil 0)
    ("xtbl" "extensible" nil 49)
    ("xtby" "extensibility" nil 24)
    ("xtc" "existence" nil 25)
    ("xtd" "extend" nil 197)
    ("xtdd" "extended" nil 121)
    ("xtdg" "extending" nil 76)
    ("xtds" "extends" nil 53)
    ("xtg" "existing" nil 166)
    ("xtl" "existential" nil 32)
    ("xtls" "existentials" nil 4)
    ("xtly" "existentially" nil 20)
    ("xtn" "extension" nil 223)
    ("xtns" "extensions" nil 142)
    ("xtv" "extensive" nil 7)
    ("xtvy" "extensively" nil 2)
    ("youve" "you've" nil 3)
   ))

(define-abbrev-table 'glsl-mode-abbrev-table '())

(define-abbrev-table 'graphviz-dot-mode-abbrev-table '())

(define-abbrev-table 'grep-mode-abbrev-table '())

(define-abbrev-table 'haskell-cabal-mode-abbrev-table '())

(define-abbrev-table 'haskell-compilation-mode-abbrev-table '())

(define-abbrev-table 'haskell-debug-mode-abbrev-table '())

(define-abbrev-table 'haskell-error-mode-abbrev-table '())

(define-abbrev-table 'haskell-interactive-mode-abbrev-table '())

(define-abbrev-table 'haskell-menu-mode-abbrev-table '())

(define-abbrev-table 'haskell-mode-abbrev-table
  '(
    ("alt" "Alt" nil 2)
    ("df" "df" nil 8)
    ("fo" "fo" nil 7)
   ))

(define-abbrev-table 'haskell-presentation-mode-abbrev-table '())

(define-abbrev-table 'haskell-yesod-parse-routes-mode-abbrev-table '())

(define-abbrev-table 'help-mode-abbrev-table '())

(define-abbrev-table 'hs-lint-mode-abbrev-table '())

(define-abbrev-table 'html-mode-abbrev-table
  '(
    ("td" "td" nil 21)
   ))

(define-abbrev-table 'idl-mode-abbrev-table '())

(define-abbrev-table 'inferior-haskell-mode-abbrev-table '())

(define-abbrev-table 'inferior-python-mode-abbrev-table '())

(define-abbrev-table 'java-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("finally" "finally" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'javascript-mode-abbrev-table '())

(define-abbrev-table 'js-jsx-mode-abbrev-table '())

(define-abbrev-table 'js-mode-abbrev-table '())

(define-abbrev-table 'latex-mode-abbrev-table '())

(define-abbrev-table 'lisp-mode-abbrev-table
  '(
    ("mvb" "multiple-value-bind" nil 119)
    ("mvs" "multiple-value-setq" nil 3)
   ))

(define-abbrev-table 'literate-haskell-mode-abbrev-table '())

(define-abbrev-table 'log-view-mode-abbrev-table '())

(define-abbrev-table 'makefile-automake-mode-abbrev-table '())

(define-abbrev-table 'makefile-bsdmake-mode-abbrev-table '())

(define-abbrev-table 'makefile-gmake-mode-abbrev-table '())

(define-abbrev-table 'makefile-imake-mode-abbrev-table '())

(define-abbrev-table 'makefile-makepp-mode-abbrev-table '())

(define-abbrev-table 'makefile-mode-abbrev-table '())

(define-abbrev-table 'markdown-mode-abbrev-table
  '(
    ("b'r" "$\\beta$-reduce" nil 15)
    ("b'rd" "$\\beta$-reduced" nil 4)
    ("b'rg" "$\\beta$-reducing" nil 5)
    ("b'rn" "$\\beta$-reduction" nil 46)
    ("b'rns" "$\\beta$-reductions" nil 35)
    ("b'rx" "$\\beta$-redex" nil 51)
    ("b'rxs" "$\\beta$-redexes" nil 45)
    ("e'e" "$\\eta$-expand" nil 19)
    ("e'ed" "$\\eta$-expanded" nil 3)
    ("e'eg" "$\\eta$-expanding" nil 2)
    ("e'en" "$\\eta$-expansion" nil 22)
    ("e'ens" "$\\eta$-expansions" nil 18)
    ("e'r" "$\\eta$-reduce" nil 21)
    ("e'rd" "$\\eta$-reduced" nil 2)
    ("e'rg" "$\\eta$-reducing" nil 2)
    ("e'rn" "$\\eta$-reduction" nil 26)
    ("e'rns" "$\\eta$-reductions" nil 20)
    ("e'rx" "$\\eta$-redex" nil 31)
    ("e'rxs" "$\\eta$-redexes" nil 33)
    ("l'c" "$\\lambda$-calculus" nil 61)
    ("l'cs" "$\\lambda$ calculi" nil 11)
    ("t'l'c" "typed $\\lambda$-calculus" nil 38)
    ("t'l'cs" "typed $\\lambda$-calculi" nil 34)
   ))

(define-abbrev-table 'message-mode-abbrev-table '())

(define-abbrev-table 'messages-buffer-mode-abbrev-table '())

(define-abbrev-table 'network-connection-mode-abbrev-table '())

(define-abbrev-table 'nslookup-mode-abbrev-table '())

(define-abbrev-table 'nxml-mode-abbrev-table '())

(define-abbrev-table 'objc-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 1)
   ))

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'org-mode-abbrev-table '())

(define-abbrev-table 'outline-mode-abbrev-table '())

(define-abbrev-table 'package-menu-mode-abbrev-table '())

(define-abbrev-table 'perl-mode-abbrev-table '())

(define-abbrev-table 'pike-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'plain-tex-mode-abbrev-table '())

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'ps-mode-abbrev-table '())

(define-abbrev-table 'ps-run-mode-abbrev-table '())

(define-abbrev-table 'python-mode-abbrev-table '())

(define-abbrev-table 'python-mode-skeleton-abbrev-table '())

(define-abbrev-table 'ruby-mode-abbrev-table '())

(define-abbrev-table 'scss-mode-abbrev-table '())

(define-abbrev-table 'select-tags-table-mode-abbrev-table '())

(define-abbrev-table 'sgml-mode-abbrev-table '())

(define-abbrev-table 'sh-mode-abbrev-table '())

(define-abbrev-table 'shell-mode-abbrev-table '())

(define-abbrev-table 'slitex-mode-abbrev-table '())

(define-abbrev-table 'smbclient-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'speedbar-mode-abbrev-table '())

(define-abbrev-table 'tabulated-list-mode-abbrev-table '())

(define-abbrev-table 'tar-mode-abbrev-table '())

(define-abbrev-table 'tex-mode-abbrev-table
  '(
    ("a'cn" "$\\alpha$-conversion" nil 52)
    ("a'ec" "$\\alpha$-equivalence" nil 13)
    ("a'et" "$\\alpha$-equivalent" nil 5)
    ("b'cn" "$\\beta$-conversion" nil 3)
    ("b'nf" "$\\beta$ normal form" nil 31)
    ("b'r" "$\\beta$-reduce" nil 9)
    ("b'rd" "$\\beta$-reduced" nil 3)
    ("b'rn" "$\\beta$-reduction" nil 29)
    ("be'nf" "$\\beta\\eta$ normal form" nil 8)
    ("benf" "$\\beta\\eta$ normal form" nil 27)
    ("benfs" "$\\beta\\eta$ normal forms" nil 4)
    ("d't'l'c" "dependent typed $\\lambda$-calculus" nil 1)
    ("e'e" "$\\eta$-expand" nil 14)
    ("e'ed" "$\\eta$-expanded" nil 3)
    ("e'en" "$\\eta$-expansion" nil 21)
    ("e'rn" "$\\eta$-reduction" nil 10)
    ("gd" "gd" nil 15)
    ("ith'" "$i$th" nil 19)
    ("l'c" "$\\lambda$-calculus" nil 43)
    ("l'cs" "$\\lambda$ calculi" nil 9)
    ("l'cvby" "$\\lambda$-convertability" nil 4)
    ("l'ec" "$\\lambda$-equivalence" nil 2)
    ("l'mm" "$\\lambda$-morphism" nil 3)
    ("l'mms" "$\\lambda$-morphisms" nil 5)
    ("lbehnf" "long $\\beta\\eta$ normal form" nil 8)
    ("lbenf" "long $\\beta\\eta$ normal form" nil 18)
    ("lbepnf" "long $\\beta\\eta$ product normal form" nil 3)
    ("lcvn" "$\\lambda$-conversion" nil 1)
    ("lfhnf" "$\\lambda$-free head normal form" nil 6)
    ("lpg" "$\\lambda$Prolog" nil 34)
    ("lppg" "$\\Lpi$Prolog" nil 1)
    ("ltm" "$\\lambda$-term" nil 1)
    ("ltms" "$\\lambda$-terms" nil 1)
    ("o'p'l'c" "$\\omega$-order polymorphic $\\lambda$-calculus" nil 7)
    ("p'l'c" "polymorphic $\\lambda$-calculus" nil 19)
    ("s't'l'c" "simply typed $\\lambda$-calculus" nil 45)
    ("t'l'c" "typed $\\lambda$-calculus" nil 35)
    ("t'l'cs" "typed $\\lambda$-calculi" nil 8)
   ))

(define-abbrev-table 'tex-shell-abbrev-table '())

(define-abbrev-table 'texinfo-mode-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'url-cookie-mode-abbrev-table '())

(define-abbrev-table 'vc-annotate-mode-abbrev-table '())

(define-abbrev-table 'vc-dired-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-edit-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-view-mode-abbrev-table '())

(define-abbrev-table 'vc-git-region-history-mode-abbrev-table '())

(define-abbrev-table 'vc-svn-log-view-mode-abbrev-table '())

(define-abbrev-table 'verilog-mode-abbrev-table '())

(define-abbrev-table 'xref--xref-buffer-mode-abbrev-table '())

(define-abbrev-table 'yaml-mode-abbrev-table '())

