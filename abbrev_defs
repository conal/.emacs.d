;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'Custom-mode-abbrev-table '())

(define-abbrev-table 'Info-edit-mode-abbrev-table '())

(define-abbrev-table 'Man-mode-abbrev-table '())

(define-abbrev-table 'agda2-mode-abbrev-table '())

(define-abbrev-table 'antlr-mode-abbrev-table '())

(define-abbrev-table 'apropos-mode-abbrev-table '())

(define-abbrev-table 'asm-mode-abbrev-table '())

(define-abbrev-table 'awk-mode-abbrev-table '())

(define-abbrev-table 'bibtex-mode-abbrev-table '())

(define-abbrev-table 'bookmark-bmenu-mode-abbrev-table '())

(define-abbrev-table 'bookmark-edit-annotation-mode-abbrev-table '())

(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'c-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'cabal-mode-abbrev-table '())

(define-abbrev-table 'calendar-mode-abbrev-table '())

(define-abbrev-table 'change-log-mode-abbrev-table '())

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'conf-colon-mode-abbrev-table '())

(define-abbrev-table 'conf-javaprop-mode-abbrev-table '())

(define-abbrev-table 'conf-ppd-mode-abbrev-table '())

(define-abbrev-table 'conf-space-mode-abbrev-table '())

(define-abbrev-table 'conf-unix-mode-abbrev-table '())

(define-abbrev-table 'conf-windows-mode-abbrev-table '())

(define-abbrev-table 'conf-xdefaults-mode-abbrev-table '())

(define-abbrev-table 'csharp-mode-abbrev-table '())

(define-abbrev-table 'css-mode-abbrev-table '())

(define-abbrev-table 'debugger-mode-abbrev-table '())

(define-abbrev-table 'delphi-mode-abbrev-table '())

(define-abbrev-table 'diff-mode-abbrev-table '())

(define-abbrev-table 'display-time-world-mode-abbrev-table '())

(define-abbrev-table 'doc-view-mode-abbrev-table '())

(define-abbrev-table 'doctex-mode-abbrev-table '())

(define-abbrev-table 'doctor-mode-abbrev-table '())

(define-abbrev-table 'edit-abbrevs-mode-abbrev-table '())

(define-abbrev-table 'elisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'epa-info-mode-abbrev-table '())

(define-abbrev-table 'epa-key-list-mode-abbrev-table '())

(define-abbrev-table 'epa-key-mode-abbrev-table '())

(define-abbrev-table 'erc-chanlist-mode-abbrev-table '())

(define-abbrev-table 'erc-list-menu-mode-abbrev-table '())

(define-abbrev-table 'erc-mode-abbrev-table '())

(define-abbrev-table 'eshell-mode-abbrev-table '())

(define-abbrev-table 'eww-bookmark-mode-abbrev-table '())

(define-abbrev-table 'eww-buffers-mode-abbrev-table '())

(define-abbrev-table 'eww-history-mode-abbrev-table '())

(define-abbrev-table 'eww-mode-abbrev-table '())

(define-abbrev-table 'finder-mode-abbrev-table '())

(define-abbrev-table 'flycheck-error-list-mode-abbrev-table '())

(define-abbrev-table 'ftp-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'gfm-mode-abbrev-table '())

(define-abbrev-table 'gfm-view-mode-abbrev-table '())

(define-abbrev-table 'ghc-core-mode-abbrev-table '())

(define-abbrev-table 'ghci-script-mode-abbrev-table '())

(define-abbrev-table 'git-log-view-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table
  '(
    ("a'a" "axis-aligned" nil 5)
    ("a'b" "assign-behavior" nil 4)
    ("a'cn" "alpha conversion" nil 17)
    ("a'ct" "$\\alpha$-convert" nil 4)
    ("a'd" "automatic differentiation" nil 104)
    ("a'd't" "abstract data type" nil 21)
    ("a'd'ts" "abstract data types" nil 22)
    ("a'ect" "alpha-equivalence" nil 1)
    ("a'ett" "alpha-equivalent" nil 1)
    ("a'f" "as follows" nil 317)
    ("a'fr" "applicative functor" nil 0)
    ("a'g" "attribute grammar" nil 2)
    ("a'k'a" "also known as" nil 2)
    ("a'k'o" "a kind of" nil 1)
    ("a'l" "at least" nil 500)
    ("a'o't" "as opposed to" nil 64)
    ("a's" "abstract syntax" nil 137)
    ("a's't" "abstract syntax tree" nil 5)
    ("a's'ts" "abstract syntax trees" nil 10)
    ("a'st" "attribute state" nil 2)
    ("a't" "abstract type" nil 8)
    ("a't'p" "automated theorem proving" nil 3)
    ("a'v" "assign-value" nil 3)
    ("a'w" "at which" nil 19)
    ("a'w'a" "as well as" nil 4)
    ("a'w't" "at which time" nil 2)
    ("a'wk" "approximately well-kinded" nil 1)
    ("a'ws" "approximate well-typedness" nil 21)
    ("aa'bb" "axis-aligned bounding box" nil 1)
    ("aa'bbs" "axis-aligned bounding boxes" nil 2)
    ("abd" "abstracted" nil 22)
    ("abn" "abstraction" nil 368)
    ("abns" "abstractions" nil 167)
    ("abotu" "about" nil 12)
    ("abt" "abstract" nil 460)
    ("abtd" "abstracted" nil 4)
    ("abtg" "abstracting" nil 16)
    ("abts" "abstracts" nil 12)
    ("abty" "abstractly" nil 17)
    ("acl" "acceptable" nil 72)
    ("actg" "accounting" nil 3)
    ("actgs" "accountings" nil 0)
    ("acy" "acceptability" nil 37)
    ("addn" "addition" nil 91)
    ("addns" "additions" nil 32)
    ("addny" "additionally" nil 6)
    ("adl" "additional" nil 2)
    ("adly" "additionally" nil 3)
    ("adn" "and" nil 439)
    ("adnl" "additional" nil 253)
    ("adnly" "additionally" nil 16)
    ("adny" "additionally" nil 3)
    ("adv" "additive" nil 1)
    ("agm" "algorithm" nil 860)
    ("agmc" "algorithmic" nil 28)
    ("agmcy" "algorithmically" nil 5)
    ("agms" "algorithms" nil 366)
    ("agt" "argument" nil 1167)
    ("agts" "arguments" nil 760)
    ("ahve" "have" nil 51)
    ("ajn" "adjunction" nil 13)
    ("ajns" "adjunctions" nil 2)
    ("ala" "Ã  la" nil 3)
    ("alc" "algebraic" nil 37)
    ("alcy" "algebraically" nil 1)
    ("alhpa" "alpha" nil 2)
    ("alt" "absolute" nil 94)
    ("altg" "alternating" nil 2)
    ("altt" "alternate" nil 69)
    ("altts" "alternates" nil 1)
    ("alty" "absolutely" nil 10)
    ("amn" "animation" nil 68)
    ("amns" "animations" nil 19)
    ("aot'" "as opposed to" nil 2)
    ("ap'f" "applicative functor" nil 10)
    ("ap'fs" "applicative functors" nil 9)
    ("apbl" "applicable" nil 67)
    ("apby" "applicability" nil 31)
    ("apg" "applying" nil 375)
    ("aph" "approach" nil 1098)
    ("aphd" "approached" nil 6)
    ("aphg" "approaching" nil 8)
    ("aphs" "approaches" nil 110)
    ("apn" "application" nil 1118)
    ("apns" "applications" nil 519)
    ("appt" "appropriate" nil 14)
    ("appty" "appropriately" nil 1)
    ("aps" "applies" nil 86)
    ("apv" "applicative" nil 803)
    ("apvl" "approval" nil 3)
    ("apvs" "applicatives" nil 24)
    ("apvy" "applicatively" nil 4)
    ("apy" "apply" nil 937)
    ("apyd" "applied" nil 378)
    ("apys" "applies" nil 123)
    ("arent" "aren't" nil 21)
    ("asap'" "as soon as possible" nil 2)
    ("asct" "associate" nil 4)
    ("asg" "assigning" nil 27)
    ("asgd" "assigned" nil 16)
    ("asgt" "assignment" nil 89)
    ("asgts" "assignments" nil 26)
    ("asmn" "assumption" nil 131)
    ("asmns" "assumptions" nil 51)
    ("asn" "association" nil 58)
    ("asns" "associations" nil 9)
    ("asrn" "assertion" nil 3)
    ("asrns" "assertions" nil 0)
    ("ast" "associate" nil 73)
    ("astd" "associated" nil 327)
    ("astg" "associating" nil 20)
    ("astn" "association" nil 2)
    ("asts" "associates" nil 20)
    ("asty" "associativity" nil 16)
    ("asv" "associative" nil 99)
    ("asvy" "associativity" nil 74)
    ("at's" "attribute state" nil 0)
    ("ata" "automata" nil 58)
    ("atc" "automatic" nil 113)
    ("atcy" "automatically" nil 220)
    ("atn" "automaton" nil 81)
    ("atr" "architecture" nil 134)
    ("atrl" "architectural" nil 3)
    ("atrs" "architectures" nil 42)
    ("att" "attribute" nil 246)
    ("attd" "attributed" nil 13)
    ("attr" "attr" nil 85)
    ("atts" "attributes" nil 221)
    ("aufn" "anti-unification" nil 4)
    ("aufr" "anti-unifier" nil 1)
    ("aufrs" "anti-unifiers" nil 0)
    ("avl" "ActiveVRML" nil 78)
    ("avn" "abbreviation" nil 45)
    ("avns" "abbreviations" nil 22)
    ("avt" "abbreviate" nil 11)
    ("avtd" "abbreviated" nil 6)
    ("avtg" "abbreviating" nil 0)
    ("avts" "abbreviates" nil 3)
    ("axg" "approximating" nil 26)
    ("axm" "axiom" nil 4)
    ("axms" "axioms" nil 22)
    ("axn" "approximation" nil 208)
    ("axns" "approximations" nil 92)
    ("axt" "approximate" nil 101)
    ("axtd" "approximated" nil 12)
    ("axtg" "approximating" nil 5)
    ("axts" "approximates" nil 11)
    ("axty" "approximately" nil 4)
    ("axy" "approximately" nil 11)
    ("b'b" "bounding box" nil 10)
    ("b'bs" "bounding boxes" nil 13)
    ("b'cn" "beta-conversion" nil 3)
    ("b'f" "breadth-first" nil 7)
    ("b'f's" "breadth-first search" nil 8)
    ("b'l" "behavior language" nil 32)
    ("b'm'o" "by means of" nil 2)
    ("b'rc" "beta reduce" nil 4)
    ("b'rcd" "beta reduced" nil 0)
    ("b'rdt" "beta reduced" nil 1)
    ("b'rn" "beta reduction" nil 38)
    ("b'rns" "beta reductions" nil 6)
    ("b'rnt" "beta reduction" nil 22)
    ("b'rt" "beta reduce" nil 1)
    ("b'rx" "beta redex" nil 7)
    ("b'rxs" "beta redexes" nil 5)
    ("b't" "behavior thread" nil 12)
    ("b't'w" "by the way" nil 31)
    ("b'ts" "behavior threads" nil 8)
    ("b'v" "bound variable" nil 46)
    ("b'v'h" "bounding volume hierarchy" nil 0)
    ("b'v'hs" "bounding volume hierarchies" nil 0)
    ("b'vm" "bounding volume" nil 4)
    ("b'vms" "bounding volumes" nil 9)
    ("b'vs" "bound variables" nil 82)
    ("bccc'" "bicartesian closed category" nil 1)
    ("bd" "bound" nil 123)
    ("bdd" "bounded" nil 19)
    ("bdg" "binding" nil 187)
    ("bdgs" "bindings" nil 85)
    ("bds" "bounds" nil 23)
    ("becasue" "because" nil 31)
    ("becuase" "because" nil 75)
    ("bjn" "bijection" nil 37)
    ("bjns" "bijections" nil 6)
    ("bjv" "bijective" nil 23)
    ("bot'" "â¥" nil 73)
    ("btm" "bottom" nil 1)
    ("btms" "bottoms" nil 1)
    ("bv" "behave" nil 1)
    ("bvd" "behaved" nil 0)
    ("bvl" "behavioral" nil 3)
    ("bvr" "behavior" nil 1694)
    ("bvrl" "behavioral" nil 4)
    ("bvrr" "Bvr" nil 3)
    ("bvrs" "behaviors" nil 901)
    ("bvs" "behaves" nil 0)
    ("c'b'v" "call-by-value" nil 27)
    ("c'b'x" "continuation-based transformation" nil 1)
    ("c'cs" "chain-completeness" nil 1)
    ("c'ctn" "collision continuation" nil 3)
    ("c'd" "collision detection" nil 19)
    ("c'e" "constraint expression" nil 2)
    ("c'es" "constraint expressions" nil 2)
    ("c'f" "continuous function" nil 9)
    ("c'f'l" "context-free language" nil 0)
    ("c'f'ls" "context-free languages" nil 1)
    ("c'fs" "continuous functions" nil 1)
    ("c'g" "computer graphics" nil 12)
    ("c'l'p" "constraint logic programming" nil 23)
    ("c'o'c" "Calculus of Constructions" nil 9)
    ("c'o'm" "calculus on manifolds" nil 5)
    ("c'p" "collision prediction" nil 47)
    ("c'p's" "continuation-passing style" nil 2)
    ("c'r" "collision response" nil 5)
    ("c'rs" "conversion rules" nil 6)
    ("c's" "concrete syntax" nil 12)
    ("c's'e" "common subexpression elimination" nil 11)
    ("c's'g" "constructive solid geometry" nil 2)
    ("c's'p" "complete set of pre-unifiers" nil 0)
    ("c's'u" "complete set of unifiers" nil 13)
    ("c's'us" "complete sets of unifiers" nil 4)
    ("c't" "category theory" nil 87)
    ("c't'c" "compiling to categories" nil 16)
    ("c'tc" "category theoretic" nil 1)
    ("c'v" "concrete value" nil 12)
    ("c'vs" "concrete values" nil 18)
    ("cafe'" "cafÃ©" nil 3)
    ("cafe's" "cafÃ©s" nil 2)
    ("cant" "can't" nil 46)
    ("cbl" "constrainable" nil 94)
    ("cbls" "constrainables" nil 52)
    ("cbn" "combination" nil 153)
    ("cbnl" "combinational" nil 18)
    ("cbns" "combinations" nil 37)
    ("cbr" "combinator" nil 67)
    ("cbrs" "combinators" nil 198)
    ("cc'" "cartesian closed" nil 0)
    ("ccc'" "cartesian closed category" nil 7)
    ("cccs'" "cartesian closed categories" nil 16)
    ("ccf'" #("closed cartesian functor" 0 7 (fontified t) 7 24 (fontified t)) nil 2)
    ("cci" "calculi" nil 25)
    ("ccln" "conclusion" nil 120)
    ("cclns" "conclusions" nil 53)
    ("ccn" "calculation" nil 36)
    ("ccns" "calculations" nil 20)
    ("ccs" "calculus" nil 178)
    ("cct" "calculate" nil 18)
    ("cctg" "calculating" nil 5)
    ("ccts" "calculates" nil 1)
    ("cdl" "conditional" nil 69)
    ("cdls" "conditionals" nil 0)
    ("cdly" "conditionally" nil 3)
    ("cdmn" "codomain" nil 3)
    ("cdn" "condition" nil 243)
    ("cdnl" "conditional" nil 40)
    ("cdnls" "conditionals" nil 45)
    ("cdnly" "conditionally" nil 0)
    ("cdns" "conditions" nil 106)
    ("cdots'" "â¯" nil 4)
    ("cdt" "coordinate" nil 48)
    ("cdtd" "coordinated" nil 5)
    ("cdtg" "coordinating" nil 4)
    ("cdts" "coordinates" nil 41)
    ("cfc" "conference" nil 72)
    ("cfcs" "conferences" nil 10)
    ("cft" "coefficient" nil 10)
    ("cfts" "coefficients" nil 21)
    ("cgl" "categorical" nil 4)
    ("cgly" "categorically" nil 1)
    ("cgn" "conjugation" nil 11)
    ("cgt" "conjugate" nil 1)
    ("cgy" "category" nil 3)
    ("cgys" "categories" nil 1)
    ("ch'r" "Church-Rosser" nil 32)
    ("circ'" "â" nil 8)
    ("cjn" "conjunction" nil 95)
    ("cjns" "conjunctions" nil 14)
    ("cjr" "conjecture" nil 27)
    ("cjrd" "conjectured" nil 0)
    ("cjv" "conjunctive" nil 4)
    ("cjvy" "conjunctively" nil 0)
    ("ck" "check" nil 459)
    ("ckd" "checked" nil 80)
    ("ckg" "checking" nil 164)
    ("cks" "checks" nil 17)
    ("cln" "collection" nil 393)
    ("clns" "collections" nil 50)
    ("cmpn" "composition" nil 7)
    ("cmx" "complex" nil 6)
    ("cn" "connection" nil 219)
    ("cnn'" #("convolutional neural network" 0 28 (fontified t)) nil 0)
    ("cnns'" #("convolutional neural networks" 0 29 (fontified t)) nil 0)
    ("cnqy" "consequently" nil 0)
    ("cns" "connections" nil 70)
    ("cnt" "constant" nil 773)
    ("cnts" "constants" nil 335)
    ("cnty" "constantly" nil 0)
    ("cojt" "cobject" nil 2)
    ("cojts" "cobjects" nil 3)
    ("commetn" "comment" nil 1)
    ("couldnt" "couldn't" nil 4)
    ("cpbl" "composable" nil 6)
    ("cpby" "composability" nil 8)
    ("cpd" "composed" nil 10)
    ("cpl" "compositional" nil 107)
    ("cply" "compositionally" nil 22)
    ("cpn" "composition" nil 1010)
    ("cpnl" "compositional" nil 73)
    ("cpns" "compositions" nil 131)
    ("cpny" "compositionally" nil 4)
    ("cps" "compose" nil 17)
    ("cpsd" "composed" nil 4)
    ("cpsg" "composing" nil 12)
    ("cpss" "composes" nil 0)
    ("cpt" "component" nil 244)
    ("cptl" "computational" nil 37)
    ("cptly" "computationally" nil 3)
    ("cptn" "computation" nil 490)
    ("cptns" "computations" nil 182)
    ("cpts" "components" nil 242)
    ("cpty" "compositionality" nil 6)
    ("cqn" "consequence" nil 66)
    ("cqns" "consequences" nil 45)
    ("cqny" "consequently" nil 9)
    ("cqt" "consequent" nil 8)
    ("cqty" "consequently" nil 26)
    ("crd" "correspond" nil 161)
    ("crdc" "correspondence" nil 148)
    ("crdd" "corresponded" nil 27)
    ("crdg" "corresponding" nil 461)
    ("crdgy" "correspondingly" nil 34)
    ("crdn" "coordination" nil 2)
    ("crds" "corresponds" nil 117)
    ("crln" "correlation" nil 1)
    ("crlns" "correlations" nil 0)
    ("cse'" #("common subexpression elimination" 0 32 (markdown-list-item ((55353 55417 0 4 "*   " nil (55353 55357 55353 55353 55353 55354 55354 55357))) fontified t)) nil 1)
    ("csn" "collision" nil 116)
    ("csns" "collisions" nil 37)
    ("cst" "construct" nil 426)
    ("cstd" "constructed" nil 149)
    ("cstg" "constructing" nil 172)
    ("cstn" "construction" nil 474)
    ("cstns" "constructions" nil 37)
    ("csts" "constructs" nil 91)
    ("cstv" "constructive" nil 12)
    ("cstvy" "constructively" nil 4)
    ("csv" "conservative" nil 21)
    ("csvy" "conservatively" nil 2)
    ("ct" "constraint" nil 380)
    ("ct'" "CT" nil 6)
    ("ctc'" "compiling to categories" nil 22)
    ("ctc''" "compiling-to-categories" nil 60)
    ("ctg" "containing" nil 30)
    ("ctgs" "contiguous" nil 1)
    ("ctn" "continuation" nil 134)
    ("ctns" "continuations" nil 68)
    ("ctods" "cdots" nil 6)
    ("ctr" "constructor" nil 455)
    ("ctrs" "constructors" nil 265)
    ("cts" "constraints" nil 323)
    ("ctsy" "continuously" nil 14)
    ("ctus" "continuous" nil 475)
    ("ctusy" "continuously" nil 42)
    ("ctuy" "continuity" nil 16)
    ("ctv" "commutative" nil 51)
    ("ctvy" "commutativity" nil 28)
    ("cty" "continuity" nil 39)
    ("cvbl" "ConstraintVariable" nil 2)
    ("cvby" "convertibility" nil 42)
    ("cvc" "convenience" nil 7)
    ("cvl" "convertible" nil 62)
    ("cvln" "convolution" nil 261)
    ("cvlnl" "convolutional" nil 2)
    ("cvlns" "convolutions" nil 5)
    ("cvn" "conversion" nil 365)
    ("cvnc" "convenience" nil 131)
    ("cvns" "conversions" nil 70)
    ("cvnt" "convenient" nil 255)
    ("cvnty" "conveniently" nil 24)
    ("cvt" "convert" nil 259)
    ("cvtd" "converted" nil 57)
    ("cvtg" "converting" nil 89)
    ("cvtl" "conventional" nil 136)
    ("cvtly" "conventionally" nil 5)
    ("cvtn" "convention" nil 64)
    ("cvtns" "conventions" nil 13)
    ("cvtr" "converter" nil 5)
    ("cvtrs" "converters" nil 0)
    ("cvts" "converts" nil 25)
    ("cx" "context" nil 322)
    ("cx'" "cx" nil 5)
    ("cx'f" "context-free" nil 4)
    ("cx'f'l" "context-free language" nil 0)
    ("cx'f'ls" "context-free languages" nil 0)
    ("cx's" "context-sensitive" nil 1)
    ("cxs" "contexts" nil 116)
    ("cz" "characterize" nil 2)
    ("d'b" "double buffer" nil 1)
    ("d'bd" "double-buffered" nil 0)
    ("d'bg" "double buffering" nil 4)
    ("d'c" "dependent calculus" nil 30)
    ("d'd" "denotational design" nil 66)
    ("d'e" "differential equation" nil 9)
    ("d'es" "differential equations" nil 28)
    ("d'f" "depth-first" nil 11)
    ("d'f'p" "differentiable functional programming" nil 4)
    ("d'f's" "depth-first search" nil 8)
    ("d'f't" "dependent function type" nil 1)
    ("d'f'ts" "dependent function types" nil 9)
    ("d'i" "de Bruijn index" nil 15)
    ("d'is" "de Bruijn indices" nil 28)
    ("d'l" "deep learning" nil 64)
    ("d'm" "direct manipulation" nil 1)
    ("d'o'f" "degree of freedom" nil 8)
    ("d'o'fs" "degrees of freedom" nil 17)
    ("d'p" "dynamic programming" nil 17)
    ("d'p't" "dependent product type" nil 0)
    ("d'p'ts" "dependent product types" nil 0)
    ("d's" "data structure" nil 91)
    ("d's'e'l" "domain-specific embedded language" nil 0)
    ("d's'e'ls" "domain-specific embedded languages" nil 2)
    ("d's'l" "domain-specific language" nil 5)
    ("d's'ls" "domain-specific languages" nil 9)
    ("d'sm" "denotational semantics" nil 95)
    ("d'ss" "data structures" nil 65)
    ("d't" "data type" nil 115)
    ("d't'l'c" "dependent typed lambda calculus" nil 5)
    ("d'tp" "data type" nil 19)
    ("d'tps" "data types" nil 11)
    ("d'ts" "data types" nil 140)
    ("da'd" "data-driven" nil 18)
    ("da'p" "data-parallel" nil 1)
    ("dbd" "distributed" nil 28)
    ("dbn" "distribution" nil 123)
    ("dbns" "distributions" nil 102)
    ("dbt" "distribute" nil 48)
    ("dbtd" "distributed" nil 17)
    ("dbtg" "distributing" nil 11)
    ("dbts" "distributes" nil 29)
    ("dbv" "distributive" nil 37)
    ("dbvy" "distributivity" nil 20)
    ("dcb" "describe" nil 224)
    ("dcbd" "described" nil 446)
    ("dcbg" "describing" nil 102)
    ("dcbl" "decidable" nil 10)
    ("dcbs" "describes" nil 125)
    ("dcln" "declaration" nil 83)
    ("dclns" "declarations" nil 55)
    ("dcn" "declaration" nil 111)
    ("dcns" "declarations" nil 78)
    ("dcpd" "decomposed" nil 0)
    ("dcpn" "decomposition" nil 142)
    ("dcpns" "decompositions" nil 14)
    ("dcps" "decompose" nil 37)
    ("dcpsg" "decomposing" nil 5)
    ("dcpss" "decomposes" nil 2)
    ("dct" "document" nil 304)
    ("dctd" "documented" nil 17)
    ("dctg" "documenting" nil 2)
    ("dctn" "documentation" nil 142)
    ("dcts" "documents" nil 23)
    ("dcty" "discontinuity" nil 3)
    ("dctys" "discontinuities" nil 1)
    ("dcv" "declarative" nil 112)
    ("dcvy" "declaratively" nil 10)
    ("ddc" "deduce" nil 33)
    ("ddcd" "deduced" nil 0)
    ("ddcg" "deducing" nil 2)
    ("ddcs" "deduces" nil 0)
    ("ddn" "deduction" nil 36)
    ("ddns" "deductions" nil 10)
    ("ddv" "deductive" nil 9)
    ("de'd" "demand-driven" nil 18)
    ("depty" "depth" nil 4)
    ("df" "define" nil 1664)
    ("df'" "df" nil 32)
    ("dfbl" "differentiable" nil 169)
    ("dfby" "differentiability" nil 13)
    ("dfc" "difference" nil 307)
    ("dfcg" "differencing" nil 2)
    ("dfcs" "differences" nil 69)
    ("dfd" "defined" nil 987)
    ("dfg" "defining" nil 292)
    ("dfl" "differential" nil 59)
    ("dfls" "differentials" nil 0)
    ("dfly" "differentially" nil 0)
    ("dfn" "definition" nil 2048)
    ("dfnl" "definitional" nil 8)
    ("dfnly" #("definitionally" 0 14 (fontified t)) nil 1)
    ("dfns" "definitions" nil 896)
    ("dfrn" "differentiation" nil 275)
    ("dfrns" "differentiations" nil 2)
    ("dfrt" "differentiate" nil 38)
    ("dfrtd" "differentiated" nil 12)
    ("dfrts" "differentiates" nil 1)
    ("dfs" "defines" nil 94)
    ("dft" "different" nil 1170)
    ("dftg" "differentiating" nil 17)
    ("dfty" "differently" nil 111)
    ("dgt" "disagreement" nil 1)
    ("di'p" "disagreement pair" nil 172)
    ("di'ps" "disagreement pairs" nil 168)
    ("di'sq" "disagreement sequence" nil 8)
    ("di'sqs" "disagreement sequences" nil 0)
    ("didnt" "didn't" nil 47)
    ("djn" "disjunction" nil 34)
    ("djns" "disjunctions" nil 9)
    ("djv" "disjunctive" nil 6)
    ("djvy" "disjunctively" nil 0)
    ("dlt" "difficult" nil 26)
    ("dlty" "difficulty" nil 20)
    ("dltys" "difficulties" nil 4)
    ("dm't" "domain theory" nil 3)
    ("dm'tc" "domain theoretic" nil 3)
    ("dmn" "domain" nil 284)
    ("dmns" "domains" nil 74)
    ("dn" "denotation" nil 23)
    ("dnl" "denotational" nil 255)
    ("dnly" "denotationally" nil 25)
    ("dnn" "denotation" nil 121)
    ("dnn'" "dnn" nil 5)
    ("dnns" "denotations" nil 25)
    ("dns" "denotations" nil 3)
    ("dnv" "denotative" nil 56)
    ("dnvy" "denotatively" nil 1)
    ("doesnt" "doesn't" nil 110)
    ("dof'" "degree of freedom" nil 2)
    ("dofs'" "degrees of freedom" nil 1)
    ("dont" "don't" nil 521)
    ("dpc" "dependence" nil 30)
    ("dpcn" "decomposition" nil 1)
    ("dpd" "depend" nil 146)
    ("dpdd" "depended" nil 6)
    ("dpdg" "depending" nil 94)
    ("dpds" "depends" nil 168)
    ("dpt" "dependent" nil 347)
    ("dpts" "dependents" nil 0)
    ("dpty" "dependently" nil 14)
    ("dpv" "disprove" nil 1)
    ("dpy" "dependency" nil 118)
    ("dpys" "dependencies" nil 118)
    ("drfc" "dereference" nil 0)
    ("dscn" "description" nil 308)
    ("dscns" "descriptions" nil 91)
    ("dscrn" "description" nil 1)
    ("dscv" "descriptive" nil 13)
    ("dstn" "destruction" nil 3)
    ("dstr" "destructor" nil 1)
    ("dstrs" "destructors" nil 0)
    ("dsv" "destructive" nil 29)
    ("dsvy" "destructively" nil 44)
    ("dtc" "deterministic" nil 74)
    ("dtcy" "deterministically" nil 3)
    ("dtm" "determinism" nil 11)
    ("dtt" "determinate" nil 3)
    ("dtv" "derivative" nil 667)
    ("dtvs" "derivatives" nil 498)
    ("dv" "derive" nil 148)
    ("dv'" "dv" nil 17)
    ("dvbl" "derivable" nil 1)
    ("dvd" "derived" nil 142)
    ("dvg" "deriving" nil 261)
    ("dvn" "derivation" nil 350)
    ("dvnl" "derivational" nil 7)
    ("dvns" "derivations" nil 80)
    ("dvp" "develop" nil 88)
    ("dvpd" "developed" nil 86)
    ("dvpg" "developing" nil 74)
    ("dvpr" "developer" nil 5)
    ("dvprs" "developers" nil 9)
    ("dvps" "develops" nil 13)
    ("dvs" "derives" nil 14)
    ("dvt" "development" nil 271)
    ("dvtl" "developmental" nil 0)
    ("dvts" "developments" nil 14)
    ("e'b'g" "explanation based generalization" nil 2)
    ("e'e" "eta expand" nil 20)
    ("e'ed" "eta expanded" nil 1)
    ("e'eg" #("eta expanding" 0 13 (fontified t)) nil 1)
    ("e'en" "eta expansion" nil 12)
    ("e'ens" "eta expansions" nil 1)
    ("e'es" "eta expands" nil 1)
    ("e'l'f" "Edinburgh Logical Framework" nil 17)
    ("e'o" "each other" nil 0)
    ("e'p" "expression procedure" nil 4)
    ("e'pmc" "explicitly polymorphic" nil 0)
    ("e'pmm" "explicit polymorphism" nil 5)
    ("e'ps" "expression procedures" nil 3)
    ("e's's" "ERGO Suport System" nil 11)
    ("e'u" "equational unification" nil 3)
    ("eft" "efficient" nil 667)
    ("efty" "efficiently" nil 169)
    ("efy" "efficiency" nil 293)
    ("eg" "e.g.," nil 1190)
    ("elmn" "elimination" nil 5)
    ("emt" "element" nil 237)
    ("emts" "elements" nil 259)
    ("eplg" "extrapolating" nil 0)
    ("epln" "extrapolation" nil 11)
    ("eplt" "extrapolate" nil 1)
    ("eqc" "equivalence" nil 64)
    ("eqcs" "equivalences" nil 5)
    ("eqn" "equation" nil 124)
    ("eqnl" "equational" nil 83)
    ("eqnly" "equationally" nil 2)
    ("eqns" "equations" nil 138)
    ("eqty" "equality" nil 63)
    ("eqtys" "equalities" nil 0)
    ("equiv'" "â¡" nil 17)
    ("eqvt" "equivalent" nil 132)
    ("eqvts" "equivalents" nil 0)
    ("eqvty" "equivalently" nil 7)
    ("evetn" "event" nil 4)
    ("evetns" "events" nil 9)
    ("evt" "environment" nil 402)
    ("evtl" "environmental" nil 2)
    ("evts" "environments" nil 72)
    ("excersize" "exercise" nil 2)
    ("exists'" "â" nil 1)
    ("f'a" "functional animation" nil 6)
    ("f'b" "frame buffer" nil 2)
    ("f'c" "first-class" nil 9)
    ("f'cb" "functor combinator" nil 1)
    ("f'cbs" "functor combinators" nil 0)
    ("f'ctn" "failure continutation" nil 5)
    ("f'ctns" "failure continutations" nil 0)
    ("f'e" "for example" nil 125)
    ("f'f'i" "foreign function interface" nil 10)
    ("f'i" "for instance" nil 1212)
    ("f'l" "formal language" nil 6)
    ("f'o" "first-order" nil 46)
    ("f'o'l" "first-order logic" nil 8)
    ("f'o'm" "first-order matching" nil 1)
    ("f'o'r" "first-order resolution" nil 3)
    ("f'o'u" "first-order unification" nil 33)
    ("f'o'v" "field of view" nil 1)
    ("f'occ" "free-occurrence" nil 2)
    ("f'occs" "free-occurrences" nil 1)
    ("f'os" "function objects" nil 5)
    ("f'p" "functional programming" nil 238)
    ("f'p'i" "fixed point induction" nil 13)
    ("f'r" "functional reactive" nil 0)
    ("f'r'a" "functional reactive animation" nil 1)
    ("f'r'p" "functional reactive programming" nil 26)
    ("f's" "formal system" nil 10)
    ("f's'm" "finite state machine" nil 2)
    ("f's'ms" "finite state machines" nil 0)
    ("f'ss" "function symbols" nil 5)
    ("f't" "future time" nil 1)
    ("f't'v" "free type variable" nil 2)
    ("f't'vs" "free type variables" nil 7)
    ("f'v" "free variable" nil 36)
    ("f'v's" "free vector space" nil 12)
    ("f'v'ss" "free vector spaces" nil 4)
    ("f'vs" "free variables" nil 142)
    ("f'x" "for example" nil 4)
    ("fbl" "flexible" nil 81)
    ("fbly" "flexibly" nil 4)
    ("fbty" "flexibility" nil 41)
    ("fby" "flexibility" nil 36)
    ("fdl" "fundamental" nil 147)
    ("fdls" "fundamentals" nil 2)
    ("fdly" "fundamentally" nil 44)
    ("fdn" "foundation" nil 96)
    ("fdnl" "foundational" nil 9)
    ("fdns" "foundations" nil 30)
    ("ffl" "flex-flex" nil 0)
    ("flase" "False" nil 1)
    ("fld" "followed" nil 71)
    ("flfl" "flexible-flexible" nil 166)
    ("flg" "following" nil 334)
    ("flrd" "flexible-rigid" nil 153)
    ("fls" "follows" nil 81)
    ("fltp" "flexible-type" nil 2)
    ("fm" "from" nil 8505)
    ("fma" "formula" nil 123)
    ("fmas" "formulas" nil 77)
    ("fml" "formal" nil 143)
    ("fmly" "formally" nil 34)
    ("fmn" "formulation" nil 309)
    ("fmns" "formulations" nil 61)
    ("fmt" "formulate" nil 105)
    ("fmtd" "formulated" nil 24)
    ("fmtg" "formulating" nil 20)
    ("fmts" "formulates" nil 7)
    ("fmy" "family" nil 241)
    ("fmys" "families" nil 78)
    ("fn" "function" nil 4649)
    ("fnl" "functional" nil 1180)
    ("fnls" "functionals" nil 18)
    ("fnly" "functionally" nil 36)
    ("fns" "functions" nil 3144)
    ("fnty" "functionality" nil 141)
    ("fo" "of" nil 462)
    ("forall'" "â" nil 8)
    ("fqt" "frequent" nil 18)
    ("fqty" "frequently" nil 19)
    ("fqy" "frequency" nil 30)
    ("fqys" "frequencies" nil 4)
    ("frechet" "FrÃ©chet" nil 7)
    ("frnak" "frank" nil 3)
    ("fsm" "formalism" nil 21)
    ("fsm'" "fsm" nil 5)
    ("fsms" "formalisms " nil 1)
    ("ft" "first" nil 3475)
    ("fu'v" "future value" nil 2)
    ("fu'vs" "future values" nil 15)
    ("fvs'" "free vector space" nil 1)
    ("fvss'" "free vector spaces" nil 2)
    ("fx'p" "fixed point" nil 14)
    ("fx'ps" "fixed points" nil 15)
    ("fz" "formalize" nil 46)
    ("fzd" "formalized" nil 9)
    ("fzg" "formalizing" nil 18)
    ("fzl" "formalizable" nil 0)
    ("fzn" "formalization" nil 19)
    ("fzns" "formalizations" nil 3)
    ("fzs" "formalizes" nil 4)
    ("g''o" "geometric-object" nil 3)
    ("g''os" "geometric-objects" nil 0)
    ("g'a'f" "graphics application framework" nil 7)
    ("g'c" "garbage collection" nil 70)
    ("g'cd" "garbage-collected" nil 2)
    ("g'cr" "garbage collector" nil 2)
    ("g'd" "geometry-dependent" nil 5)
    ("g'dc" "geometry-dependence" nil 0)
    ("g'e" "geometry expression" nil 9)
    ("g'es" "geometry expressions" nil 3)
    ("g'f" "generic function" nil 2)
    ("g'l" "geometry language" nil 27)
    ("g'o" "geometric object" nil 56)
    ("g'os" "geometric objects" nil 29)
    ("g'p" "general purpose" nil 22)
    ("g'pv" "geometric primitive" nil 0)
    ("g'pvs" "geometric primitives" nil 7)
    ("g'u'i" "graphical user interface" nil 0)
    ("g'u'is" "graphical user interfaces" nil 1)
    ("gd" "gd" nil 38)
    ("gl" "general" nil 1418)
    ("glb'" "â" nil 4)
    ("glty" "generality" nil 93)
    ("gltys" "generalities" nil 0)
    ("gly" "generally" nil 353)
    ("gmc" "geometric" nil 173)
    ("gmcy" "geometrically" nil 3)
    ("gmr" "grammar" nil 71)
    ("gmrs" "grammars" nil 14)
    ("gmy" "geometry" nil 1470)
    ("gmys" "geometries" nil 13)
    ("gn" "generation" nil 247)
    ("gnc" "generic" nil 80)
    ("gncs" "generics" nil 2)
    ("gncy" "generically" nil 2)
    ("gns" "generations" nil 5)
    ("gnt" "generate" nil 4)
    ("gnts" "generates" nil 0)
    ("goign" "going" nil 32)
    ("gp" "group" nil 544)
    ("gpd" "grouping" nil 0)
    ("gpg" "grouping" nil 0)
    ("gps" "groups" nil 69)
    ("grahpics" "graphics" nil 7)
    ("gt" "generate" nil 298)
    ("gtd" "generated" nil 339)
    ("gtg" "generating" nil 94)
    ("gtr" "generator" nil 79)
    ("gtrs" "generators" nil 31)
    ("gts" "generates" nil 128)
    ("gz" "generalize" nil 546)
    ("gzd" "generalized" nil 426)
    ("gzg" "generalizing" nil 148)
    ("gzn" "generalization" nil 193)
    ("gzns" "generalizations" nil 42)
    ("gzs" "generalizes" nil 105)
    ("h'e" "hyper-edge" nil 1)
    ("h'es" "hyper-edges" nil 0)
    ("h'g" "hyper-graph" nil 2)
    ("h'gs" "hyper-graphs" nil 0)
    ("h'l" "high-level" nil 122)
    ("h'n" "head normal" nil 2)
    ("h'n'f" "head normal form" nil 38)
    ("h'n'fs" "head normal forms" nil 2)
    ("h'o" "higher-order" nil 428)
    ("h'o'a's" "higher-order abstract syntax" nil 5)
    ("h'o'f" "higher-order function" nil 16)
    ("h'o'fs" "higher-order functions" nil 30)
    ("h'o'h'h" "higher-order hereditary Harrop" nil 2)
    ("h'o'l" "higher-order logic" nil 56)
    ("h'o'm" "higher-order matching" nil 19)
    ("h'o'r" "higher-order resolution" nil 4)
    ("h'o't" "higher-order type" nil 1)
    ("h'o'ts" "higher-order types" nil 9)
    ("h'o'u" "higher-order unification" nil 196)
    ("h's'r" "hidden surface removal" nil 4)
    ("h'ss" "half spaces" nil 0)
    ("hadnt" "hadn't" nil 17)
    ("hasnt" "hasn't" nil 5)
    ("havent" "haven't" nil 33)
    ("hcl" "hierarchical" nil 43)
    ("hcly" "hierarchically" nil 5)
    ("hcy" "hierarchy" nil 49)
    ("hcys" "hierarchies" nil 4)
    ("hmc" "homomorphic" nil 115)
    ("hmcy" "homomorphically" nil 20)
    ("hmm" "homomorphism" nil 337)
    ("hmms" "homomorphisms" nil 141)
    ("hod'" #("higher-order derivative" 0 13 (fontified t) 13 23 (fontified t)) nil 0)
    ("hods'" #("higher-order derivatives" 0 13 (fontified t) 13 24 (fontified t)) nil 1)
    ("hof'" "higher-order function" nil 16)
    ("hofs'" "higher-order functions" nil 30)
    ("hr'd" "higher dimensional" nil 0)
    ("hr'l" "higher level" nil 47)
    ("hte" "the" nil 66)
    ("hvae" "have" nil 32)
    ("hvr" "however" nil 1454)
    ("hwo" "how" nil 10)
    ("hymc" "hylomorphic" nil 7)
    ("hymm" "hylomorphism" nil 6)
    ("hymms" "hylomorphisms" nil 7)
    ("hzl" "horizontal" nil 28)
    ("hzly" "horizontally" nil 9)
    ("i'a" "in addition" nil 36)
    ("i'a't" "in addition to" nil 152)
    ("i'as" "inherited attributes" nil 2)
    ("i'b" "interactive behavior" nil 3)
    ("i'bs" "interactive behaviors" nil 1)
    ("i'c" "in contrast" nil 105)
    ("i'c'o" "in case of" nil 2)
    ("i'f" "in fact" nil 141)
    ("i'f'f" "if and only if" nil 5)
    ("i'f'o" "in favor of" nil 91)
    ("i'fe" "indirection-free" nil 2)
    ("i'g" "in general" nil 259)
    ("i'h" "induction hypothesis" nil 8)
    ("i'm'e" "in my experience" nil 3)
    ("i'm'o" "in my opinion" nil 12)
    ("i'o" "in order" nil 22)
    ("i'o'f" "in order for" nil 1)
    ("i'o't" "in order to" nil 340)
    ("i'o'w" "in other words" nil 135)
    ("i'p" "in particular" nil 488)
    ("i'pmc" "implicitly polymorphic" nil 3)
    ("i'pmm" "implicit polymorphism" nil 30)
    ("i'r" "inference rule" nil 22)
    ("i'r't" "in response to" nil 1)
    ("i'rs" "inference rules" nil 38)
    ("i's" "inference system" nil 8)
    ("i's'o" "in spite of" nil 41)
    ("i'ss" "inference systems" nil 0)
    ("i't" "in that" nil 17)
    ("i't'o" "in terms of" nil 358)
    ("i'v" "improving value" nil 31)
    ("i'vb" "instance variable" nil 18)
    ("i'vbs" "instance variables" nil 40)
    ("i'vs" "improving values" nil 23)
    ("i'w" "in which" nil 493)
    ("i'w'c" "in which case" nil 61)
    ("iat'" "in addition to" nil 7)
    ("ibvr" "i-behavior" nil 3)
    ("ibvrs" "i-behaviors" nil 1)
    ("ic'" "in contrast" nil 3)
    ("icl" "incremental" nil 158)
    ("icly" "incrementally" nil 26)
    ("ict'" #("in contrast to" 0 14 (fontified t)) nil 3)
    ("icv" "inclusive" nil 1)
    ("icvc" "inconvenience" nil 1)
    ("icvnc" #("inconvenience" 0 2 (fontified t) 2 13 (fontified t)) nil 0)
    ("icvnt" "inconvenient" nil 9)
    ("idc" "introduce" nil 327)
    ("idcd" "introduced" nil 123)
    ("idcg" "introducing" nil 146)
    ("idcs" "introduces" nil 60)
    ("idfn" "identification" nil 1)
    ("idn" "introduction" nil 218)
    ("idns" "introductions" nil 11)
    ("idpc" "independence" nil 22)
    ("idpt" "independent" nil 215)
    ("idpty" "independently" nil 76)
    ("idtt" "indeterminate" nil 5)
    ("idv" "inductive" nil 29)
    ("idvy" "inductively" nil 7)
    ("idx" "index" nil 50)
    ("idxd" "indexed" nil 7)
    ("idxg" "indexing" nil 3)
    ("idxs" "indices" nil 1)
    ("ie" "i.e.," nil 1459)
    ("ieft" "inefficient" nil 66)
    ("iefty" "inefficiently" nil 2)
    ("iefy" "inefficiency" nil 29)
    ("iefys" "inefficiencies" nil 4)
    ("ieqty" "inequality" nil 3)
    ("ieqtys" "inequalities" nil 3)
    ("ifbl" "inflexible" nil 3)
    ("ifc" "inference" nil 157)
    ("ifcs" "inferences" nil 5)
    ("iff'" "if and only if" nil 0)
    ("ifl" "informal" nil 73)
    ("ifly" "informally" nil 16)
    ("ifm" "inform" nil 23)
    ("ifml" "informal" nil 17)
    ("ifmly" "informally" nil 16)
    ("ifmy" "informally" nil 10)
    ("ifn" "information" nil 446)
    ("ifo'" "in favor of" nil 1)
    ("ifqt" "infrequent" nil 3)
    ("ifqty" "infrequently" nil 0)
    ("ift" "infinite" nil 481)
    ("ifty" "infinitely" nil 79)
    ("igl" "integral" nil 101)
    ("igls" "integrals" nil 10)
    ("ign" "integration" nil 177)
    ("igns" "integrations" nil 2)
    ("igt" "integrate" nil 33)
    ("igtd" "integrated" nil 13)
    ("igtg" "integrating" nil 5)
    ("igtr" "integrator" nil 1)
    ("igts" "integrates" nil 1)
    ("ijn" "injection" nil 11)
    ("ijns" "injections" nil 9)
    ("ijv" "injective" nil 78)
    ("ijvly" "injectively" nil 23)
    ("ijvty" "injectivity" nil 11)
    ("imc" "isomorphic" nil 160)
    ("imc'" "â" nil 9)
    ("imcy" "isomorphically" nil 13)
    ("imm" "isomorphism" nil 272)
    ("imms" "isomorphisms" nil 198)
    ("implies'" "â¹" nil 2)
    ("incst" "inconsistent" nil 1)
    ("intn" "interaction" nil 175)
    ("intns" "interactions" nil 18)
    ("intv" "interactive" nil 248)
    ("iot'" "in order to" nil 17)
    ("iow'" "in other words" nil 92)
    ("ipbl" "impossible" nil 91)
    ("ipcn" "implication" nil 75)
    ("ipcns" "implications" nil 41)
    ("ipd" "implemented" nil 312)
    ("ipg" "implementing" nil 132)
    ("iplg" "interpolating" nil 6)
    ("ipln" "interpolation" nil 75)
    ("iplns" "interpolations" nil 1)
    ("iplt" "interpolate" nil 20)
    ("ipltd" "interpolated" nil 5)
    ("iplts" "interpolates" nil 1)
    ("ipn" "implementation" nil 2005)
    ("ipns" "implementations" nil 289)
    ("ipr" "implementer" nil 7)
    ("iprc" "importance" nil 56)
    ("iprs" "implementers" nil 6)
    ("iprt" "important" nil 730)
    ("iprty" "importantly" nil 28)
    ("ipt" "implement" nil 561)
    ("iptd" "implemented" nil 44)
    ("iptg" "implementing" nil 9)
    ("iptl" "implementable" nil 4)
    ("iptr" "implementer" nil 23)
    ("iptrs" "implementers" nil 6)
    ("ipts" "implements" nil 50)
    ("iptv" "imperative" nil 396)
    ("iptvy" "imperatively" nil 11)
    ("ipv" "improve" nil 212)
    ("ipvd" "improved" nil 133)
    ("ipvg" "improving" nil 117)
    ("ipvs" "improves" nil 11)
    ("ipvt" "improvement" nil 78)
    ("ipvts" "improvements" nil 115)
    ("irl" "internal" nil 93)
    ("irls" "internals" nil 11)
    ("irly" "internally" nil 21)
    ("irz" "internalize" nil 3)
    ("irzd" "internalized" nil 1)
    ("isft" "insufficient" nil 4)
    ("isfty" "insufficiently" nil 5)
    ("isl" "intensional" nil 9)
    ("isn" "intersection" nil 35)
    ("isns" "intersections" nil 3)
    ("isnt" "isn't" nil 45)
    ("isrn" "instruction" nil 31)
    ("isrns" "instructions" nil 38)
    ("ist" "instantiate" nil 127)
    ("istd" "instantiated" nil 155)
    ("istg" "instantiating" nil 48)
    ("istn" "instantiation" nil 11)
    ("istns" "instantiations" nil 6)
    ("istr'" "I see to recall" nil 3)
    ("ists" "instantiates" nil 19)
    ("itc" "intutitionistic" nil 10)
    ("itcy" "intutitionistically" nil 0)
    ("itd" "interested" nil 394)
    ("itds" "ill-typedness" nil 29)
    ("itfc" "interface" nil 891)
    ("itfcd" "interfaced" nil 2)
    ("itfcg" "interfacing" nil 13)
    ("itfcs" "interfaces" nil 207)
    ("itg" "interesting" nil 512)
    ("itgy" "interestingly" nil 41)
    ("itm" "imitation" nil 55)
    ("itme" "item" nil 6)
    ("itms" "imitations" nil 40)
    ("itn" "itn" nil 23)
    ("itnc" "intuitionistic" nil 1)
    ("itns" "interactions" nil 14)
    ("ito'" "in terms of" nil 14)
    ("itp" "interpret" nil 70)
    ("itpd" "interpreted" nil 22)
    ("itpg" "interpreting" nil 52)
    ("itpn" "interpretation" nil 306)
    ("itpns" "interpretations" nil 105)
    ("itpr" "interpreter" nil 46)
    ("itprs" "interpreters" nil 3)
    ("itps" "interprets" nil 3)
    ("itt" "iterate" nil 8)
    ("ittd" "iterated" nil 1)
    ("ittn" "iteration" nil 18)
    ("ittns" "iterations" nil 4)
    ("ittv" "iterative" nil 22)
    ("ittvy" "iteratively" nil 4)
    ("itv" "interactive" nil 12)
    ("itvty" "interactivity" nil 8)
    ("itvy" "interactively" nil 29)
    ("itz" "internalize" nil 0)
    ("itzd" "internalized" nil 0)
    ("itzg" "internalizing" nil 1)
    ("itzn" "internalization" nil 2)
    ("itzs" "internalizes" nil 0)
    ("iv'a" "interval analysis" nil 35)
    ("ivbl" "invertible" nil 50)
    ("ivby" "invertibility" nil 2)
    ("ivc" "invariance" nil 2)
    ("ive" "I've" nil 46)
    ("ivl" "interval" nil 368)
    ("ivln" "involution" nil 4)
    ("ivlns" "involutions" nil 0)
    ("ivls" "intervals" nil 187)
    ("ivn" "inversion" nil 61)
    ("ivns" "inversions" nil 5)
    ("ivt" "invariant" nil 125)
    ("ivts" "invariants" nil 13)
    ("iwc'" "in which case" nil 60)
    ("ix" "index" nil 209)
    ("ixd" "indexed" nil 131)
    ("ixg" "indexing" nil 23)
    ("ixs" "indices" nil 8)
    ("iz" "initialize" nil 29)
    ("izd" "initialized" nil 15)
    ("izg" "initializing" nil 6)
    ("izn" "initialization" nil 40)
    ("izns" "initializations" nil 4)
    ("izr" "initializer" nil 0)
    ("izrs" "initializers" nil 0)
    ("izs" "initializes" nil 0)
    ("j'r" "John Reynolds" nil 45)
    ("jfd" "justified" nil 11)
    ("jfg" "justifying" nil 9)
    ("jfn" "justification" nil 54)
    ("jfns" "justifications" nil 0)
    ("jfy" "justify" nil 47)
    ("jfyd" "justified" nil 9)
    ("jfyg" "justifying" nil 5)
    ("jfys" "justifies" nil 9)
    ("jsut" "just" nil 30)
    ("jt" "judgment" nil 38)
    ("jtl" "judgmental" nil 9)
    ("jts" "judgments" nil 7)
    ("jxn" "juxtaposition" nil 5)
    ("knwo" "know" nil 1)
    ("konw" "know" nil 17)
    ("l'a" "linear algebra" nil 128)
    ("l'c" "lambda calculus" nil 48)
    ("l'cs" "lambda-calculi" nil 4)
    ("l'cvby" "lambda convertability" nil 2)
    ("l'd't" "algebraic data type" nil 16)
    ("l'd'ts" "algebraic data types" nil 16)
    ("l'e" "lambda expression" nil 12)
    ("l'es" "lambda expressions" nil 17)
    ("l'f" "Logical Framework" nil 4)
    ("l'f'p" "least fixed point" nil 14)
    ("l'f'ps" "least fixed points" nil 7)
    ("l'h'n'f" "long head normal form" nil 6)
    ("l'h's" "left-hand side" nil 16)
    ("l'h'ss" "left-hand sides" nil 19)
    ("l'l" "low-level" nil 53)
    ("l'ls" "lazy lists" nil 1)
    ("l'm" "linear map" nil 137)
    ("l'm't" "local modeling transform" nil 1)
    ("l'm'ts" "local modeling transforms" nil 1)
    ("l'ms" "linear maps" nil 255)
    ("l'n'f" "long normal form" nil 12)
    ("l'o'i" "level of indirection" nil 1)
    ("l'p" "logic programming" nil 59)
    ("l'p'l" "logic programming language" nil 0)
    ("l's'b" "least significant bit" nil 1)
    ("l'u'b" "least upper bound" nil 6)
    ("l'u'bs" "least upper bounds" nil 0)
    ("l'v" "logical variable" nil 1)
    ("l'x" "linear transformation" nil 14)
    ("l'xs" "linear transformations" nil 41)
    ("ladn" "land" nil 2)
    ("lambda'" "Î»" nil 5)
    ("lbenf" "long beta-eta normal form" nil 2)
    ("lbepnf" "long beta-eta product normal form" nil 3)
    ("lc" "logic" nil 276)
    ("lcl" "logical" nil 172)
    ("lcly" "logically" nil 18)
    ("lcn" "location" nil 141)
    ("lcns" "locations" nil 80)
    ("lcs" "logics" nil 45)
    ("lcy" "logically" nil 2)
    ("leqi'" "â" nil 13)
    ("lg" "language" nil 1931)
    ("lga" "algebra" nil 148)
    ("lgas" "algebras" nil 6)
    ("lgc" "algebraic" nil 173)
    ("lgcy" "algebraically" nil 2)
    ("lgs" "languages" nil 541)
    ("li'c" "linear combination" nil 2)
    ("li'cs" "linear combinations" nil 0)
    ("liek" "like" nil 20)
    ("llambda'" "Î" nil 3)
    ("loh" "LÃ¶h" nil 1)
    ("lpg" "Lambda-Prolog" nil 131)
    ("lppg" "Lambda'pi-Prolog" nil 3)
    ("lr'l" "lower level" nil 13)
    ("lsit" "list" nil 4)
    ("ltods" "ldots" nil 6)
    ("ltt" "alternate" nil 2)
    ("ltv" "alternative" nil 559)
    ("ltvs" "alternatives" nil 216)
    ("ltvy" "alternatively" nil 340)
    ("lub'" "â" nil 24)
    ("m'c" "modeling coordinate" nil 3)
    ("m'c's'p" "minimal complete set of pre-unifiers" nil 9)
    ("m'c's'ps" "minimal complete sets of pre-unifiers" nil 8)
    ("m'c's'u" "minimal complete set of unifiers" nil 19)
    ("m'c's'us" "minimal complete sets of unifiers" nil 0)
    ("m'cs" "model coordinates" nil 1)
    ("m'd'p" "Markov decision process" nil 3)
    ("m'd'ps" "Markov decision processes" nil 5)
    ("m'eqn" "multiequation" nil 5)
    ("m'eqns" "multiequations" nil 4)
    ("m'g'u" "most general unifier" nil 12)
    ("m'i" "multiple inheritance" nil 8)
    ("m'l" "meta-language" nil 82)
    ("m'ls" "meta-languages" nil 6)
    ("m'm" "multimedia" nil 15)
    ("m's'b" "most significant bit" nil 0)
    ("m't" "multi-threaded" nil 2)
    ("m'x" "modeling transform" nil 29)
    ("m'xs" "modeling transforms" nil 12)
    ("ma'l" "machine learning" nil 163)
    ("mabye" "maybe" nil 24)
    ("mch" "match" nil 88)
    ("mchd" "matched" nil 5)
    ("mchg" "matching" nil 173)
    ("mchr" "matcher" nil 5)
    ("mchs" "matches" nil 29)
    ("mcn" "mechanism" nil 59)
    ("mcns" "mechanisms" nil 33)
    ("mfd" "modified" nil 6)
    ("mfn" "modification" nil 54)
    ("mfns" "modifications" nil 23)
    ("mfo" "MediaFlow" nil 34)
    ("mfy" "modify" nil 65)
    ("mfyd" "modified" nil 159)
    ("mfyg" "modifying" nil 29)
    ("mfyl" "modifiable" nil 13)
    ("mfyr" "modifier" nil 4)
    ("mfyrs" "modifiers" nil 0)
    ("mfys" "modifies" nil 9)
    ("mgmt" "management" nil 55)
    ("mgr" "manager" nil 4)
    ("mgt" "management" nil 1)
    ("mlc" "meta-logic" nil 16)
    ("mlcl" "meta-logical" nil 1)
    ("mlpn" "multiplication" nil 6)
    ("mmz" "memoize" nil 43)
    ("mmzd" "memoized" nil 32)
    ("mmzg" "memoizing" nil 19)
    ("mmzn" "memoization" nil 125)
    ("mmzs" "memoizes" nil 0)
    ("mna" "minima" nil 0)
    ("mng" "meaning" nil 425)
    ("mngs" "meanings" nil 113)
    ("mnm" "minimum" nil 1)
    ("mpc" "monomorphic" nil 59)
    ("mpln" "multiplication" nil 144)
    ("mplns" #("multiplications" 0 15 (fontified t)) nil 2)
    ("mpm" "monomorphism" nil 14)
    ("mpv" "multiplicative" nil 4)
    ("mpy" "multiply" nil 6)
    ("mpyd" "multiplied" nil 1)
    ("mpyg" "multiplying" nil 1)
    ("mpys" "multiplies " nil 2)
    ("mpz" "monomorphize" nil 6)
    ("mpzd" "monomorphized" nil 2)
    ("mpzg" "monomorphizing" nil 1)
    ("mpzn" "monomorphization" nil 14)
    ("mroe" "more" nil 59)
    ("mtc" "monotonic" nil 95)
    ("mtcly" "monotonically" nil 19)
    ("mtcy" "monotonicity" nil 93)
    ("mtd" "method" nil 807)
    ("mtds" "methods" nil 479)
    ("mtdy" "methodology" nil 71)
    ("mtdys" "methodologies" nil 9)
    ("mtg" "meeting" nil 484)
    ("mtgs" "meetings" nil 44)
    ("mtn" "maintain" nil 1)
    ("mustnt" "mustn't" nil 2)
    ("mvbl" "meta-variable" nil 8)
    ("mvbls" "meta-variables" nil 5)
    ("mvl" "motivational" nil 6)
    ("mvn" "motivation" nil 144)
    ("mvnl" #("motivational" 0 12 (fontified t)) nil 0)
    ("mvns" "motivations" nil 13)
    ("mvr" "moreover" nil 302)
    ("mvt" "motivate" nil 58)
    ("mvtd" "motivated" nil 96)
    ("mvtg" "motivating" nil 33)
    ("mvts" "motivates" nil 23)
    ("mxa" "maxima" nil 4)
    ("mxm" "maximum" nil 61)
    ("mxz" "maximize" nil 17)
    ("mxzd" "maximized" nil 0)
    ("mxzn" "maximization" nil 0)
    ("mxzs" "maximizes" nil 1)
    ("mz" "minimize" nil 56)
    ("mzd" "minimized" nil 7)
    ("mzg" "minimizing" nil 7)
    ("mzn" "minimization" nil 22)
    ("mzs" "minimizes" nil 8)
    ("n'a's'c" "necessary and sufficient condition" nil 4)
    ("n'c" "necessary condition" nil 5)
    ("n'cs" "necessary conditions" nil 0)
    ("n'd" "natural deduction" nil 10)
    ("n'f" "normal form" nil 140)
    ("n'fs" "normal forms" nil 62)
    ("n'n" "natural number" nil 3)
    ("n'ns" "natural numbers" nil 14)
    ("n's" "non-strict" nil 8)
    ("n'x" "natural transformation" nil 10)
    ("n'xs" "natural transformations" nil 3)
    ("naive'" "naÃ¯ve" nil 16)
    ("naively'" "naÃ¯vely" nil 5)
    ("naivite" "naÃ¯vitÃ©" nil 1)
    ("nbd" "neighborhood" nil 7)
    ("nbds" "neighborhoods" nil 2)
    ("nbr" "neighbor" nil 2)
    ("nbrs" "neighbors" nil 1)
    ("ncly" "necessarily" nil 113)
    ("ncpnl" "noncomputational" nil 0)
    ("ncts" "noncontinuous" nil 1)
    ("ncvby" "nonconvertability" nil 1)
    ("ncy" "necessary" nil 292)
    ("ndc" "nondeterministic" nil 42)
    ("ndcy" "nondeterministically" nil 7)
    ("ndm" "nondeterminism" nil 29)
    ("ndsv" "non-destructive" nil 0)
    ("ndtc" "nondeterministic" nil 50)
    ("ndtm" "nondeterminism" nil 28)
    ("ne'n" #("neural network" 0 6 (fontified t) 6 7 (fontified t) 7 14 (fontified t)) nil 5)
    ("ne'ns" #("neural networks" 0 6 (fontified t) 6 7 (fontified t) 7 15 (fontified t)) nil 1)
    ("neednt" "needn't" nil 21)
    ("nfn" "notification" nil 2)
    ("nfnl" "non-functional" nil 0)
    ("nfns" "notifications" nil 1)
    ("ngv" "negative" nil 2)
    ("nicl" #("non-incremental" 0 4 (fontified t) 4 15 (fontified t)) nil 0)
    ("nidv" #("noninductive" 0 12 (fontified t)) nil 0)
    ("nijv" #("non-injective" 0 13 (fontified t)) nil 0)
    ("nintv" "non-interactive" nil 4)
    ("nitv" "non-interactive" nil 20)
    ("nkow" "know" nil 4)
    ("nleqi'" "â¢" nil 1)
    ("nmtc" "nonmonotonic" nil 3)
    ("noteq'" "â " nil 3)
    ("nstd" "nonstandard" nil 5)
    ("ntcl" #("nontechnical" 0 3 (fontified t) 3 12 (fontified t)) nil 1)
    ("ntl" "natural" nil 418)
    ("ntls" "naturalness" nil 11)
    ("ntly" "naturally" nil 139)
    ("ntmn" "non-termination" nil 10)
    ("ntmtg" "nonterminating" nil 0)
    ("ntn" "notation" nil 264)
    ("ntnl" "notational" nil 28)
    ("ntns" "notations" nil 11)
    ("ntny" "notationally" nil 4)
    ("nufby" "nonunifiablity" nil 14)
    ("nufl" "nonunifiable" nil 19)
    ("nufm" "nonuniform" nil 3)
    ("nv'c" "Nonviolent Communication" nil 4)
    ("nz" "normalize" nil 104)
    ("nzd" "normalized" nil 34)
    ("nzg" "normalizing" nil 28)
    ("nzl" "normalizable" nil 4)
    ("nzn" "normalization" nil 114)
    ("nzns" "normalizations" nil 1)
    ("nzs" "normalizes" nil 2)
    ("nzy" "normalizability" nil 26)
    ("o'c" "of course" nil 243)
    ("o'd'e" "ordinary differential equation" nil 1)
    ("o'd'es" "ordinary differential equations" nil 4)
    ("o'f" "objective function" nil 0)
    ("o'fs" "objective functions" nil 0)
    ("o'l" "object language" nil 105)
    ("o'lc" "object logic" nil 1)
    ("o'lcs" "object logics" nil 1)
    ("o'ls" "object languages" nil 16)
    ("o'm" "object model" nil 3)
    ("o'ms" "object models" nil 0)
    ("o'o" "object-oriented" nil 68)
    ("o'o'p" "object-oriented programming" nil 0)
    ("o'on" "object-orientation" nil 5)
    ("o'p'l'c" "omega-order polymorphic lambda-calculus" nil 1)
    ("o's" "object system" nil 36)
    ("o's't" "on second thought" nil 10)
    ("o'sm" "operational semantics" nil 2)
    ("o'ss" "object systems" nil 2)
    ("o't" "overloading tool" nil 0)
    ("o't'f" "of the form" nil 91)
    ("o'tp" "object type" nil 17)
    ("o'tps" "object types" nil 10)
    ("o'u't" "once upon a time" nil 1)
    ("o'w" "of which" nil 9)
    ("ocn" "occurrence" nil 224)
    ("ocns" "occurrences" nil 197)
    ("ocsn" "occlusion" nil 13)
    ("ofr" "for" nil 26)
    ("ojn" "objection" nil 32)
    ("ojns" "objections" nil 21)
    ("ojt" "object" nil 827)
    ("ojtd" "objected" nil 4)
    ("ojts" "objects" nil 598)
    ("ojv" "objective" nil 49)
    ("ojvs" "objectives" nil 9)
    ("ojvy" "objectively" nil 10)
    ("olc" "object-logic" nil 7)
    ("olcs" "object-logics" nil 3)
    ("olg" "object-language" nil 62)
    ("olgs" "object-languages" nil 14)
    ("omer" "Ãmer" nil 8)
    ("opl" "optional" nil 147)
    ("oply" "optionally" nil 13)
    ("opn" "operation" nil 525)
    ("opnl" "operational" nil 7)
    ("opns" "operations" nil 858)
    ("opr" "operator" nil 263)
    ("oprl" "operational" nil 153)
    ("oprly" "operationally" nil 23)
    ("oprs" "operators" nil 173)
    ("optg" "operating" nil 16)
    ("ordg" "ordering" nil 20)
    ("ost'" "on second thought" nil 3)
    ("ot" "to" nil 121)
    ("otoh" "on the other hand" nil 478)
    ("otp" "object-type" nil 16)
    ("otps" "object-types" nil 9)
    ("otu" "out" nil 5)
    ("ovn" "observation" nil 2)
    ("ovns" "observations" nil 4)
    ("ovw" "overview" nil 23)
    ("owrk" "work" nil 5)
    ("ows" "otherwise" nil 477)
    ("oz" "optimize" nil 169)
    ("ozby" "optimizability" nil 4)
    ("ozd" "optimized" nil 156)
    ("ozg" "optimizing" nil 72)
    ("ozn" "optimization" nil 551)
    ("ozns" "optimizations" nil 142)
    ("ozr" "optimizer" nil 4)
    ("ozs" "optimizes" nil 8)
    ("p'a" "partial application" nil 1)
    ("p'a'p" "proofs as programs" nil 3)
    ("p'a't" "propositions as types" nil 1)
    ("p'as" "partial applications" nil 0)
    ("p'b" "pattern binder" nil 0)
    ("p'c" "predicate calculus" nil 6)
    ("p'd" "program derivation" nil 14)
    ("p'ds" "program derivations" nil 0)
    ("p'e" "partial evaluation" nil 53)
    ("p'ed" "partial evaluated" nil 1)
    ("p'f" "partial function" nil 19)
    ("p'fs" "partial functions" nil 19)
    ("p'l" "programming language" nil 140)
    ("p'l'c" "polymorphic lambda calculus" nil 13)
    ("p'lc" "programmable logic" nil 1)
    ("p'ls" "programming languages" nil 83)
    ("p'm" "pattern matching" nil 56)
    ("p'o" "partial order" nil 34)
    ("p'o'v" "point of view" nil 35)
    ("p'o'vs" "points of view" nil 0)
    ("p'og" "partial ordering" nil 0)
    ("p'os" "partial orders" nil 0)
    ("p'p" "parametric polymorphism" nil 2)
    ("p'p't" "pair-producing type" nil 7)
    ("p'p'ts" "pair-producing types" nil 5)
    ("p'p'v" "pair-producing variable" nil 7)
    ("p'p'vs" "pair-producing variables" nil 6)
    ("p'ps" "progressive pairs" nil 1)
    ("p'r" "primitive recursion" nil 17)
    ("p's" "program synthesis" nil 30)
    ("p'ss" "program syntheses" nil 1)
    ("p'st" "proper subterm" nil 1)
    ("p'v" "program verification" nil 11)
    ("p'x" "program transformation" nil 90)
    ("p'xs" "program transformations" nil 4)
    ("p-eg" "partially evaluating" nil 0)
    ("pagm" "pre-algorithm" nil 38)
    ("pagms" "pre-algorithms" nil 12)
    ("pari" "pair" nil 9)
    ("pbl" "possible" nil 926)
    ("pbm" "problem" nil 1683)
    ("pbmc" "problematic" nil 86)
    ("pbms" "problems" nil 410)
    ("pbty" "possibility" nil 219)
    ("pbtys" "possibilities" nil 226)
    ("pbvr" "proto-behavior" nil 1)
    ("pbvrs" "proto-behaviors" nil 2)
    ("pby" "possibly" nil 378)
    ("pcdn" "precondition" nil 5)
    ("pcdns" "preconditions" nil 2)
    ("pcls" "protocols" nil 1)
    ("pcr" "processor" nil 3)
    ("pdfd" "predefined" nil 7)
    ("pdn" "predomain" nil 12)
    ("pdns" "predomains" nil 16)
    ("pdt" "predicate" nil 241)
    ("pdts" "predicates" nil 59)
    ("perhpas" "perhaps" nil 32)
    ("pf" "proof" nil 212)
    ("pfc" "preference" nil 84)
    ("pfcs" "preferences" nil 47)
    ("pfmc" "performance" nil 3)
    ("pfs" "proofs" nil 264)
    ("pgm" "program" nil 1014)
    ("pgmc" "programmatic" nil 14)
    ("pgmcy" "programmatically" nil 6)
    ("pgmd" "programmed" nil 21)
    ("pgmg" "programming" nil 1054)
    ("pgml" "programmable" nil 6)
    ("pgmr" "programmer" nil 146)
    ("pgmrs" "programmers" nil 141)
    ("pgms" "programs" nil 585)
    ("pha" "polyhedra" nil 1)
    ("phn" "polyhedron" nil 20)
    ("phns" "polyhedra" nil 6)
    ("pjn" "projection" nil 75)
    ("pjns" "projections" nil 105)
    ("pjr" "projector" nil 2)
    ("pjrs" "projectors" nil 0)
    ("pjt" "project" nil 522)
    ("pjtd" "projected" nil 3)
    ("pjtg" "projecting" nil 7)
    ("pjtr" "projector" nil 2)
    ("pjtrs" "projectors" nil 1)
    ("pjts" "projects" nil 119)
    ("pjv" "projective" nil 4)
    ("pll" "parallel" nil 394)
    ("pllm" "parallelism" nil 94)
    ("plln" "parallelization" nil 6)
    ("pllz" "parallelize" nil 11)
    ("pmc" "polymorphic" nil 231)
    ("pmcy" "polymorphically" nil 4)
    ("pmgr" "programmer" nil 1)
    ("pml" "polynomial" nil 15)
    ("pmls" "polynomials" nil 14)
    ("pmm" "polymorphism" nil 313)
    ("pmn" "permutation" nil 26)
    ("pmns" "permutations" nil 10)
    ("pmr" "parameter" nil 237)
    ("pmrs" "parameters" nil 304)
    ("pnc" "permanence" nil 14)
    ("pns" "polyhedra" nil 26)
    ("pnt" "permanent" nil 21)
    ("pnty" "permanently" nil 3)
    ("poitn" "point" nil 2)
    ("poitns" "points" nil 4)
    ("pordg" "preordering" nil 2)
    ("ppn" "proposition" nil 116)
    ("ppns" "propositions" nil 20)
    ("pptys" "properties" nil 4)
    ("pr" "pair" nil 145)
    ("pr'd" "probability distribution" nil 0)
    ("pr'ds" "probability distributions" nil 1)
    ("prby" "probably" nil 1612)
    ("prpr" "pair-pair" nil 2)
    ("prs" "pairs" nil 98)
    ("prtc" "probabilistic" nil 69)
    ("prtcy" "probabilistically" nil 0)
    ("prty" "probability" nil 116)
    ("prtys" "probabilities" nil 20)
    ("psn" "position" nil 323)
    ("psnl" "positional" nil 3)
    ("psns" "positions" nil 31)
    ("psv" "positive" nil 101)
    ("psvs" "positives" nil 4)
    ("psvy" "positively" nil 8)
    ("pt" "point" nil 969)
    ("pt'd" #("partial derivative" 0 8 (fontified t) 8 18 (fontified t)) nil 1)
    ("pt'ds" #("partial derivatives" 0 8 (fontified t) 8 19 (fontified t)) nil 3)
    ("pt'f" "point-free" nil 2)
    ("ptc" "parametric" nil 52)
    ("ptcr" "particular" nil 1)
    ("ptcy" "parametrically" nil 29)
    ("ptd" "pointed" nil 233)
    ("ptg" "pointing" nil 55)
    ("ptl" "partial" nil 186)
    ("ptly" "partially" nil 50)
    ("ptn" "pattern" nil 500)
    ("ptns" "patterns" nil 338)
    ("ptr" "pointer" nil 190)
    ("ptrs" "pointers" nil 103)
    ("pts" "points" nil 281)
    ("ptv" "primitive" nil 273)
    ("ptvs" "primitives" nil 261)
    ("ptvy" "primitively" nil 2)
    ("pty" "property" nil 577)
    ("ptys" "properties" nil 469)
    ("pufby" "pre-unifiability" nil 2)
    ("pufl" "pre-unifiable" nil 1)
    ("pufn" "pre-unification" nil 69)
    ("pufr" "pre-unifier" nil 22)
    ("pufrs" "pre-unifiers" nil 27)
    ("pufy" "pre-unify" nil 1)
    ("pv" "prove" nil 298)
    ("pvbl" "provable" nil 5)
    ("pvbty" "provability" nil 4)
    ("pvby" "provably" nil 5)
    ("pvd" "proved" nil 94)
    ("pvg" "proving" nil 77)
    ("pvr" "prover" nil 17)
    ("pvrs" "provers" nil 6)
    ("pvs" "previous" nil 538)
    ("pvsy" "previously" nil 94)
    ("pvt" "private" nil 0)
    ("pvw" "preview" nil 5)
    ("pz" "parametrize" nil 42)
    ("pzd" "parametrized" nil 151)
    ("pzg" "parametrizing" nil 11)
    ("pzn" "parametrization" nil 52)
    ("pzns" "parametrizations" nil 0)
    ("pzs" "parametrizes" nil 1)
    ("q'c" "equivalence class" nil 12)
    ("q'cs" "equivalence classes" nil 4)
    ("q'm" #("quantum mechanics" 0 17 (fontified t)) nil 0)
    ("q'r" "equivalence relation" nil 8)
    ("q'rs" "equivalence relations" nil 5)
    ("qbl" "questionable" nil 9)
    ("qfd" "quantified" nil 57)
    ("qfg" "quantifying" nil 3)
    ("qfn" "quantification" nil 52)
    ("qfns" "quantifications" nil 0)
    ("qfr" "quantifier" nil 41)
    ("qfrs" "quantifiers" nil 73)
    ("qfs" "quantifies" nil 1)
    ("qfy" "quantify" nil 12)
    ("qfyd" "quantified" nil 5)
    ("qlfn" "qualification" nil 2)
    ("qlfns" "qualifications" nil 0)
    ("qlfr" "qualifier" nil 2)
    ("qlfrs" "qualifiers" nil 0)
    ("qlty" "quality" nil 6)
    ("qltys" "qualities" nil 0)
    ("qn" "question" nil 892)
    ("qnd" "questioned" nil 2)
    ("qng" "questioning" nil 2)
    ("qns" "questions" nil 426)
    ("qt" "quote" nil 10)
    ("qtn" "quaternion" nil 4)
    ("qtns" "quaternions" nil 1)
    ("qts" "quotes" nil 2)
    ("qty" "quantity" nil 4)
    ("qtys" "quantities" nil 3)
    ("qvc" "equivalence" nil 49)
    ("qvcs" "equivalences" nil 9)
    ("qvt" "equivalent" nil 197)
    ("qvts" #("equivalents" 0 11 (haskell-type t font-lock-multiline t face font-lock-comment-face fontified t)) nil 0)
    ("qvty" "equivalently" nil 128)
    ("r'a'p" "reasoning about programs" nil 2)
    ("r'b" "reactive behavior" nil 17)
    ("r'bs" "reactive behaviors" nil 29)
    ("r'd'd't" "recursively defined data type" nil 2)
    ("r'd'd'ts" "recursively defined data types" nil 2)
    ("r'e" "regular expression" nil 5)
    ("r'es" "regular expressions" nil 29)
    ("r'f" "representable functor" nil 22)
    ("r'fs" "representable functors" nil 34)
    ("r'h's" "right-hand side" nil 24)
    ("r'h'ss" "right-hand sides" nil 21)
    ("r'l" "reinforcement learning" nil 12)
    ("r'n'f" "reactive normal form" nil 3)
    ("r'o" "rigid object" nil 0)
    ("r'os" "rigid objects" nil 0)
    ("r'p'c" "rigid-path-check" nil 2)
    ("r'r" "rewrite rule" nil 89)
    ("r'rs" "rewrite rules" nil 137)
    ("r't" "referentially transparent" nil 10)
    ("r't's" "run-time system" nil 6)
    ("r'ty" "referential transparency" nil 10)
    ("r'v" "reactive value" nil 24)
    ("r'vs" "reactive values" nil 56)
    ("r'w" "roughly well-typed" nil 2)
    ("rarrow'" "â" nil 13)
    ("rbly" "arbitrarily" nil 36)
    ("rbml" "RBML" nil 85)
    ("rby" "arbitrary" nil 309)
    ("rcbn" "recombination" nil 1)
    ("rcd" "recommended" nil 2)
    ("rcn" "recursion" nil 220)
    ("rcns" "recursions" nil 26)
    ("rcptn" "recomputation" nil 3)
    ("rcst" "reconstruct" nil 0)
    ("rcsts" "reconstructs" nil 0)
    ("rcv" "recursive" nil 446)
    ("rcvy" "recursively" nil 135)
    ("rd" "rigid" nil 126)
    ("rdby" "reducibility" nil 1)
    ("rdc" "reduce" nil 154)
    ("rdcd" "reduced" nil 37)
    ("rdcg" "reducing" nil 56)
    ("rdcl" "reducible" nil 1)
    ("rdcs" "reduces" nil 25)
    ("rdf" "redefine" nil 22)
    ("rdfd" "redefined" nil 8)
    ("rdfg" #("redefining" 0 2 (fontified t) 2 10 (fontified t)) nil 0)
    ("rdfl" "rigid-flexible" nil 54)
    ("rdfn" "redefinition" nil 3)
    ("rdfs" "redefines" nil 0)
    ("rdn" "reduction" nil 191)
    ("rdns" "reductions" nil 38)
    ("rdrd" "rigid-rigid" nil 150)
    ("rfc" "reference" nil 272)
    ("rfcd" "referenced" nil 10)
    ("rfcs" "references" nil 232)
    ("rfd" "reified" nil 9)
    ("rfg" "reifying" nil 12)
    ("rfl" "referential" nil 13)
    ("rfmn" "reformulation" nil 12)
    ("rfmns" "reformulations" nil 2)
    ("rfmt" "reformulate" nil 15)
    ("rfmtg" "reformulating" nil 4)
    ("rfn" "reification" nil 95)
    ("rfns" "reifications" nil 2)
    ("rfr" "reifier" nil 1)
    ("rfy" "reify" nil 24)
    ("rfys" "reifies" nil 5)
    ("rgt" "right" nil 3)
    ("rgz" "recognize" nil 2)
    ("rjn" "rejection" nil 1)
    ("rl" "rule" nil 311)
    ("rl'" "rl" nil 13)
    ("rlcn" "relocation" nil 31)
    ("rlcns" "relocations" nil 1)
    ("rln" "relation" nil 285)
    ("rlnl" "relational" nil 22)
    ("rlns" "relations" nil 97)
    ("rlp" "relationship" nil 230)
    ("rlps" "relationships" nil 74)
    ("rls" "rules" nil 321)
    ("rpbl" "representable" nil 240)
    ("rpc" "replace" nil 686)
    ("rpcd" "replaced" nil 189)
    ("rpcg" "replacing" nil 211)
    ("rpcs" "replaces" nil 37)
    ("rpct" "replacement" nil 70)
    ("rpcts" "replacements" nil 9)
    ("rpn" "representation" nil 1345)
    ("rpnl" "representational" nil 32)
    ("rpns" "representations" nil 465)
    ("rpny" "representationally" nil 2)
    ("rpt" "represent" nil 414)
    ("rptbl" "representable" nil 1)
    ("rptd" "represented" nil 260)
    ("rptg" "representing" nil 178)
    ("rpts" "represents" nil 82)
    ("rptv" "representative" nil 6)
    ("rptvs" "representatives" nil 0)
    ("rpv" "respective" nil 5)
    ("rpvy" "respectively" nil 35)
    ("rpzn" "reparametrization" nil 3)
    ("rqd" "required" nil 237)
    ("rqg" "requiring" nil 34)
    ("rqr" "require" nil 349)
    ("rqrd" "required" nil 22)
    ("rqrg" "requiring" nil 55)
    ("rqrs" "requires" nil 325)
    ("rqt" "requirement" nil 141)
    ("rqts" "requirements" nil 109)
    ("rsn" "resolution" nil 154)
    ("rsns" "resolutions" nil 6)
    ("rtn" "rotation" nil 83)
    ("rtnl" "rotational" nil 3)
    ("rtns" "rotations" nil 20)
    ("rvlt" "re-evaluate" nil 2)
    ("rvltd" "re-evaluated" nil 0)
    ("rvn" "revolution" nil 2)
    ("rvns" "revolutions" nil 0)
    ("rvy" "respectively" nil 98)
    ("s'a" "such as" nil 364)
    ("s'c" "sufficient condition" nil 24)
    ("s'cs" "sufficient conditions" nil 0)
    ("s'ctn" "success continuation" nil 62)
    ("s'ctns" "success continuations" nil 22)
    ("s'e" "side-effect" nil 12)
    ("s'e'c" "semantic editor combinator" nil 7)
    ("s'e'cs" "semantic editor combinators" nil 7)
    ("s'ec" "syntactic equivalence" nil 4)
    ("s'eg" "software engineering" nil 8)
    ("s'es" "side-effects" nil 17)
    ("s'f" "solved form" nil 31)
    ("s'i" "structural induction" nil 16)
    ("s'j" "syntactic judgment" nil 4)
    ("s'js" "syntactic judgments" nil 1)
    ("s'm" "state machine" nil 0)
    ("s'ms" "state machines" nil 0)
    ("s'n" "strong normalization" nil 26)
    ("s'ng" "strongly normalizing" nil 7)
    ("s'nz" "strongly normalize" nil 4)
    ("s'nzs" "strongly normalizes" nil 0)
    ("s'o" "second-order" nil 56)
    ("s'o'm" "second-order matching" nil 10)
    ("s'o'u" "second-order unification" nil 3)
    ("s'p" "special purpose" nil 11)
    ("s'p'o" "strict partial order" nil 8)
    ("s'p'os" "strict partial orders" nil 0)
    ("s'ps" "special predicates" nil 1)
    ("s'r" "simplification rule" nil 3)
    ("s'rs" "simplification rules" nil 2)
    ("s't" "such that" nil 311)
    ("s't'c" "simply typed calculus" nil 4)
    ("s't'l'c" "simply typed lambda-calculus" nil 26)
    ("s't'l's" "same top level structure" nil 2)
    ("s't'm" "space-time model" nil 6)
    ("s't'ms" "space-time models" nil 10)
    ("s'td" "simply typed" nil 25)
    ("s'tp" "simple type" nil 1)
    ("s'tps" "simple types" nil 1)
    ("s'v" "scientific visualization" nil 2)
    ("s'x" "specification transformation" nil 5)
    ("s'xs" "specification transformations" nil 0)
    ("sb'i" "substitution instance" nil 0)
    ("sb'is" "substitution instances" nil 1)
    ("sbn" "substitution" nil 666)
    ("sbns" "substitutions" nil 312)
    ("sbt" "substitute" nil 92)
    ("sbtd" "substituted" nil 29)
    ("sbtg" "substituting" nil 33)
    ("sbtn" "subtraction" nil 1)
    ("sbts" "substitutes" nil 7)
    ("sbty" "substitutivity" nil 1)
    ("sbv" "substitutive" nil 22)
    ("sbvy" "substitutivity" nil 9)
    ("scn" "section" nil 883)
    ("scns" "sections" nil 95)
    ("scs" "synchronous" nil 49)
    ("scsy" "synchronously" nil 4)
    ("scz" "synchronize" nil 5)
    ("sczd" "synchronized" nil 7)
    ("sczg" "synchronizing" nil 0)
    ("sczn" "synchronization" nil 61)
    ("sczs" "synchronizes" nil 0)
    ("sd" "second" nil 1233)
    ("sds" "seconds" nil 26)
    ("sdvn" "subderivation" nil 1)
    ("sdy" "secondly" nil 3)
    ("sfc" "specific" nil 345)
    ("sfcs" "specifics" nil 43)
    ("sfcy" "specifically" nil 216)
    ("sfn" "specification" nil 815)
    ("sfns" "specifications" nil 246)
    ("sft" "sufficient" nil 102)
    ("sfty" "sufficiently" nil 42)
    ("sfy" "specify" nil 236)
    ("sfyd" "specified" nil 188)
    ("sfyg" "specifying" nil 79)
    ("sfyr" "specifier" nil 4)
    ("sfyrs" "specifiers" nil 0)
    ("sfys" "specifies" nil 23)
    ("sg" "something" nil 1568)
    ("sgr" "signature" nil 164)
    ("sgrs" "signatures" nil 94)
    ("shouldnt" "shouldn't" nil 10)
    ("si" #("is" 0 1 (fontified t font-lock-fontified t) 1 2 (fontified t font-lock-fontified t)) nil 2)
    ("siad" "said" nil 12)
    ("sicne" "since" nil 66)
    ("simeq'" "â" nil 1)
    ("simlify" "simplify" nil 1)
    ("sivl" "subinterval" nil 1)
    ("sivls" "subintervals" nil 2)
    ("sjt" "subject" nil 36)
    ("sjtd" "subjected" nil 4)
    ("sjts" "subjects" nil 1)
    ("sjv" "subjective" nil 20)
    ("sjvy" "subjectively" nil 11)
    ("slcn" "selection" nil 10)
    ("sln" "solution" nil 611)
    ("slns" "solutions" nil 167)
    ("smc" "semantic" nil 481)
    ("smcs" "semantics" nil 905)
    ("smcy" "semantically" nil 117)
    ("smn" "simplification" nil 261)
    ("smns" "simplifications" nil 61)
    ("smy" "simplify" nil 413)
    ("smyd" "simplified" nil 147)
    ("smyg" "simplifying" nil 115)
    ("smyr" "simplifier" nil 42)
    ("smyrs" "simplifiers" nil 1)
    ("smys" "simplifies" nil 73)
    ("snc" "synthetic" nil 72)
    ("sncy" "synthetically" nil 2)
    ("sns" "synthesis" nil 136)
    ("snss" "syntheses" nil 6)
    ("snz" "synthesize" nil 68)
    ("snzd" "synthesized" nil 23)
    ("snzg" "synthesizing" nil 22)
    ("snzs" "synthesizes" nil 0)
    ("soem" "some" nil 58)
    ("spbm" "subproblem" nil 1)
    ("spbms" "subproblems" nil 4)
    ("spl" "special" nil 421)
    ("spls" "specials" nil 5)
    ("sply" "specially" nil 24)
    ("spt" "separate" nil 3)
    ("sql" "sequential" nil 240)
    ("sqly" "sequentially" nil 14)
    ("sqn" "sequence" nil 418)
    ("sqns" "sequences" nil 176)
    ("sqty" "sequentiality" nil 91)
    ("srv" "surjective" nil 14)
    ("srvly" "surjectively" nil 4)
    ("srvty" "surjectivity" nil 13)
    ("ssg" "structure-sharing" nil 25)
    ("stc" "syntactic" nil 131)
    ("stcly" "syntactically" nil 0)
    ("stcy" "syntactically" nil 15)
    ("std" "standard" nil 566)
    ("stds" "standards" nil 8)
    ("stdz" "standardize" nil 6)
    ("stdzn" "standardization" nil 2)
    ("stfd" "satisfied" nil 28)
    ("stfg" "satisfying" nil 41)
    ("stfl" "satisfiable" nil 6)
    ("stfn" "satisfaction" nil 37)
    ("stfs" "satisfies" nil 20)
    ("stfy" "satisfy" nil 77)
    ("stm" "system" nil 524)
    ("stmc" "systematic" nil 30)
    ("stmcy" "systematically" nil 21)
    ("stms" "systems" nil 306)
    ("stmt" "statement" nil 102)
    ("stmts" "statements" nil 43)
    ("sty" "satisfy" nil 119)
    ("styd" "satisfied" nil 51)
    ("styg" "satisfying" nil 41)
    ("stys" "satisfies" nil 35)
    ("svl" "several" nil 554)
    ("sx" "syntax" nil 455)
    ("sxn" "subexpression" nil 3)
    ("sxns" "subexpressions" nil 0)
    ("sxpn" "s-expression" nil 3)
    ("sz" "specialize" nil 203)
    ("szd" "specialized" nil 185)
    ("szg" "specializing" nil 47)
    ("szn" "specialization" nil 129)
    ("szns" "specializations" nil 50)
    ("szr" "specializer" nil 9)
    ("szs" "specializes" nil 124)
    ("t'b" "tangent bundle" nil 0)
    ("t'bs" "tangent bundles" nil 0)
    ("t'c" "type-check" nil 9)
    ("t'c'm" "type class morphism" nil 16)
    ("t'c'ms" "type class morphisms" nil 22)
    ("t'cg" "type checking" nil 82)
    ("t'cr" "type checker" nil 1)
    ("t'd" "temporal deviation" nil 3)
    ("t'f" "the following" nil 1375)
    ("t'f'p" "tangible functional programming" nil 5)
    ("t'i" "type inference" nil 186)
    ("t'id" "type-instantiated" nil 9)
    ("t'in" "type-instantiation" nil 4)
    ("t'itd" "tolerably ill-typed" nil 5)
    ("t'itds" "tolerable ill-typedness" nil 0)
    ("t'l" "term language" nil 73)
    ("t'l'c" "typed lambda calculus" nil 67)
    ("t'l'cs" "typed lambda-calculi" nil 4)
    ("t'l'i" "term language interface" nil 2)
    ("t'l's" "top level structure" nil 28)
    ("t'ls" "term languages" nil 4)
    ("t'o" "third-order" nil 13)
    ("t'ocn" "term-occurence" nil 2)
    ("t'ocns" "term-occurrences" nil 1)
    ("t'p" "theorem proving" nil 94)
    ("t'pr" "theorem prover" nil 3)
    ("t'r" "tail recursive" nil 3)
    ("t't" "time transform" nil 27)
    ("t'td" "time transformed" nil 0)
    ("t'tn" "time transformation" nil 22)
    ("t'tns" "time transformations" nil 3)
    ("t'ts" "time transforms" nil 9)
    ("t'v" "type variable" nil 53)
    ("t'vs" "type variables" nil 124)
    ("t'w" "to which" nil 0)
    ("ta'v" "tangible value" nil 5)
    ("ta'vs" "tangible values" nil 8)
    ("taht" "that" nil 42)
    ("tcl" "technical" nil 207)
    ("tcly" "technically" nil 13)
    ("tcy" "technology" nil 103)
    ("tcys" "technologies" nil 5)
    ("td" "third" nil 136)
    ("teh" "the" nil 926)
    ("tfr" "therefore" nil 152)
    ("thats" "that's" nil 1)
    ("theres" "there's" nil 0)
    ("theri" "their" nil 4)
    ("theyve" "they've" nil 1)
    ("thm" "theorem" nil 131)
    ("thms" "theorems" nil 60)
    ("thsi" "this" nil 111)
    ("thta" "that" nil 22)
    ("thy" "theory" nil 227)
    ("thys" "theories" nil 21)
    ("tiem" "time" nil 74)
    ("tiems" "times" nil 10)
    ("times'" "Ã" nil 11)
    ("tm" "term" nil 1248)
    ("tm'i" "term inference" nil 25)
    ("tmgy" "terminology" nil 12)
    ("tml" "terminal" nil 19)
    ("tmls" #("terminals" 0 9 (fontified t)) nil 0)
    ("tmn" "termination" nil 77)
    ("tms" "terms" nil 1227)
    ("tmt" "terminate" nil 40)
    ("tmtd" "terminated" nil 13)
    ("tmtg" "terminating" nil 12)
    ("tmts" "terminates" nil 13)
    ("tmv" "term-variable" nil 1)
    ("tnq" "technique" nil 242)
    ("tnqs" "techniques" nil 180)
    ("top'" "â¤" nil 1)
    ("tp" "type" nil 6530)
    ("tp'c" "type class" nil 6)
    ("tp'cs" "type classes" nil 1)
    ("tp'f" "type family" nil 7)
    ("tp'fs" "type families" nil 2)
    ("tpbl" "typable" nil 1)
    ("tpd" "typed" nil 377)
    ("tpg" "typing" nil 332)
    ("tpgs" "typings" nil 18)
    ("tpl" "tuple" nil 11)
    ("tps" "types" nil 2693)
    ("tptp" "type-type" nil 4)
    ("tr'c" "transitive closure" nil 2)
    ("ty'c" "type class" nil 9)
    ("ty'cs" "type classes" nil 1)
    ("u'c" "unification context" nil 36)
    ("u'cs" "unification contexts" nil 3)
    ("u'e" "unification equivalent" nil 5)
    ("u'i" "user interface" nil 21)
    ("u'in" "user interaction" nil 1)
    ("u'is" "user interfaces" nil 4)
    ("u'l" "unification logic" nil 5)
    ("u'p" "unification problem" nil 151)
    ("u'ps" "unification problems" nil 142)
    ("u'q" "universal quantification" nil 5)
    ("u'qd" "universally quantified" nil 0)
    ("ucvtl" "unconventional" nil 4)
    ("udcbl" "undecidable" nil 7)
    ("udfd" "undefined" nil 847)
    ("ufby" "unifiability" nil 104)
    ("ufd" "unified" nil 66)
    ("ufg" "unifying" nil 89)
    ("ufl" "unifiable" nil 63)
    ("ufm" "uniform" nil 107)
    ("ufms" "uniforms" nil 1)
    ("ufmy" "uniformly" nil 9)
    ("ufn" "unification" nil 688)
    ("ufns" "unifications" nil 13)
    ("ufr" "unifier" nil 222)
    ("ufrs" "unifiers" nil 190)
    ("ufs" "unifies" nil 54)
    ("ufy" "unify" nil 118)
    ("ufys" "unifies" nil 5)
    ("uiprt" "unimportant" nil 12)
    ("uitg" "uninteresting" nil 8)
    ("uizd" "uninitialized" nil 2)
    ("uncly" "unnecessarily" nil 39)
    ("uncy" "unnecessary" nil 128)
    ("unq" "unique" nil 1)
    ("untl" "unnatural" nil 12)
    ("untly" "unnaturally" nil 0)
    ("uozd" "unoptimized" nil 5)
    ("usfbl" "unsatisfiable" nil 3)
    ("ustyd" "unsatisfied" nil 2)
    ("ustyg" "unsatisfying" nil 1)
    ("utpd" "untyped" nil 18)
    ("uvl" "universal" nil 183)
    ("uvls" "universals" nil 19)
    ("uvltd" "unevaluated" nil 3)
    ("uvly" "universally" nil 21)
    ("uvy" "universally" nil 14)
    ("v'b" "variable binding" nil 0)
    ("v'd" "virtual device" nil 8)
    ("v'ds" "virtual devices" nil 1)
    ("v'm" "virtual machine" nil 11)
    ("v'ms" "virtual machines" nil 2)
    ("v'p" "view point" nil 5)
    ("v'r" "virtual reality" nil 5)
    ("v's" "vector space" nil 68)
    ("v'ss" "vector spaces" nil 91)
    ("v't" "virtual trackball" nil 9)
    ("v'w" "virtual world" nil 14)
    ("v'ws" "virtual worlds" nil 9)
    ("v'x" "viewing transform" nil 18)
    ("v'xs" "viewing transforms" nil 2)
    ("vbl" "variable" nil 913)
    ("vbls" "variables" nil 830)
    ("vfcn" "verification" nil 2)
    ("vfd" "verified" nil 15)
    ("vfg" "verifying" nil 4)
    ("vfl" "verifiable" nil 0)
    ("vfn" "verification" nil 38)
    ("vfy" "verify" nil 48)
    ("vfyd" "verified" nil 9)
    ("vfyg" "verifying" nil 0)
    ("vfys" "verifies" nil 3)
    ("vln" "evaluation" nil 312)
    ("vlns" "evaluations" nil 24)
    ("vlt" "evaluate" nil 92)
    ("vltd" "evaluated" nil 66)
    ("vltg" "evaluating" nil 42)
    ("vlts" "evaluates" nil 18)
    ("vpt" "viewpoint" nil 18)
    ("vpts" "viewpoints" nil 0)
    ("vrml" "VRML" nil 23)
    ("vsl" "visual" nil 3)
    ("vsn" "version" nil 1243)
    ("vsns" "versions" nil 278)
    ("vtm" "variable-term" nil 39)
    ("vtp" "variable-type" nil 3)
    ("vvtm" "virtual-variable-term" nil 0)
    ("vz" "visualize" nil 14)
    ("vzd" "visualized" nil 5)
    ("vzg" "visualizing" nil 12)
    ("vzn" "visualization" nil 35)
    ("vzns" "visualizations" nil 20)
    ("vzr" "visualizer" nil 1)
    ("vzrs" "visualizers" nil 2)
    ("vzs" "visualizes" nil 0)
    ("w'c" "world coordinate" nil 3)
    ("w'cs" "world coordinates" nil 1)
    ("w'd" "well-defined" nil 0)
    ("w'f" "well formed" nil 12)
    ("w'f'o" "well founded ordering" nil 7)
    ("w'f'os" "well founded orderings" nil 1)
    ("w'fs" "well formedness" nil 3)
    ("w'h'n'f" "weak head normal form" nil 10)
    ("w'h'r" "weak head reduction" nil 1)
    ("w'l'g" "without loss of generality" nil 6)
    ("w'p" "word processing" nil 3)
    ("w'r't" "with respect to" nil 117)
    ("w'v" "weakly valid" nil 2)
    ("w'w" "with which" nil 3)
    ("waht" "what" nil 27)
    ("wasnt" "wasn't" nil 16)
    ("wch" "which" nil 5614)
    ("wdfd" "well-defined" nil 20)
    ("werent" "weren't" nil 5)
    ("weve" "we've" nil 12)
    ("wh" "with" nil 15374)
    ("whehter" "whether" nil 15)
    ("whn" "within" nil 7)
    ("wiht" "with" nil 2)
    ("wkdd" "well-kinded" nil 7)
    ("wnat" "want" nil 13)
    ("wo" "without" nil 1413)
    ("wont" "won't" nil 29)
    ("wont'" "wont" nil 3)
    ("woudl" "would" nil 19)
    ("wouldnt" "wouldn't" nil 34)
    ("wrok" "work" nil 12)
    ("wroking" "working" nil 2)
    ("wtbl" "well-typable" nil 1)
    ("wtd" "well-typed" nil 295)
    ("wtds" "well-typedness" nil 31)
    ("x'p" "transformation path" nil 3)
    ("x'ps" "transformation paths" nil 1)
    ("x'r" "transformation rule" nil 29)
    ("x'rs" "transformation rules" nil 72)
    ("x's" "transformation system" nil 7)
    ("xcv" "exclusive" nil 3)
    ("xfbl" "transformable" nil 3)
    ("xfd" "transformed" nil 63)
    ("xfg" "transforming" nil 61)
    ("xfl" "transformational" nil 12)
    ("xfm" "transform" nil 486)
    ("xfmd" "transformed" nil 10)
    ("xfmg" "transforming" nil 11)
    ("xfmr" "transformer" nil 2)
    ("xfms" "transforms" nil 144)
    ("xfn" "transformation" nil 831)
    ("xfnl" "transformational" nil 4)
    ("xfns" "transformations" nil 370)
    ("xfr" "transformer" nil 44)
    ("xfrs" "transformers" nil 23)
    ("xln" "translation" nil 393)
    ("xlns" "translations" nil 37)
    ("xlt" "translate" nil 168)
    ("xltd" "translated" nil 38)
    ("xltg" "translating" nil 44)
    ("xltn" "translation" nil 2)
    ("xltr" "translator" nil 12)
    ("xlts" "translates" nil 11)
    ("xn" "transition" nil 161)
    ("xnl" "transitional" nil 2)
    ("xns" "transitions" nil 45)
    ("xpl" "example" nil 1356)
    ("xpln" "explanation" nil 216)
    ("xplns" "explanations" nil 27)
    ("xpls" "examples" nil 861)
    ("xpn" "expression" nil 714)
    ("xpnl" "exponential" nil 0)
    ("xpns" "expressions" nil 588)
    ("xps" "express" nil 233)
    ("xpsd" "expressed" nil 159)
    ("xpsg" "expressing" nil 55)
    ("xpsl" "expressible" nil 0)
    ("xpss" "expresses" nil 2)
    ("xpsv" "expressive" nil 12)
    ("xpv" "expressive" nil 43)
    ("xpvs" "expressiveness" nil 23)
    ("xrl" "external" nil 98)
    ("xrly" "externally" nil 9)
    ("xrz" "externalize" nil 7)
    ("xrzd" "externalized" nil 1)
    ("xrzg" "externalizing" nil 0)
    ("xrzn" "externalization" nil 8)
    ("xrzs" "externalizes" nil 0)
    ("xsl" "extensional" nil 12)
    ("xsly" "extensionally" nil 0)
    ("xtbl" "extensible" nil 49)
    ("xtby" "extensibility" nil 24)
    ("xtc" "existence" nil 26)
    ("xtd" "extend" nil 226)
    ("xtdd" "extended" nil 140)
    ("xtdg" "extending" nil 82)
    ("xtds" "extends" nil 59)
    ("xtg" "existing" nil 175)
    ("xtl" "existential" nil 40)
    ("xtls" "existentials" nil 7)
    ("xtly" "existentially" nil 29)
    ("xtn" "extension" nil 231)
    ("xtns" "extensions" nil 145)
    ("xtv" "extensive" nil 10)
    ("xtvy" "extensively" nil 3)
    ("youd" "you'd" nil 1)
    ("youre" "you're" nil 2)
    ("youve" "you've" nil 7)
   ))

(define-abbrev-table 'glsl-mode-abbrev-table '())

(define-abbrev-table 'graphviz-dot-mode-abbrev-table '())

(define-abbrev-table 'grep-mode-abbrev-table '())

(define-abbrev-table 'haskell-cabal-mode-abbrev-table '())

(define-abbrev-table 'haskell-compilation-mode-abbrev-table '())

(define-abbrev-table 'haskell-debug-mode-abbrev-table '())

(define-abbrev-table 'haskell-error-mode-abbrev-table '())

(define-abbrev-table 'haskell-interactive-mode-abbrev-table '())

(define-abbrev-table 'haskell-menu-mode-abbrev-table '())

(define-abbrev-table 'haskell-mode-abbrev-table
  '(
    ("alt" "Alt" nil 2)
    ("df" "df" nil 28)
    ("fo" "fo" nil 8)
   ))

(define-abbrev-table 'haskell-presentation-mode-abbrev-table '())

(define-abbrev-table 'haskell-yesod-parse-routes-mode-abbrev-table '())

(define-abbrev-table 'help-mode-abbrev-table '())

(define-abbrev-table 'hs-lint-mode-abbrev-table '())

(define-abbrev-table 'html-mode-abbrev-table
  '(
    ("td" "td" nil 21)
   ))

(define-abbrev-table 'idl-mode-abbrev-table '())

(define-abbrev-table 'inferior-haskell-mode-abbrev-table '())

(define-abbrev-table 'inferior-python-mode-abbrev-table '())

(define-abbrev-table 'java-mode-abbrev-table
  '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("finally" "finally" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'javascript-mode-abbrev-table '())

(define-abbrev-table 'js-jsx-mode-abbrev-table '())

(define-abbrev-table 'js-mode-abbrev-table '())

(define-abbrev-table 'latex-mode-abbrev-table '())

(define-abbrev-table 'lisp-mode-abbrev-table
  '(
    ("mvb" "multiple-value-bind" nil 119)
    ("mvs" "multiple-value-setq" nil 3)
   ))

(define-abbrev-table 'literate-haskell-mode-abbrev-table '())

(define-abbrev-table 'log-view-mode-abbrev-table '())

(define-abbrev-table 'makefile-automake-mode-abbrev-table '())

(define-abbrev-table 'makefile-bsdmake-mode-abbrev-table '())

(define-abbrev-table 'makefile-gmake-mode-abbrev-table '())

(define-abbrev-table 'makefile-imake-mode-abbrev-table '())

(define-abbrev-table 'makefile-makepp-mode-abbrev-table '())

(define-abbrev-table 'makefile-mode-abbrev-table '())

(define-abbrev-table 'markdown-mode-abbrev-table '())

(define-abbrev-table 'markdown-view-mode-abbrev-table '())

(define-abbrev-table 'message-mode-abbrev-table '())

(define-abbrev-table 'messages-buffer-mode-abbrev-table '())

(define-abbrev-table 'network-connection-mode-abbrev-table '())

(define-abbrev-table 'nslookup-mode-abbrev-table '())

(define-abbrev-table 'nxml-mode-abbrev-table '())

(define-abbrev-table 'objc-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 1)
   ))

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'org-mode-abbrev-table '())

(define-abbrev-table 'outline-mode-abbrev-table '())

(define-abbrev-table 'package-menu-mode-abbrev-table '())

(define-abbrev-table 'perl-mode-abbrev-table '())

(define-abbrev-table 'pike-mode-abbrev-table
  '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
   ))

(define-abbrev-table 'plain-tex-mode-abbrev-table '())

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'ps-mode-abbrev-table '())

(define-abbrev-table 'ps-run-mode-abbrev-table '())

(define-abbrev-table 'python-mode-abbrev-table '())

(define-abbrev-table 'python-mode-skeleton-abbrev-table '())

(define-abbrev-table 'ruby-mode-abbrev-table '())

(define-abbrev-table 'scss-mode-abbrev-table '())

(define-abbrev-table 'select-tags-table-mode-abbrev-table '())

(define-abbrev-table 'sgml-mode-abbrev-table '())

(define-abbrev-table 'sh-mode-abbrev-table '())

(define-abbrev-table 'shell-mode-abbrev-table '())

(define-abbrev-table 'slitex-mode-abbrev-table '())

(define-abbrev-table 'smbclient-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'speedbar-mode-abbrev-table '())

(define-abbrev-table 'tabulated-list-mode-abbrev-table '())

(define-abbrev-table 'tar-mode-abbrev-table '())

(define-abbrev-table 'tex-mode-abbrev-table
  '(
    ("a'cn" "$\\alpha$ conversion" nil 52)
    ("a'ec" "$\\alpha$ equivalence" nil 13)
    ("a'et" "$\\alpha$ equivalent" nil 5)
    ("b'cn" "$\\beta$ conversion" nil 3)
    ("b'nf" "$\\beta$ normal form" nil 31)
    ("b'r" "$\\beta$ reduce" nil 9)
    ("b'rd" "$\\beta$ reduced" nil 3)
    ("b'rn" "$\\beta$ reduction" nil 32)
    ("be'nf" "$\\beta\\eta$ normal form" nil 8)
    ("benf" "$\\beta\\eta$ normal form" nil 27)
    ("benfs" "$\\beta\\eta$ normal forms" nil 4)
    ("d't'l'c" "dependent typed $\\lambda$ calculus" nil 1)
    ("e'e" "$\\eta$ expand" nil 15)
    ("e'ed" "$\\eta$ expanded" nil 3)
    ("e'en" "$\\eta$ expansion" nil 22)
    ("e'rn" "$\\eta$ reduction" nil 11)
    ("gd" "gd" nil 15)
    ("ith'" "$i$th" nil 19)
    ("l'c" "$\\lambda$ calculus" nil 43)
    ("l'cs" "$\\lambda$ calculi" nil 9)
    ("l'cvby" "$\\lambda$ convertability" nil 4)
    ("l'ec" "$\\lambda$ equivalence" nil 2)
    ("l'mm" "$\\lambda$ morphism" nil 3)
    ("l'mms" "$\\lambda$ morphisms" nil 5)
    ("lbehnf" "long $\\beta\\eta$ normal form" nil 8)
    ("lbenf" "long $\\beta\\eta$ normal form" nil 18)
    ("lbepnf" "long $\\beta\\eta$ product normal form" nil 3)
    ("lcvn" "$\\lambda$ conversion" nil 1)
    ("lfhnf" "$\\lambda$-free head normal form" nil 6)
    ("lpg" "$\\lambda$Prolog" nil 34)
    ("lppg" "$\\Lpi$Prolog" nil 1)
    ("ltm" "$\\lambda$ term" nil 1)
    ("ltms" "$\\lambda$ terms" nil 1)
    ("o'p'l'c" "$\\omega$-order polymorphic $\\lambda$ calculus" nil 7)
    ("p'l'c" "polymorphic $\\lambda$ calculus" nil 19)
    ("s't'l'c" "simply typed $\\lambda$ calculus" nil 45)
    ("t'l'c" "typed $\\lambda$ calculus" nil 35)
    ("t'l'cs" "typed $\\lambda$ calculi" nil 8)
   ))

(define-abbrev-table 'tex-shell-abbrev-table '())

(define-abbrev-table 'texinfo-mode-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'url-cookie-mode-abbrev-table '())

(define-abbrev-table 'use-package-statistics-mode-abbrev-table '())

(define-abbrev-table 'vc-annotate-mode-abbrev-table '())

(define-abbrev-table 'vc-dired-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-edit-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-view-mode-abbrev-table '())

(define-abbrev-table 'vc-git-region-history-mode-abbrev-table '())

(define-abbrev-table 'vc-svn-log-view-mode-abbrev-table '())

(define-abbrev-table 'verilog-mode-abbrev-table '())

(define-abbrev-table 'xref--xref-buffer-mode-abbrev-table '())

(define-abbrev-table 'yaml-mode-abbrev-table '())

